"use strict";
(self["webpackChunkchat"] = self["webpackChunkchat"] || []).push([[713],{

/***/ 85756:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  I: () => (/* binding */ ColorModeContext),
  A: () => (/* binding */ src_App)
});

// EXTERNAL MODULE: consume shared module (default) react@^18.3.1 (singleton) (fallback: ./node_modules/react/index.js)
var index_js_ = __webpack_require__(50318);
var index_js_default = /*#__PURE__*/__webpack_require__.n(index_js_);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(85072);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(97825);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(77659);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(55056);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(10540);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(41113);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/index.css
var cjs_js_src = __webpack_require__(6523);
;// CONCATENATED MODULE: ./src/index.css

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(cjs_js_src/* default */.A, options);




       /* harmony default export */ const src = (cjs_js_src/* default */.A && cjs_js_src/* default */.A.locals ? cjs_js_src/* default */.A.locals : undefined);

// EXTERNAL MODULE: ./node_modules/@fontsource/roboto/300.css
var _300 = __webpack_require__(24172);
// EXTERNAL MODULE: ./node_modules/@fontsource/roboto/400.css
var _400 = __webpack_require__(45483);
// EXTERNAL MODULE: ./node_modules/@fontsource/roboto/500.css
var _500 = __webpack_require__(66718);
// EXTERNAL MODULE: ./node_modules/@fontsource/roboto/700.css
var _700 = __webpack_require__(23024);
// EXTERNAL MODULE: ./node_modules/react-redux/dist/react-redux.mjs
var react_redux = __webpack_require__(71468);
// EXTERNAL MODULE: ./node_modules/react-router-dom/dist/index.js
var dist = __webpack_require__(84976);
// EXTERNAL MODULE: ./node_modules/react-router/dist/index.js
var react_router_dist = __webpack_require__(47767);
// EXTERNAL MODULE: ./node_modules/@mui/material/Avatar/Avatar.js + 2 modules
var Avatar = __webpack_require__(81385);
// EXTERNAL MODULE: ./node_modules/@mui/material/TextField/TextField.js + 3 modules
var TextField = __webpack_require__(42471);
// EXTERNAL MODULE: ./node_modules/@mui/material/Button/Button.js + 3 modules
var Button = __webpack_require__(86990);
// EXTERNAL MODULE: ./node_modules/@mui/material/Typography/Typography.js + 1 modules
var Typography_Typography = __webpack_require__(14073);
// EXTERNAL MODULE: ./node_modules/@mui/styles/makeStyles/makeStyles.js + 6 modules
var makeStyles = __webpack_require__(80284);
// EXTERNAL MODULE: ./node_modules/@mui/styles/useTheme/index.js
var useTheme = __webpack_require__(23668);
// EXTERNAL MODULE: ./src/components/redux/slices/userProfileSlice.js
var userProfileSlice = __webpack_require__(14279);
// EXTERNAL MODULE: ./src/components/redux/slices/podsSlice.js
var podsSlice = __webpack_require__(78179);
// EXTERNAL MODULE: ./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs + 2 modules
var redux_toolkit_modern = __webpack_require__(85268);
// EXTERNAL MODULE: ./node_modules/immer/dist/immer.mjs
var immer = __webpack_require__(1932);
;// CONCATENATED MODULE: ./src/components/redux/slices/contactsSlice.js
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var contactsSlice = (0,redux_toolkit_modern/* createSlice */.Z0)({
  name: "contacts",
  initialState: [],
  reducers: {
    addContact: function addContact(state, action) {
      if (!state.find(function (contact) {
        return contact.id === action.payload.id;
      })) {
        state.push(action.payload);
      }
    },
    removeContact: function removeContact(state, action) {
      var newState = (0,immer/* current */.ss)(state);
      var filteredNewState = newState.filter(function (contact) {
        return contact.id !== action.payload.id;
      });
      state = filteredNewState;
      return state;
    },
    updateContact: function updateContact(state, action) {
      state = state.map(function (contact) {
        if (contact.id === action.payload.id) {
          return _objectSpread(_objectSpread({}, contact), action.payload);
        }
        return contact;
      });
      return state;
    },
    setContacts: function setContacts(state, action) {
      state = action.payload;
      return state;
    },
    updateContactDisplayName: function updateContactDisplayName(state, action) {
      state = state.map(function (contact) {
        if (contact.id === action.payload.id) {
          return _objectSpread(_objectSpread({}, contact), {}, {
            displayName: action.payload.displayName
          });
        }
        return contact;
      });
      return state;
    }
  }
});

// Action creators are generated for each case reducer function
var _contactsSlice$action = contactsSlice.actions,
  addContact = _contactsSlice$action.addContact,
  removeContact = _contactsSlice$action.removeContact,
  updateContact = _contactsSlice$action.updateContact,
  setContacts = _contactsSlice$action.setContacts,
  updateContactDisplayName = _contactsSlice$action.updateContactDisplayName;

/* harmony default export */ const slices_contactsSlice = (contactsSlice.reducer);
;// CONCATENATED MODULE: ./src/components/redux/slices/encryptionSlice.js

var encryptionSlice = (0,redux_toolkit_modern/* createSlice */.Z0)({
  name: "encryption",
  initialState: {},
  reducers: {
    addEncryptionKeys: function addEncryptionKeys(state, action) {
      var _action$payload = action.payload,
        userId = _action$payload.userId,
        publicKey = _action$payload.publicKey,
        privateKey = _action$payload.privateKey,
        remotePublicKey = _action$payload.remotePublicKey,
        symmetricKey = _action$payload.symmetricKey;
      state[userId] = {
        publicKey: publicKey,
        privateKey: privateKey,
        remotePublicKey: remotePublicKey,
        symmetricKey: symmetricKey
      };
    },
    updateEncryptionKeys: function updateEncryptionKeys(state, action) {
      var _action$payload2 = action.payload,
        userId = _action$payload2.userId,
        publicKey = _action$payload2.publicKey,
        privateKey = _action$payload2.privateKey,
        remotePublicKey = _action$payload2.remotePublicKey,
        established = _action$payload2.established;
      if (state[userId]) {
        state[userId].publicKey = publicKey || state[userId].publicKey;
        state[userId].privateKey = privateKey || state[userId].privateKey;
        state[userId].remotePublicKey = remotePublicKey || state[userId].remotePublicKey;
        state[userId].established = established || state[userId].established;
      }
    },
    deleteEncryptionKeys: function deleteEncryptionKeys(state, action) {
      var userId = action.payload;
      delete state[userId];
    },
    setEncryption: function setEncryption(state, action) {
      state = action.payload;
      return state;
    }
  }
});
var _encryptionSlice$acti = encryptionSlice.actions,
  addEncryptionKeys = _encryptionSlice$acti.addEncryptionKeys,
  updateEncryptionKeys = _encryptionSlice$acti.updateEncryptionKeys,
  deleteEncryptionKeys = _encryptionSlice$acti.deleteEncryptionKeys,
  setEncryption = _encryptionSlice$acti.setEncryption;

/* harmony default export */ const slices_encryptionSlice = (encryptionSlice.reducer);
// EXTERNAL MODULE: ./src/components/atomic/organism/page-container/PageContainer.js + 1 modules
var page_container_PageContainer = __webpack_require__(20181);
// EXTERNAL MODULE: ./node_modules/@mui/material/Accordion/Accordion.js + 3 modules
var Accordion = __webpack_require__(1710);
// EXTERNAL MODULE: ./node_modules/@mui/material/AccordionDetails/AccordionDetails.js + 1 modules
var AccordionDetails = __webpack_require__(16576);
// EXTERNAL MODULE: ./node_modules/@mui/material/AccordionSummary/AccordionSummary.js + 1 modules
var AccordionSummary = __webpack_require__(48719);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ExpandMore.js
var ExpandMore = __webpack_require__(72048);
// EXTERNAL MODULE: ./node_modules/@mui/material/Checkbox/Checkbox.js + 4 modules
var Checkbox = __webpack_require__(27558);
;// CONCATENATED MODULE: ./src/components/atomic/atom/termsAndConditions/TermsAndConditions-1.0.0.js

var TermsAndConditions = function TermsAndConditions(_ref) {
  var padding = _ref.padding;
  return /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      padding: padding
    }
  }, /*#__PURE__*/index_js_default().createElement("h2", null, "1. Introduction"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Welcome to ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ", a secure and comprehensive web-based peer-to-peer (P2P) communication platform designed to facilitate easy and intuitive connections between users. Our app offers text messaging, multimedia sharing, and voice calling for both one-on-one and group conversations, all without requiring registration or storing user data on any centralized servers. By using ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ", you can communicate with your peers directly, with all data stored locally on your browser's storage."), /*#__PURE__*/index_js_default().createElement("li", null, "Please read these terms and conditions (\"Terms\") carefully before using ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ". By accessing and using our app, you agree to be bound by these Terms. If you do not agree with these Terms, you must not use ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ". These Terms govern your use of the app, and any updates, modifications, or enhancements made to the app in the future. We reserve the right to change or modify these Terms at any time, and your continued use of the app constitutes your acceptance of such changes or modifications."))), /*#__PURE__*/index_js_default().createElement("h2", null, "2. User eligibility"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Age Restriction: Users of the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app must be at least 13 years of age or older. By using the app, you represent and warrant that you are of the required age or older and have the legal capacity to understand and accept these terms and conditions."), /*#__PURE__*/index_js_default().createElement("li", null, "Geographical Availability: The ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app is available for use in countries and regions where WebRTC technology is legally permitted. By using the app, you confirm that you are located in a jurisdiction where the use of such technology is allowed."), /*#__PURE__*/index_js_default().createElement("li", null, "Regulatory Compliance: Users are responsible for ensuring that their use of the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app complies with all applicable laws and regulations in their respective jurisdictions, including but not limited to data protection and privacy laws, telecommunications regulations, and any specific rules governing P2P communication."), /*#__PURE__*/index_js_default().createElement("li", null, "Intended Use: The ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app is designed for personal, non-commercial use only. Any use for business, commercial, or organizational purposes is strictly prohibited."), /*#__PURE__*/index_js_default().createElement("li", null, "Responsible Use: We strive to create a safe and inclusive environment for all users of the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app. Users are expected to treat each other with respect and not engage in any activities that may be harmful or offensive to others. This includes, but is not limited to, harassment, discrimination, racism, sexism, hate speech, threats, or any other behavior that may infringe upon the rights or well-being of others. We encourage all users to report any inappropriate behavior or content to us. However, as a P2P chat app using PeerJS and presented as a web app, we are unable to remove content or ban users."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app, you agree to comply with these eligibility requirements and to use the app in a responsible and respectful manner. Failure to adhere to these terms may result in the suspension or termination of your access to the app."), /*#__PURE__*/index_js_default().createElement("h2", null, "3. Account registration and security:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Display Names: Upon using the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ", users are required to create a display name, which will be visible to other users within the app. Display names must be tasteful and not offensive. We reserve the right to remove or modify any display name that violates these guidelines or infringes on the rights of others."), /*#__PURE__*/index_js_default().createElement("li", null, "Unique Identifiers: The app will generate two unique identifiers for each user: a connection ID and a device/browser ID. Users are responsible for securely managing their connection IDs and sharing them only with trusted individuals."), /*#__PURE__*/index_js_default().createElement("li", null, "Data Storage: All user data is stored locally on the user's browser's storage, which can be accessed via the browser's inspect tools. Users are responsible for the security of their devices, operating systems, and browsers, and for following security best practices to protect their stored data."), /*#__PURE__*/index_js_default().createElement("li", null, "App Stability and Data Backup: The ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " is a work-in-progress, and users should not rely on its stability. Breaking changes may be implemented as we continue to develop and improve the app. Users are responsible for backing up their data and should not expect the app to maintain data integrity during updates or changes."), /*#__PURE__*/index_js_default().createElement("li", null, "Responsible Use: Users are encouraged to exercise caution when sharing sensitive or personal information through the app. Do not disclose personal data to unknown users, and be aware of the risks associated with sharing information with others. By using the", " ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ", you agree to use the app in a responsible and respectful manner, adhering to the guidelines outlined in the \"User Eligibility\" section."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ", you agree to comply with these account registration and security requirements and to use the app in a responsible and respectful manner."), /*#__PURE__*/index_js_default().createElement("h2", null, "4. User conduct and content:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "User Conduct: Users of the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app are expected to conduct themselves in a respectful and responsible manner. By using the app, you agree not to engage in any activities that may be harmful or offensive to others, violate the rights of others, or otherwise interfere with the normal functioning of the app. This includes, but is not limited to:"), /*#__PURE__*/index_js_default().createElement("ul", null, /*#__PURE__*/index_js_default().createElement("li", null, "Harassment, bullying, or intimidation of other users."), /*#__PURE__*/index_js_default().createElement("li", null, "Discrimination or hate speech based on race, ethnicity, religion, gender, sexual orientation, or any other protected characteristic."), /*#__PURE__*/index_js_default().createElement("li", null, "Posting or sharing content that is obscene, pornographic, excessively violent, or otherwise inappropriate for a general audience."), /*#__PURE__*/index_js_default().createElement("li", null, "Engaging in illegal activities or encouraging others to do so."), /*#__PURE__*/index_js_default().createElement("li", null, "Spamming, phishing, or engaging in other disruptive or deceptive practices."), /*#__PURE__*/index_js_default().createElement("li", null, "Distributing viruses, malware, or other harmful software."), /*#__PURE__*/index_js_default().createElement("li", null, "Infringing on the intellectual property rights, privacy rights, or any other rights of others.")), /*#__PURE__*/index_js_default().createElement("li", null, "Content: Users are solely responsible for any content they create, transmit, or share using the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app. By using the app, you represent and warrant that you have the necessary rights and permissions to use and share any content you provide and that your content does not violate any applicable laws or regulations."), /*#__PURE__*/index_js_default().createElement("li", null, "We strive to create a safe and inclusive environment for all users of the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app. However, as a P2P chat app using PeerJS and presented as a web app, we are unable to remove content or ban users. We may still remove content or terminate the access of any user found to be in violation of these terms at our sole discretion. We may also cooperate with law enforcement authorities or comply with legal requests to disclose user information or content when required by law."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app, you acknowledge and agree to these user conduct and content guidelines. Failure to adhere to these guidelines may result in the suspension or termination of your access to the app."), /*#__PURE__*/index_js_default().createElement("h2", null, "5. Intellectual property:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Ownership: The intellectual property rights related to the", " ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ", including but not limited to the app's name, logo, design, source code, and other proprietary elements, are owned by the company (to be established) responsible for the app's development. The app is currently a proof of concept and not associated with any company."), /*#__PURE__*/index_js_default().createElement("li", null, "Respecting Intellectual Property Rights: Users are expected to respect the intellectual property rights of others when using the", " ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ". This includes, but is not limited to, not sharing copyrighted material, trademarks, or other proprietary content without the express permission of the rights holder. Unauthorized use or distribution of protected content may result in the suspension or termination of the user's access to the app and potential legal liability."), /*#__PURE__*/index_js_default().createElement("li", null, "User Content: Users retain ownership of the intellectual property rights in any content they create or share within the app. By using the app and sharing content with peers, users acknowledge that they may be granting other users a non-exclusive license to access, use, reproduce, or modify the shared content."), /*#__PURE__*/index_js_default().createElement("li", null, "Infringement Claims: Currently, there are no formal procedures in place for handling intellectual property infringement claims. However, users are encouraged to be mindful of intellectual property rights when sharing content and to report any suspected infringement to the app's developers for further investigation."), /*#__PURE__*/index_js_default().createElement("li", null, "Performance Monitoring: We reserve the right to introduce tools and technologies for monitoring the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), "'s performance and improving its functionality. By using the app, you acknowledge and agree to this potential monitoring."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ", you acknowledge and agree to these intellectual property guidelines. If you believe that any intellectual property rights have been violated within the app, please report the issue to the app's developers for further investigation."), /*#__PURE__*/index_js_default().createElement("h2", null, "6. Data privacy and security:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Data Storage: The ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " saves user and app data locally on the storage provided by the user's browser. Users are responsible for ensuring the security of their devices and browsers, and for following security best practices to protect their stored data. The company does not collect user data, apart from what is needed for monitoring tools to ensure the app's stability and to make improvements."), /*#__PURE__*/index_js_default().createElement("li", null, "Third-Party Services: The app uses PeerJS for establishing peer connections and the official PeerJS server as the connection broker. We are not affiliated with PeerJS and are not responsible for the management of the PeerJS server. We also use Sentry.io for error monitoring and NLevel Software for analytics. We retain the right to add analytics tools to help manage the stability of the app and make improvements."), /*#__PURE__*/index_js_default().createElement("li", null, "Data Access and User Rights: Users can access their data through the app's user interface or their browser's inspect tools. The app may provide functionality to export data for backup purposes. Users have the right to delete any or all data stored within the app, subject to the limitations of the app's design and the nature of peer-to-peer communication."), /*#__PURE__*/index_js_default().createElement("li", null, "Data Retention: User data is retained for as long as the user and browser allow. Users are responsible for backing up their data and managing the data stored within the app."), /*#__PURE__*/index_js_default().createElement("li", null, "Reporting and Investigations: The app may include functionality to report users, and we reserve the right for this functionality to send necessary details for any investigation."), /*#__PURE__*/index_js_default().createElement("li", null, "Compliance with Laws: Users of the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " are responsible for complying with the laws in their place of residence. The app will be registered in the UK, and users should be aware of and adhere to any applicable privacy laws and regulations. It is the user's responsibility to understand and comply with any specific laws that apply to their use of the app."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ", you acknowledge and agree to these data privacy and security guidelines. If you have any concerns or questions about how your data is used or stored within the app, please contact the app's developers for further information."), /*#__PURE__*/index_js_default().createElement("h2", null, "7. Third-party services and links:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Third-Party Services and Links: The ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " may use third-party services, tools, and libraries, such as PeerJS and its connection broker, to provide and enhance its functionality. We are not affiliated with, nor do we endorse or assume responsibility for, any third-party services, tools, or libraries used within the app. Users acknowledge that these third parties may have their own terms of service, privacy policies, and data handling practices, and that the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " is not responsible for the content, privacy, or security of these third parties. We also use Sentry.io for error monitoring and NLevel Software for analytics."), /*#__PURE__*/index_js_default().createElement("li", null, "In addition, the app may include or provide links to external websites or resources that are not under our control. We do not endorse or assume responsibility for the content, privacy policies, or practices of these external websites or resources. Users access and use these external websites or resources at their own risk."), /*#__PURE__*/index_js_default().createElement("li", null, "We reserve the right to add or remove third-party services, tools, libraries, or links at our discretion. By using the", " ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), ", users acknowledge and agree to the potential risks and limitations associated with third-party services, tools, libraries, and links."))), /*#__PURE__*/index_js_default().createElement("p", null, "If you have any questions or concerns about the third-party services or links used within the app, please contact the app's developers for further information."), /*#__PURE__*/index_js_default().createElement("h2", null, "8. Modification and termination:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Modification: As a proof of concept (POC), the", " ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " is subject to updates and modifications as we deem necessary for improving the app's functionality and performance. Users acknowledge that changes may be made without prior notice and may impact their experience using the app. It is the user's responsibility to regularly review the terms and conditions for any updates or changes."), /*#__PURE__*/index_js_default().createElement("li", null, "Termination by User: Users retain the right to terminate their use of the app at any time. To remove their data, users can utilize the app's data removal functionality or their browser's inspect tools to delete stored data."), /*#__PURE__*/index_js_default().createElement("li", null, "Termination by Company: Due to the P2P nature of the app, we do not have the ability to remove or ban users. However, users acknowledge that the app is a POC in a volatile state and may become unavailable at any time at our discretion."), /*#__PURE__*/index_js_default().createElement("li", null, "Discontinuation: In the event that the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " ", "is discontinued, users are responsible for ensuring the removal of their data from their devices and browsers. We are not responsible for any loss of data or functionality resulting from the discontinuation of the app."))), /*#__PURE__*/index_js_default().createElement("h2", null, "9. Warranty disclaimer and limitation of liability:"), /*#__PURE__*/index_js_default().createElement("p", null, "1. Warranty Disclaimer: The p2p-chat-app is provided \"as is\" and \"with all faults,\" without any warranties or guarantees of any kind, express or implied, including but not limited to warranties of merchantability, fitness for a particular purpose, or non-infringement. Users acknowledge and agree that their use of the app is at their sole risk, and that they are responsible for any damages or losses resulting from such use."), /*#__PURE__*/index_js_default().createElement("p", null, "2. As a proof of concept (POC), the app may have unexpected issues, errors, interruptions, or defects. We do not warrant that the app will be error-free, uninterrupted, or that any defects will be corrected. We make no representations or warranties regarding the app's performance, reliability, accuracy, or suitability for any particular purpose."), /*#__PURE__*/index_js_default().createElement("p", null, "3. Limitation of Liability: To the fullest extent permitted by applicable law, we, our affiliates, and our respective officers, directors, employees, and agents, shall not be liable for any direct, indirect, incidental, consequential, special, punitive, or exemplary damages, including but not limited to damages for loss of profits, goodwill, use, data, or other intangible losses, resulting from the use of or inability to use the app, even if we have been advised of the possibility of such damages."), /*#__PURE__*/index_js_default().createElement("p", null, "Users acknowledge and agree that they are solely responsible for their use of the p2p-chat-app and that we disclaim all liability for any actions, omissions, or consequences arising from or related to their use of the app."), /*#__PURE__*/index_js_default().createElement("h2", null, "10. Indemnification:"), /*#__PURE__*/index_js_default().createElement("p", null, "1. Indemnification: Users agree to indemnify, defend, and hold harmless the app owner, its affiliates, and their respective officers, directors, employees, and agents from and against any and all claims, damages, losses, liabilities, costs, and expenses (including reasonable attorneys' fees) arising from or related to their use of the p2p-chat-app, their violation of these terms and conditions, or their infringement of any intellectual property or other rights of any third party."), /*#__PURE__*/index_js_default().createElement("p", null, "Users shall defend the app owner and its affiliates at their own expense, and the app owner reserves the right, at its own expense, to assume the exclusive defense and control of any matter otherwise subject to indemnification by users. Users agree to cooperate with the app owner in the defense of any claim subject to indemnification."), /*#__PURE__*/index_js_default().createElement("h2", null, "11. Governing law and dispute resolution:"), /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, /*#__PURE__*/index_js_default().createElement("p", null, "Governing Law: These terms and conditions and any disputes arising out of or in connection with the p2p-chat-app or your use thereof shall be governed by and construed in accordance with the laws of the United Kingdom, without regard to its conflict of law principles.")), /*#__PURE__*/index_js_default().createElement("li", null, /*#__PURE__*/index_js_default().createElement("p", null, "Dispute Resolution: In the event of any dispute, controversy, or claim arising out of or relating to these terms and conditions or your use of the p2p-chat-app, the parties shall first attempt to resolve the dispute through good faith negotiations. If the dispute cannot be resolved through negotiations within a reasonable time, either party may submit the dispute to the exclusive jurisdiction of the courts located in the United Kingdom."))), /*#__PURE__*/index_js_default().createElement("h2", null, "12. Changes to terms and conditions:"), /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, /*#__PURE__*/index_js_default().createElement("p", null, "Changes to Terms and Conditions: The app owner reserves the right, in its sole discretion, to modify or update these terms and conditions at any time without prior notice. As the p2p-chat-app is currently a proof of concept and in active development, users will not be notified of changes to the terms and conditions. Users are advised to periodically review the terms and conditions for any updates or modifications."), /*#__PURE__*/index_js_default().createElement("p", null, "Upon any update to the terms and conditions, the app may be temporarily locked, and users will be required to agree to the updated terms and conditions before regaining access to the app. By continuing to use the app after any modifications to the terms and conditions, users indicate their acceptance of such changes."))), /*#__PURE__*/index_js_default().createElement("h2", null, "13. Contact information:"), /*#__PURE__*/index_js_default().createElement("p", null, "1. Contact Information: The p2p-chat-app is currently a proof of concept and not associated with an established company or organization. If you have any questions, concerns, or issues related to these terms and conditions or the app, please contact our team via our", " ", /*#__PURE__*/index_js_default().createElement("a", {
    href: "https://www.reddit.com/r/positive_intentions/"
  }, "Reddit"), " user profile. We will make every effort to respond to your inquiries in a timely manner."));
};
/* harmony default export */ const TermsAndConditions_1_0_0 = (TermsAndConditions);
;// CONCATENATED MODULE: ./src/components/atomic/atom/termsAndConditions/TermsAndConditions-2.0.0.js

var TermsAndConditions_2_0_0_TermsAndConditions = function TermsAndConditions(_ref) {
  var padding = _ref.padding;
  return /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      padding: padding
    }
  }, /*#__PURE__*/index_js_default().createElement("h2", null, "1. Introduction"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Welcome to positive-intentions , a secure and comprehensive web-based peer-to-peer (P2P) communication platform designed to facilitate easy and intuitive connections between users. Our app offers text messaging, multimedia sharing, and voice calling for both one-on-one and group conversations, all without requiring registration or storing user data on any centralized servers of any party. By using positive-intentions, you can communicate with your peers directly, with all data stored locally on your browser's storage."), /*#__PURE__*/index_js_default().createElement("li", null, "Please read and accept these terms and conditions (\"Terms\") carefully before using positive-intentions. By accessing and using our app, you agree to be bound by these Terms. If you do not agree with these Terms, you cannot use positive-intentions. These Terms govern your use of the app, and any updates, modifications, or enhancements made to the app in the future. We reserve the right to change or modify these Terms at any time, and your continued use of the app constitutes your acceptance of such changes or modifications."))), /*#__PURE__*/index_js_default().createElement("h2", null, "2. User eligibility"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Age Restriction: Users of the positive-intentions app must be at least 13 years of age or older. By using the app, you represent and warrant that you are of the required age or older and have the legal capacity to understand and accept these Terms."), /*#__PURE__*/index_js_default().createElement("li", null, "Geographical Availability: The positive-intentions app is available for use in countries and regions where WebRTC technology is legally permitted. By using the app, you confirm that you are located in a jurisdiction where the use of such technology is allowed."), /*#__PURE__*/index_js_default().createElement("li", null, "Regulatory Compliance: Users are responsible for ensuring that their use of the positive-intentions app complies with all applicable laws and regulations in their respective jurisdictions, including but not limited to data protection and privacy laws, telecommunications regulations, and any specific rules governing P2P communication."), /*#__PURE__*/index_js_default().createElement("li", null, "Intended Use: The positive-intentions app is designed for personal, non-commercial use. We strive to create a safe and inclusive environment for all users of the positive-intentions app. Users are expected to treat each other with respect and not engage in any activities that may be harmful or offensive to others. This includes, but is not limited to, harassment, discrimination, racism, sexism, hate speech, threats, or any other behaviour that may infringe upon the rights or well-being of others. However, as a P2P chat app using PeerJS and presented as a web app, we are unable to remove content from users or ban users."), /*#__PURE__*/index_js_default().createElement("li", null, "Responsible Use: We strive to create a safe and inclusive environment for all users of the ", /*#__PURE__*/index_js_default().createElement("em", null, "positive-intentions"), " app. Users are expected to treat each other with respect and not engage in any activities that may be harmful or offensive to others. This includes, but is not limited to, harassment, discrimination, racism, sexism, hate speech, threats, or any other behavior that may infringe upon the rights or well-being of others. We encourage all users to report any inappropriate behavior or content to us. However, as a P2P chat app using PeerJS and presented as a web app, we are unable to remove content or ban users."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the positive-intentions app, you agree to comply with these eligibility requirements and to use the app in a responsible and respectful manner."), /*#__PURE__*/index_js_default().createElement("h2", null, "3. Account registration and security:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Display Names: Upon using the positive-intentions, users get an auto-generated display name. Users can edit a display name, which will be visible to other users within the app. Display names should be tasteful and not offensive."), /*#__PURE__*/index_js_default().createElement("li", null, "Unique Identifiers: The app will generate two unique identifiers for each user: a connection ID and a device/browser ID. Users are responsible for securely managing their connection IDs and sharing them only with trusted individuals."), /*#__PURE__*/index_js_default().createElement("li", null, "Data Storage: All user data is stored locally on the user's browser's storage, which can be accessed via the browser's inspect tools. Users are responsible for the security of their devices, operating systems, and browsers, and for following security best practices to protect their stored data."), /*#__PURE__*/index_js_default().createElement("li", null, "App Stability and Data Backup: The positive-intentions is a work-in-progress, and users should not rely on its stability. Breaking changes may be implemented as we continue to develop and improve the app. Users are responsible for backing up their data and should not expect the app to maintain data integrity during updates or changes."), /*#__PURE__*/index_js_default().createElement("li", null, "Responsible Use: Users are encouraged to exercise caution when sharing sensitive or personal information through the app. Do not disclose personal data to unknown users, and be aware of the risks associated with sharing information with others. By using the positive-intentions, you agree to use the app in a responsible and respectful manner, adhering to the guidelines outlined in the \"User Eligibility\" section."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the app, you agree to comply with these account registration and security requirements and to use the app in a responsible and respectful manner."), /*#__PURE__*/index_js_default().createElement("h2", null, "4. User conduct and content:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "User Conduct: Users of the app are expected to conduct themselves in a respectful and responsible manner. By using the app, you agree not to engage in any activities that may be harmful or offensive to others, violate the rights of others, or otherwise interfere with the normal functioning of the app. This includes, but is not limited to:"), /*#__PURE__*/index_js_default().createElement("ul", null, /*#__PURE__*/index_js_default().createElement("li", null, "Harassment, bullying, or intimidation of other users."), /*#__PURE__*/index_js_default().createElement("li", null, "Discrimination or hate speech based on race, ethnicity, religion, gender, sexual orientation, or any other protected characteristic."), /*#__PURE__*/index_js_default().createElement("li", null, "Posting or sharing content that is obscene, pornographic, excessively violent, or otherwise inappropriate for a general audience."), /*#__PURE__*/index_js_default().createElement("li", null, "Engaging in illegal activities or encouraging others to do so."), /*#__PURE__*/index_js_default().createElement("li", null, "Spamming, phishing, or engaging in other disruptive or deceptive practices."), /*#__PURE__*/index_js_default().createElement("li", null, "Distributing viruses, malware, or other harmful software."), /*#__PURE__*/index_js_default().createElement("li", null, "Infringing on the intellectual property rights, privacy rights, or any other rights of others."), /*#__PURE__*/index_js_default().createElement("li", null, "Using the app may not be against the penal code.")), /*#__PURE__*/index_js_default().createElement("li", null, "Content: Users are solely responsible for any content they create, transmit, or share using the positive-intentions app. By using the app, you represent and warrant that you have the necessary rights and permissions to use and share any content you provide and that your content does not violate any applicable laws or regulations."), /*#__PURE__*/index_js_default().createElement("li", null, "We strive to create a safe and inclusive environment for all users of the positive-intentions app. However, as a P2P chat app using PeerJS and presented as a web app, we are unable to remove content or ban users."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the app, you acknowledge and agree to these user conduct and content guidelines."), /*#__PURE__*/index_js_default().createElement("h2", null, "5. Intellectual property:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Ownership: The intellectual property rights related to the positive-intentions, including but not limited to the app's name, logo, design, source code, and other proprietary elements, are owned by the company responsible for the app's development. The app is currently a proof of concept and not associated with any company."), /*#__PURE__*/index_js_default().createElement("li", null, "Respecting Intellectual Property Rights: Users are expected to respect the intellectual property rights of others when using the app. This includes, but is not limited to, not sharing copyrighted material, trademarks, or other proprietary content without the express permission of the rights holder. Unauthorized use or distribution of protected content may potentially result in legal liability."), /*#__PURE__*/index_js_default().createElement("li", null, "User Content: Users retain ownership of the intellectual property rights in any content they create or share within the app. By using the app and sharing content with peers, users acknowledge that they may be granting other users a non-exclusive license to access, use, reproduce, or modify the shared content."), /*#__PURE__*/index_js_default().createElement("li", null, "Infringement Claims: Currently, there are no formal procedures in place for handling intellectual property infringement claims. However, users are encouraged to be mindful of intellectual property rights when sharing content and to report any suspected infringement to the app's developers for further investigation."), /*#__PURE__*/index_js_default().createElement("li", null, "Performance Monitoring: We reserve the right to introduce tools and technologies for monitoring the performance of the app and improving its functionality. By using the app, you acknowledge and agree to this potential monitoring."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the positive-intentions, you acknowledge and agree to these intellectual property guidelines. If you believe that any intellectual property rights have been violated within the app, please report the issue to the app's developers for further investigation."), /*#__PURE__*/index_js_default().createElement("h2", null, "6. Data privacy and security:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Data Storage: The app saves user and app data locally on the storage provided by the user's browser. Users are responsible for ensuring the security of their devices and browsers, and for following security best practices to protect their stored data. The company does not collect user data, apart from what is needed for monitoring tools to ensure the app's stability and to make improvements."), /*#__PURE__*/index_js_default().createElement("li", null, "Third-Party Services: The app uses PeerJS for establishing peer connections and the official PeerJS server as the connection broker. We are not affiliated with PeerJS and are not responsible for the management of the PeerJS server. We may also use Sentry.io for error monitoring and NLevel Software for analytics. We retain the right to add analytics tools to help manage the stability of the app and make improvements."), /*#__PURE__*/index_js_default().createElement("li", null, "Data Access and User Rights: Users can access their data through the app's user interface or their browser's inspect tools. The app may provide functionality to export data for backup purposes. Users have the right to delete any or all data stored within the app, subject to the limitations of the app's design and the nature of peer-to-peer communication."), /*#__PURE__*/index_js_default().createElement("li", null, "Data Retention: User data is retained for as long as the user and browser allow. Users are responsible for backing up their data and managing the data stored within the app."), /*#__PURE__*/index_js_default().createElement("li", null, "Reporting and Investigations: The app may include functionality to report users, and we reserve the right for this functionality to send necessary details for any investigation."), /*#__PURE__*/index_js_default().createElement("li", null, "Compliance with Laws: Users of the positive-intentions are responsible for complying with the laws in their place of residence. Users should be aware of and adhere to any applicable privacy laws and regulations. It is the user's responsibility to understand and comply with any specific laws that apply to their use of the app."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the app, you acknowledge and agree to these data privacy and security guidelines. If you have any concerns or questions about how your data is used or stored within the app, please contact the app's developers for further information."), /*#__PURE__*/index_js_default().createElement("h2", null, "7. Third-party services and links:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Third-Party Services and Links: The positive-intentions may use third-party services, tools, and libraries, such as PeerJS and its connection broker, to provide and enhance its functionality. We are not affiliated with, nor do we endorse or assume responsibility for, any third-party services, tools, or libraries used within the app. Users acknowledge that these third parties may have their own terms of service, privacy policies, and data handling practices, and that the positive-intentions is not responsible for the content, privacy, or security of these third parties. We also use Sentry.io for error monitoring and NLevel Software for analytics."), /*#__PURE__*/index_js_default().createElement("li", null, "In addition, the app may include or provide links to external websites or resources that are not under our control. We do not endorse or assume responsibility for the content, privacy policies, or practices of these external websites or resources. Users access and use these external websites or resources at their own risk."), /*#__PURE__*/index_js_default().createElement("li", null, "We reserve the right to add or remove third-party services, tools, libraries, or links at our discretion. By using the app, users acknowledge and agree to the potential risks and limitations associated with third-party services, tools, libraries, and links."))), /*#__PURE__*/index_js_default().createElement("p", null, "If you have any questions or concerns about the third-party services or links used within the app, please contact the app's developers for further information."), /*#__PURE__*/index_js_default().createElement("h2", null, "8. Modification and termination:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Modification: As a proof of concept (POC), the app is subject to updates and modifications as we deem necessary for improving the app's functionality and performance. Users acknowledge that changes may be made without prior notice and may impact their experience using the app. It is the user's responsibility to regularly review the terms and conditions for any updates or changes."), /*#__PURE__*/index_js_default().createElement("li", null, "Termination by User: Users retain the right to terminate their use of the app at any time. To remove their data, users can utilize the app's data removal functionality or their browser's inspect tools to delete stored data."), /*#__PURE__*/index_js_default().createElement("li", null, "Termination by Company: Due to the P2P nature of the app, we do not have the ability to remove or ban users. However, users acknowledge that the app is a POC in a volatile state and may become unavailable at any time at our discretion."), /*#__PURE__*/index_js_default().createElement("li", null, "Discontinuation: In the event that the app is discontinued, users are responsible for ensuring the removal of their data from their devices and browsers. We are not responsible for any loss of data or functionality resulting from the discontinuation of the app."))), /*#__PURE__*/index_js_default().createElement("h2", null, "9. Warranty disclaimer and limitation of liability:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Warranty Disclaimer: The app is provided \"as is\" and \"with all faults\", without any warranties or guarantees of any kind, express or implied, including but not limited to warranties of merchantability, fitness for a particular purpose, or non-infringement. Users acknowledge and agree that their use of the app is at their sole risk, and that they are responsible for any damages or losses resulting from such use."), /*#__PURE__*/index_js_default().createElement("li", null, "As a proof of concept (POC), the app may have unexpected issues, errors, interruptions, or defects. We do not warrant that the app will be error-free, uninterrupted, or that any defects will be corrected. We make no representations or warranties regarding the app's performance, reliability, accuracy, or suitability for any particular purpose."), /*#__PURE__*/index_js_default().createElement("li", null, "Limitation of Liability: To the fullest extent permitted by applicable law, we, our affiliates, and our respective officers, directors, employees, and agents, shall not be liable for any direct, indirect, incidental, consequential, special, punitive, or exemplary damages, including but not limited to damages for loss of profits, goodwill, use, data, or other intangible losses, resulting from the use of or inability to use the app, even if we have been advised of the possibility of such damages."))), /*#__PURE__*/index_js_default().createElement("p", null, "Users acknowledge and agree that they are solely responsible for their use of the app and that we disclaim all liability for any actions, omissions, or consequences arising from or related to their use of the app."), /*#__PURE__*/index_js_default().createElement("h2", null, "10. Indemnification:"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Indemnification: Users agree to indemnify, defend, and hold harmless the app owner, its affiliates, and their respective officers, directors, employees, and agents from and against any and all claims, damages, losses, liabilities, costs, and expenses (including reasonable attorneys' fees) arising from or related to their use of the app, their violation of these terms and conditions, or their infringement of any intellectual property or other rights of any third party."))), /*#__PURE__*/index_js_default().createElement("p", null, "Users shall defend the app owner and its affiliates at their own expense, and the app owner reserves the right, at its own expense, to assume the exclusive defense and control of any matter otherwise subject to indemnification by users. Users agree to cooperate with the app owner in the defense of any claim subject to indemnification."), /*#__PURE__*/index_js_default().createElement("h2", null, "11. Governing law and dispute resolution:"), /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, /*#__PURE__*/index_js_default().createElement("p", null, "Governing Law: These terms and conditions and any disputes arising out of or in connection with the app or your use thereof shall be governed by and construed in accordance with the users local laws, without regard to its conflict of law principles.")), /*#__PURE__*/index_js_default().createElement("li", null, /*#__PURE__*/index_js_default().createElement("p", null, "Dispute Resolution: In the event of any dispute, controversy, or claim arising out of or relating to these terms and conditions or your use of the app, the parties shall first attempt to resolve the dispute through good faith negotiations. If the dispute cannot be resolved through negotiations within a reasonable time, either party may submit the dispute to the local judicial system of the user."))), /*#__PURE__*/index_js_default().createElement("h2", null, "12. Changes to terms and conditions:"), /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, /*#__PURE__*/index_js_default().createElement("p", null, "Changes to Terms and Conditions: The app owner reserves the right, in its sole discretion, to modify or update these terms and conditions at any time without prior notice. As the app is currently a proof of concept and in active development, users may not be notified of changes to the terms and conditions. Users are advised to periodically review the terms and conditions for any updates or modifications."), /*#__PURE__*/index_js_default().createElement("p", null, "Upon any update to the terms and conditions, the app may be temporarily locked, and users will be required to agree to the updated terms and conditions before regaining access to the app. By continuing to use the app after any modifications to the terms and conditions, users indicate their acceptance of such changes."))), /*#__PURE__*/index_js_default().createElement("h2", null, "13. Contact information:"), /*#__PURE__*/index_js_default().createElement("p", null, "Contact Information: The app is currently a proof of concept and not associated with an established company or organization. If you have any questions, concerns, or issues related to these terms and conditions or the app, you may be able to contact our team via our", " ", /*#__PURE__*/index_js_default().createElement("a", {
    href: "https://www.reddit.com/r/positive_intentions/"
  }, "Reddit"), " user profile. We will make an effort to respond to your inquiries in a timely manner."));
};
var PrivacyPolicy = function PrivacyPolicy(_ref2) {
  var padding = _ref2.padding;
  return /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      padding: padding
    }
  }, /*#__PURE__*/index_js_default().createElement("h2", null, "Privacy Policy"), /*#__PURE__*/index_js_default().createElement("p", null, /*#__PURE__*/index_js_default().createElement("ol", null, /*#__PURE__*/index_js_default().createElement("li", null, "Data Storage: The app saves user and app data locally on the storage provided by the user's browser. Users are responsible for ensuring the security of their devices and browsers, and for following security best practices to protect their stored data. The company does not collect user data, apart from what is needed for monitoring tools to ensure the app's stability and to make improvements."), /*#__PURE__*/index_js_default().createElement("li", null, "Third-Party Services: The app uses PeerJS for establishing peer connections and the official PeerJS server as the connection broker. We are not affiliated with PeerJS and are not responsible for the management of the PeerJS server. We may also use Sentry.io for error monitoring and NLevel Software for analytics. We retain the right to add analytics tools to help manage the stability of the app and make improvements. The app uses data from openstreetmap.org for the map."), /*#__PURE__*/index_js_default().createElement("li", null, "Data Access and User Rights: Users can access their data through the app's user interface or their browser's inspect tools. The app may provide functionality to export data for backup purposes. Users have the right to delete any or all data stored within the app, subject to the limitations of the app's design and the nature of peer-to-peer communication."), /*#__PURE__*/index_js_default().createElement("li", null, "Data Retention: User data is retained for as long as the user and browser allow. Users are responsible for backing up their data and managing the data stored within the app."), /*#__PURE__*/index_js_default().createElement("li", null, "Reporting and Investigations: The app may include functionality to report users, and we reserve the right for this functionality to send necessary details for any investigation."), /*#__PURE__*/index_js_default().createElement("li", null, "Compliance with Laws: Users of the positive-intentions are responsible for complying with the laws in their place of residence. Users should be aware of and adhere to any applicable privacy laws and regulations. It is the user's responsibility to understand and comply with any specific laws that apply to their use of the app."))), /*#__PURE__*/index_js_default().createElement("p", null, "By using the app, you acknowledge and agree to these data privacy and security guidelines. If you have any concerns or questions about how your data is used or stored within the app, please contact the app's developers for further information."));
};
/* harmony default export */ const TermsAndConditions_2_0_0 = (TermsAndConditions_2_0_0_TermsAndConditions);
;// CONCATENATED MODULE: ./src/components/atomic/atom/termsAndConditions/index.js


/* harmony default export */ const termsAndConditions = ([{
  version: "1.0.0",
  terms: TermsAndConditions_1_0_0
}, {
  version: "2.0.0",
  terms: TermsAndConditions_2_0_0,
  privacyPolicy: PrivacyPolicy
}]);
// EXTERNAL MODULE: ./node_modules/@mui/material/InputAdornment/InputAdornment.js + 1 modules
var InputAdornment = __webpack_require__(25239);
// EXTERNAL MODULE: ./node_modules/@mui/material/IconButton/IconButton.js + 1 modules
var IconButton = __webpack_require__(11641);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Refresh.js
var Refresh = __webpack_require__(42702);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ContentCopy.js
var ContentCopy = __webpack_require__(70177);
// EXTERNAL MODULE: ./node_modules/@mui/material/FormControl/FormControl.js + 1 modules
var FormControl = __webpack_require__(50779);
// EXTERNAL MODULE: ./node_modules/@mui/material/InputLabel/InputLabel.js + 3 modules
var InputLabel = __webpack_require__(54433);
// EXTERNAL MODULE: ./node_modules/@mui/material/Select/Select.js + 5 modules
var Select = __webpack_require__(65460);
// EXTERNAL MODULE: ./node_modules/@mui/material/MenuItem/MenuItem.js + 1 modules
var MenuItem = __webpack_require__(73896);
// EXTERNAL MODULE: ./src/components/notifications/notificationManager.js
var notificationManager = __webpack_require__(34541);
// EXTERNAL MODULE: ./node_modules/@mui/material/Switch/Switch.js + 1 modules
var Switch = __webpack_require__(1405);
// EXTERNAL MODULE: ./node_modules/@mui/material/FormGroup/FormGroup.js + 1 modules
var FormGroup = __webpack_require__(65724);
// EXTERNAL MODULE: ./node_modules/@mui/material/FormControlLabel/FormControlLabel.js + 3 modules
var FormControlLabel = __webpack_require__(17414);
// EXTERNAL MODULE: ./src/components/blockchain/Blockchain.js + 1 modules
var Blockchain = __webpack_require__(34431);
// EXTERNAL MODULE: ./src/components/blockchain/chains/profileChain.js
var profileChain = __webpack_require__(85026);
// EXTERNAL MODULE: ./node_modules/@mui/material/Paper/Paper.js + 2 modules
var Paper = __webpack_require__(60538);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Clear.js
var Clear = __webpack_require__(12092);
;// CONCATENATED MODULE: ./src/components/atomic/atom/signatureCanvas/SignatureCanvas.js
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }





var useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    canvasContainer: {
      display: "flex",
      flexDirection: "column",
      position: "relative",
      // Add this to position the delete icon
      padding: theme.spacing(2),
      backgroundColor: theme.palette.background.paper,
      borderRadius: theme.shape.borderRadius,
      height: 200
    },
    canvas: {
      width: "100%"
    },
    deleteIcon: {
      position: "absolute",
      top: "10px",
      // Adjust top and right for positioning
      right: "10px",
      cursor: "pointer"
    }
  };
});
var SignatureCanvas = function SignatureCanvas(_ref) {
  var heading = _ref.heading,
    onChange = _ref.onChange,
    defaultValue = _ref.defaultValue;
  var canvasContainerRef = (0,index_js_.useRef)(null);
  var canvasRef = (0,index_js_.useRef)(null);
  var _useState = (0,index_js_.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    isDrawing = _useState2[0],
    setIsDrawing = _useState2[1];
  var _useState3 = (0,index_js_.useState)(null),
    _useState4 = _slicedToArray(_useState3, 2),
    context = _useState4[0],
    setContext = _useState4[1];
  var _useState5 = (0,index_js_.useState)(false),
    _useState6 = _slicedToArray(_useState5, 2),
    hasContent = _useState6[0],
    setHasContent = _useState6[1];
  var theme = (0,useTheme/* default */.A)();
  var classes = useStyles();
  (0,index_js_.useEffect)(function () {
    // Set the canvas size based on its container's dimensions
    var canvasContainer = canvasContainerRef.current;
    canvasRef.current.width = canvasContainer.clientWidth;
    canvasRef.current.height = canvasContainer.clientHeight;

    // Get the canvas context after setting its size
    var canvas = canvasRef.current;
    var ctx = canvas.getContext("2d");
    setContext(ctx);

    // Set pen color based on the theme
    ctx.strokeStyle = theme.palette.mode === "dark" ? "#90caf9" : "#1565c0";
    ctx.fillStyle = theme.palette.mode === "dark" ? "#90caf9" : "#1565c0";

    // Ensure that the correct stroke and fill colors are used
    ctx.lineWidth = 2; // Adjust the line width as needed

    // Clear the canvas before applying the color
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Load the initial value if provided
    if (defaultValue) {
      var img = new Image();
      img.src = defaultValue;
      img.onload = function () {
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        setHasContent(true);
      };
    }
  }, [theme, defaultValue]);
  (0,index_js_.useEffect)(function () {
    // Prevent scrolling on touch devices while drawing
    var preventScroll = function preventScroll(e) {
      if (isDrawing) {
        e.preventDefault();
      }
    };
    window.addEventListener("touchmove", preventScroll, {
      passive: false
    });
    return function () {
      window.removeEventListener("touchmove", preventScroll);
    };
  }, [isDrawing]);
  var startDrawing = function startDrawing(e) {
    var _getRelativeCoordinat = getRelativeCoordinates(e),
      offsetX = _getRelativeCoordinat.offsetX,
      offsetY = _getRelativeCoordinat.offsetY;
    context.beginPath();
    context.moveTo(offsetX, offsetY);
    setIsDrawing(true);
    // Prevent scrolling on touch devices
    e.preventDefault();
  };
  var draw = function draw(e) {
    if (!isDrawing) return;
    var _getRelativeCoordinat2 = getRelativeCoordinates(e),
      offsetX = _getRelativeCoordinat2.offsetX,
      offsetY = _getRelativeCoordinat2.offsetY;
    context.lineTo(offsetX, offsetY);
    context.stroke();
    // Prevent scrolling on touch devices
    e.preventDefault();
  };
  var stopDrawing = function stopDrawing() {
    context.closePath();
    setIsDrawing(false);

    // Convert canvas content to base64 and call the onChange function
    var canvas = canvasRef.current;
    var canvasDataUrl = canvas.toDataURL("image/png"); // Change format as needed

    // Call the onChange function with the canvas data URL
    onChange(canvasDataUrl);
  };
  var clearCanvas = function clearCanvas() {
    var canvas = canvasRef.current;
    var ctx = canvas.getContext("2d");
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    setHasContent(false);
  };
  var getRelativeCoordinates = function getRelativeCoordinates(e) {
    var canvas = canvasRef.current;
    var rect = canvas.getBoundingClientRect();
    var offsetX, offsetY;
    if (e.type === "touchstart" || e.type === "touchmove") {
      var touch = e.touches[0];
      offsetX = touch.clientX - rect.left;
      offsetY = touch.clientY - rect.top;
    } else {
      offsetX = e.clientX - rect.left;
      offsetY = e.clientY - rect.top;
    }
    return {
      offsetX: offsetX,
      offsetY: offsetY
    };
  };
  return /*#__PURE__*/index_js_default().createElement(Paper/* default */.A, {
    className: classes.canvasContainer,
    ref: canvasContainerRef
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0,
      color: theme.palette.mode === "dark" ? "#fff" : "#000"
    }
  }, heading), /*#__PURE__*/index_js_default().createElement(Clear/* default */.A, {
    className: classes.deleteIcon,
    onClick: clearCanvas
  }), /*#__PURE__*/index_js_default().createElement("canvas", {
    ref: canvasRef,
    className: classes.canvas,
    onMouseDown: startDrawing,
    onMouseMove: draw,
    onMouseUp: stopDrawing,
    onTouchStart: startDrawing,
    onTouchMove: draw,
    onTouchEnd: stopDrawing
  }));
};
/* harmony default export */ const signatureCanvas_SignatureCanvas = (SignatureCanvas);
// EXTERNAL MODULE: ./node_modules/react-slick/lib/index.js
var lib = __webpack_require__(4589);
// EXTERNAL MODULE: ./node_modules/slick-carousel/slick/slick.css
var slick = __webpack_require__(87054);
// EXTERNAL MODULE: ./node_modules/slick-carousel/slick/slick-theme.css
var slick_theme = __webpack_require__(73801);
// EXTERNAL MODULE: ./node_modules/jszip/dist/jszip.min.js
var jszip_min = __webpack_require__(71710);
var jszip_min_default = /*#__PURE__*/__webpack_require__.n(jszip_min);
// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/index.js + 15 modules
var es = __webpack_require__(32389);
// EXTERNAL MODULE: remote cryptography/Cryptography
var Cryptography = __webpack_require__(79218);
// EXTERNAL MODULE: ./node_modules/react-coach-mark/dist/index.js + 6 modules
var react_coach_mark_dist = __webpack_require__(96953);
// EXTERNAL MODULE: ./node_modules/react-qr-code/lib/index.js
var react_qr_code_lib = __webpack_require__(194);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ConnectWithoutContact.js
var ConnectWithoutContact = __webpack_require__(50027);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/QrCode2.js
var QrCode2 = __webpack_require__(3445);
// EXTERNAL MODULE: ./node_modules/react-qr-scanner/dist/react-qr-scanner.umd.js
var react_qr_scanner_umd = __webpack_require__(22992);
var react_qr_scanner_umd_default = /*#__PURE__*/__webpack_require__.n(react_qr_scanner_umd);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/SkipNext.js
var SkipNext = __webpack_require__(34967);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/SkipPrevious.js
var SkipPrevious = __webpack_require__(92367);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/PlayArrow.js
var PlayArrow = __webpack_require__(8586);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Pause.js
var Pause = __webpack_require__(96327);
// EXTERNAL MODULE: ./node_modules/@mui/material/Slider/Slider.js + 6 modules
var Slider = __webpack_require__(66);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Download.js
var Download = __webpack_require__(10609);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Upload.js
var Upload = __webpack_require__(69104);
;// CONCATENATED MODULE: ./src/components/atomic/atom/qrInput/QRInput.js
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || QRInput_unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return QRInput_arrayLikeToArray(arr); }
function QRInput_slicedToArray(arr, i) { return QRInput_arrayWithHoles(arr) || QRInput_iterableToArrayLimit(arr, i) || QRInput_unsupportedIterableToArray(arr, i) || QRInput_nonIterableRest(); }
function QRInput_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function QRInput_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return QRInput_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QRInput_arrayLikeToArray(o, minLen); }
function QRInput_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function QRInput_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function QRInput_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }





















var QRInput_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    qrcodeReader: {
      display: 'block',
      // height: '100vh',
      width: "100%",
      // top: 0,
      // left: 0,
      // position: 'absolute',
      zIndex: 10000
    }
  };
});
/* harmony default export */ const QRInput = (function (_ref) {
  var controlledValue = _ref.value,
    defaultValue = _ref.defaultValue,
    qr = _ref.qr,
    scan = _ref.scan,
    back = _ref.back,
    next = _ref.next,
    onScan = _ref.onScan;
  var classes = QRInput_useStyles();
  var _useState = (0,index_js_.useState)(qr),
    _useState2 = QRInput_slicedToArray(_useState, 2),
    isQRMode = _useState2[0],
    setIsQRMode = _useState2[1];
  var _useState3 = (0,index_js_.useState)(scan),
    _useState4 = QRInput_slicedToArray(_useState3, 2),
    scanning = _useState4[0],
    setScanning = _useState4[1];
  var _useState5 = (0,index_js_.useState)([]),
    _useState6 = QRInput_slicedToArray(_useState5, 2),
    fileParts = _useState6[0],
    setFileParts = _useState6[1];
  var _useState7 = (0,index_js_.useState)(0),
    _useState8 = QRInput_slicedToArray(_useState7, 2),
    selectedPart = _useState8[0],
    setSelectedPart = _useState8[1];
  var _useState9 = (0,index_js_.useState)(100),
    _useState10 = QRInput_slicedToArray(_useState9, 2),
    partDensity = _useState10[0],
    setPartDensity = _useState10[1];
  var _useState11 = (0,index_js_.useState)(false),
    _useState12 = QRInput_slicedToArray(_useState11, 2),
    isPlaying = _useState12[0],
    setIsPlaying = _useState12[1];
  var _useState13 = (0,index_js_.useState)(controlledValue || defaultValue || ""),
    _useState14 = QRInput_slicedToArray(_useState13, 2),
    value = _useState14[0],
    setValue = _useState14[1];
  (0,index_js_.useEffect)(function () {
    if (controlledValue) setValue(controlledValue);
  }, [controlledValue]);
  (0,index_js_.useEffect)(function () {
    var partSize = partDensity;
    var numberOfParts = Math.ceil(value.length / partSize);
    var parts = [];
    for (var i = 0; i < value.length; i += partSize) {
      var part = value.substr(i, partSize);
      var partNumber = Math.ceil(i / partSize);
      var partData = {
        part: partNumber + 1,
        total: numberOfParts,
        data: part
      };
      parts.push(partData);
    }
    setFileParts(parts);
  }, [value]);
  var handleScan = function handleScan(data) {
    var scannedData = JSON.parse(data);
    var hasPartBeenScanned = fileParts.some(function (part) {
      return (part === null || part === void 0 ? void 0 : part.part) === (scannedData === null || scannedData === void 0 ? void 0 : scannedData.part);
    });
    if (hasPartBeenScanned) return;
    var newFileParts = [].concat(_toConsumableArray(fileParts), [scannedData]);
    console.log("newFileParts", newFileParts.length);
    setFileParts(newFileParts);
  };
  (0,index_js_.useEffect)(function () {
    var _fileParts$;
    var areAllPartsScanned = fileParts.length === ((_fileParts$ = fileParts[0]) === null || _fileParts$ === void 0 ? void 0 : _fileParts$.total);
    if (areAllPartsScanned && scanning) {
      var content = fileParts.reduce(function (acc, part) {
        return acc + part.data;
      }, "");
      setValue(content);
      if (onScan) onScan(content);
      if (!scan) setScanning(false);
      setFileParts([]);
    }
  }, [fileParts]);
  var handleError = function handleError(err) {
    console.error(err);
  };
  (0,index_js_.useEffect)(function () {
    setTimeout(function () {
      if (isPlaying) {
        setSelectedPart(selectedPart + 1);
      }
    }, 1000);
  }, [isPlaying, selectedPart]);
  var handleCopyToClipboard = function handleCopyToClipboard() {
    navigator.clipboard.writeText(value);
  };
  console.log({
    value: value
  });
  return /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, ( true) && /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    expanded: isQRMode || scanning
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    label: "WebRTC offer",
    name: "webRTC",
    value: scanning ? 'Scanning...' : value,
    onChange: function onChange(e) {
      return !scanning && setValue(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, !!value && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: console.log,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: console.log,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: function onClick() {
          return handleCopyToClipboard();
        },
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(ContentCopy/* default */.A, null)))), !qr && !scan && /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: function onClick() {
          setIsQRMode(!isQRMode);
          if (isQRMode) {
            setScanning(false);
          }
        },
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(QrCode2/* default */.A, null))))
    }
  })), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, !scanning && fileParts.length > 0 && /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      background: "white",
      padding: 20
    }
  }, /*#__PURE__*/index_js_default().createElement(react_qr_code_lib/* default */.Ay, {
    size: 256,
    style: {
      height: "auto",
      maxWidth: "100%",
      width: "100%"
    },
    value: JSON.stringify(fileParts === null || fileParts === void 0 ? void 0 : fileParts[selectedPart]) || "",
    viewBox: "0 0 256 256"
  })), scanning && /*#__PURE__*/index_js_default().createElement((react_qr_scanner_umd_default()), {
    id: "qrcode-reader-".concat(fileParts === null || fileParts === void 0 ? void 0 : fileParts.length),
    key: "qrcode-reader-".concat(fileParts === null || fileParts === void 0 ? void 0 : fileParts.length),
    className: classes.qrcodeReader,
    onError: handleError,
    onScan: function onScan(data) {
      data && handleScan(data.text);
    },
    constraints: {
      video: {
        facingMode: "environment"
      }
    }
  }), !qr && !scan && /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: function onClick() {
      setFileParts([]);
      setScanning(!scanning);
    },
    color: scanning ? "error" : "primary"
  }, scanning ? "Stop Scanning" : "Scan QR"), !!back && /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: function onClick() {
      back();
    },
    color: scanning ? "error" : "primary"
  }, "cancel"), !scanning && fileParts.length > 1 && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    gutterBottom: true
  }, "Seek Part"), /*#__PURE__*/index_js_default().createElement(Slider/* default */.Ay, {
    "aria-label": "select part",
    defaultValue: 0,
    step: 1,
    marks: true,
    min: 0,
    max: fileParts.length - 1,
    value: selectedPart,
    valueLabelDisplay: "auto",
    onChange: function onChange(e, value) {
      setIsPlaying(false);
      setSelectedPart(value);
    }
  }), /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
    "aria-label": "delete",
    size: "large",
    onClick: function onClick() {
      setIsPlaying(false);
      setSelectedPart(selectedPart - 1);
    }
  }, /*#__PURE__*/index_js_default().createElement(SkipPrevious/* default */.A, {
    fontSize: "inherit"
  })), /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
    "aria-label": "delete",
    size: "large"
    // primary
    ,
    color: "primary",
    onClick: function onClick() {
      return setIsPlaying(!isPlaying);
    }
  }, isPlaying ? /*#__PURE__*/index_js_default().createElement(Pause/* default */.A, {
    fontSize: "inherit"
  }) : /*#__PURE__*/index_js_default().createElement(PlayArrow/* default */.A, {
    fontSize: "inherit"
  })), /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
    "aria-label": "delete",
    size: "large",
    onClick: function onClick() {
      setIsPlaying(false);
      setSelectedPart(selectedPart + 1);
    }
  }, /*#__PURE__*/index_js_default().createElement(SkipNext/* default */.A, {
    fontSize: "inherit"
  })), !!next && /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: function onClick() {
      next();
    },
    color: scanning ? "error" : "primary"
  }, "next stage")))));
});
// EXTERNAL MODULE: ./src/components/p2p/usePeer.js
var usePeer = __webpack_require__(76538);
;// CONCATENATED MODULE: ./src/components/atomic/molecules/webrtc-wizard/WebRTCWizard.js
function WebRTCWizard_typeof(o) { "@babel/helpers - typeof"; return WebRTCWizard_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, WebRTCWizard_typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == WebRTCWizard_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(WebRTCWizard_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function WebRTCWizard_slicedToArray(arr, i) { return WebRTCWizard_arrayWithHoles(arr) || WebRTCWizard_iterableToArrayLimit(arr, i) || WebRTCWizard_unsupportedIterableToArray(arr, i) || WebRTCWizard_nonIterableRest(); }
function WebRTCWizard_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function WebRTCWizard_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return WebRTCWizard_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return WebRTCWizard_arrayLikeToArray(o, minLen); }
function WebRTCWizard_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function WebRTCWizard_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function WebRTCWizard_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }






// steps:
// 1. select to create or scan offer
// 2. scan answer
// 3. scan ice candidate 1
// 4. scan ice candidate 2

/* harmony default export */ const WebRTCWizard = (function (_ref) {
  var onConnect = _ref.onConnect,
    onReceive = _ref.onReceive;
  var _useCryptography = (0,Cryptography.useCryptography)(),
    generateKeyPair = _useCryptography.generateKeyPair,
    deserializePublicKey = _useCryptography.deserializePublicKey,
    encrypt = _useCryptography.encrypt,
    decrypt = _useCryptography.decrypt,
    generateSymmetricKey = _useCryptography.generateSymmetricKey,
    deserializeSymmetricKey = _useCryptography.deserializeSymmetricKey,
    encryptWithSymmetricKey = _useCryptography.encryptWithSymmetricKey,
    decryptWithSymmetricKey = _useCryptography.decryptWithSymmetricKey;
  var _useState = (0,index_js_.useState)(""),
    _useState2 = WebRTCWizard_slicedToArray(_useState, 2),
    mode = _useState2[0],
    setMode = _useState2[1];
  var _usePeer = (0,usePeer/* default */.A)(),
    peer = _usePeer.peer;
  var _useState3 = (0,index_js_.useState)(null),
    _useState4 = WebRTCWizard_slicedToArray(_useState3, 2),
    rtc = _useState4[0],
    setRtc = _useState4[1];
  var _useState5 = (0,index_js_.useState)(null),
    _useState6 = WebRTCWizard_slicedToArray(_useState5, 2),
    dc = _useState6[0],
    setDc = _useState6[1];
  var _useState7 = (0,index_js_.useState)(null),
    _useState8 = WebRTCWizard_slicedToArray(_useState7, 2),
    rtcIceCandidate = _useState8[0],
    setRtcIceCandidate = _useState8[1];
  var _useState9 = (0,index_js_.useState)(null),
    _useState10 = WebRTCWizard_slicedToArray(_useState9, 2),
    rtcRemoteIceCandidate = _useState10[0],
    setRtcRemoteIceCandidate = _useState10[1];
  var _useState11 = (0,index_js_.useState)(null),
    _useState12 = WebRTCWizard_slicedToArray(_useState11, 2),
    rtcOffer = _useState12[0],
    setRtcOffer = _useState12[1];
  var _useState13 = (0,index_js_.useState)(null),
    _useState14 = WebRTCWizard_slicedToArray(_useState13, 2),
    rtcRemoteOffer = _useState14[0],
    setRtcRemoteOffer = _useState14[1];
  var _useState15 = (0,index_js_.useState)(null),
    _useState16 = WebRTCWizard_slicedToArray(_useState15, 2),
    rtcAnswer = _useState16[0],
    setRtcAnswer = _useState16[1];
  var _useState17 = (0,index_js_.useState)(null),
    _useState18 = WebRTCWizard_slicedToArray(_useState17, 2),
    rtcRemoteAnswer = _useState18[0],
    setRtcRemoteAnswer = _useState18[1];
  var _useState19 = (0,index_js_.useState)(null),
    _useState20 = WebRTCWizard_slicedToArray(_useState19, 2),
    publicKey = _useState20[0],
    setPublicKey = _useState20[1];
  var _useState21 = (0,index_js_.useState)(null),
    _useState22 = WebRTCWizard_slicedToArray(_useState21, 2),
    serializedPublicKey = _useState22[0],
    setSerializedPublicKey = _useState22[1];
  var _useState23 = (0,index_js_.useState)(null),
    _useState24 = WebRTCWizard_slicedToArray(_useState23, 2),
    privateKey = _useState24[0],
    setPrivateKey = _useState24[1];
  var _useState25 = (0,index_js_.useState)(null),
    _useState26 = WebRTCWizard_slicedToArray(_useState25, 2),
    remotePublicKey = _useState26[0],
    setRemotePublicKey = _useState26[1];
  var _useState27 = (0,index_js_.useState)(null),
    _useState28 = WebRTCWizard_slicedToArray(_useState27, 2),
    symmetricKey = _useState28[0],
    setSymmetricKey = _useState28[1];
  var _useState29 = (0,index_js_.useState)(null),
    _useState30 = WebRTCWizard_slicedToArray(_useState29, 2),
    contactDetails = _useState30[0],
    setContactDetails = _useState30[1];
  (0,index_js_.useEffect)(function () {
    var generateKeys = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var keyPair, serializedPublicKey;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return generateKeyPair();
            case 2:
              keyPair = _context.sent;
              setPublicKey(keyPair.publicKey);
              setPrivateKey(keyPair.privateKey);
              _context.next = 7;
              return window.crypto.subtle.exportKey("jwk", keyPair.publicKey);
            case 7:
              serializedPublicKey = _context.sent;
              setSerializedPublicKey(serializedPublicKey);
            case 9:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function generateKeys() {
        return _ref2.apply(this, arguments);
      };
    }();
    generateKeys();
  }, []);
  (0,index_js_.useEffect)(function () {
    if (peer) {
      setRtc(peer.connect().peerConnection);
    }
  }, [peer]);
  (0,index_js_.useEffect)(function () {
    if (rtc) {
      rtc.onicecandidate = function (event) {
        if (event.candidate) {
          var serialisedIceCandidate = JSON.stringify(event.candidate);
          setRtcIceCandidate(serialisedIceCandidate);
        }
      };
      rtc.ondatachannel = function (event) {
        event.channel.onopen = function () {
          event.channel.send({
            type: "publicKey",
            publicKey: publicKey
          });
          event.channel.send({
            type: "symmetricKey",
            symmetricKey: symmetricKey
          });
        };
        event.channel.onmessage = function (event) {
          console.info("rtc1: received message:", event.data);
          var parsedData = JSON.parse(event.data);
          switch (event.data.type) {
            case "publicKey":
              setRemotePublicKey(parsedData.publicKey);
              break;
            case "symmetricKey":
              setSymmetricKey(parsedData.symmetricKey);
              break;
            default:
              break;
          }
        };
      };
      var _dc = rtc.createDataChannel("channel1");
      _dc.onopen = function () {
        _dc.send({
          type: "publicKey",
          publicKey: publicKey
        });
        _dc.send({
          type: "symmetricKey",
          symmetricKey: symmetricKey
        });
      };
      _dc.onmessage = function (event) {
        console.info("rtc2: received message:", event.data);
        var parsedData = JSON.parse(event.data);
        switch (event.data.type) {
          case "publicKey":
            setRemotePublicKey(parsedData.publicKey);
            break;
          case "symmetricKey":
            setSymmetricKey(parsedData.symmetricKey);
            break;
          default:
            break;
        }
      };
      setDc(_dc);
    }
  }, [rtc]);
  var handleCreateOffer = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var offer;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return rtc.createOffer();
          case 2:
            offer = _context2.sent;
            _context2.next = 5;
            return rtc.setLocalDescription(offer);
          case 5:
            setRtcOffer(JSON.stringify(offer));
            console.log("rtc1: offer", offer);
          case 7:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function handleCreateOffer() {
      return _ref3.apply(this, arguments);
    };
  }();
  var handleRemoteOffer = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(rtcRemoteOffer) {
      var offer, offerDescption;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            offer = JSON.parse(rtcRemoteOffer.replace(/(\r\n|\n|\r)/gm, "")); // RTCSessionDescriptionInit
            offerDescption = new RTCSessionDescription(offer);
            _context3.next = 4;
            return rtc.setRemoteDescription(offerDescption)["catch"](function (e) {
              console.error("rtc1: setRemoteDescription", e);
            });
          case 4:
            _context3.next = 6;
            return handleAnswer();
          case 6:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return function handleRemoteOffer(_x) {
      return _ref4.apply(this, arguments);
    };
  }();
  (0,index_js_.useEffect)(function () {
    if (rtcRemoteOffer) {
      handleRemoteOffer(rtcRemoteOffer);
    }
  }, [rtcRemoteOffer]);
  var handleAnswer = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var answer;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return rtc.createAnswer();
          case 2:
            answer = _context4.sent;
            _context4.next = 5;
            return rtc.setLocalDescription(answer);
          case 5:
            setRtcAnswer(JSON.stringify(answer));
          case 6:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    return function handleAnswer() {
      return _ref5.apply(this, arguments);
    };
  }();
  var handleRemoteAnswer = /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(rtcRemoteAnswer) {
      var answer, answerDescption;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            answer = JSON.parse(rtcRemoteAnswer.replace(/(\r\n|\n|\r)/gm, "")); // RTCSessionDescriptionInit
            answerDescption = new RTCSessionDescription(answer);
            _context5.next = 4;
            return rtc.setRemoteDescription(answerDescption);
          case 4:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    }));
    return function handleRemoteAnswer(_x2) {
      return _ref6.apply(this, arguments);
    };
  }();
  (0,index_js_.useEffect)(function () {
    if (rtcRemoteAnswer) {
      handleRemoteAnswer(rtcRemoteAnswer);
    }
  }, [rtcRemoteAnswer]);
  var handleIceCandidate = /*#__PURE__*/function () {
    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(rtcIceCandidate) {
      var iceCandidate;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            iceCandidate = JSON.parse(rtcIceCandidate.replace(/(\r\n|\n|\r)/gm, ""));
            _context6.next = 3;
            return rtc.addIceCandidate(iceCandidate);
          case 3:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    }));
    return function handleIceCandidate(_x3) {
      return _ref7.apply(this, arguments);
    };
  }();
  (0,index_js_.useEffect)(function () {
    if (rtcRemoteIceCandidate) {
      handleIceCandidate(rtcRemoteIceCandidate);
    }
  }, [rtcRemoteIceCandidate]);
  console.log({
    publicKey: publicKey,
    privateKey: privateKey,
    remotePublicKey: remotePublicKey,
    symmetricKey: symmetricKey
  });
  return /*#__PURE__*/index_js_default().createElement("div", null, !mode && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: function onClick() {
      setMode("createOffer");
      handleCreateOffer();
    }
  }, "create offer"), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: function onClick() {
      return setMode("scanOffer");
    }
  }, "scan offer")), mode === "createOffer" && /*#__PURE__*/index_js_default().createElement(QRInput, {
    value: JSON.stringify({
      rtcOffer: rtcOffer,
      rtcIceCandidate: rtcIceCandidate
    }),
    qr: true,
    back: function back() {
      return setMode('');
    },
    next: function next() {
      return setMode('scanAnswer');
    }
  }), mode === "scanOffer" && /*#__PURE__*/index_js_default().createElement(QRInput, {
    scan: true,
    onScan: function onScan(data) {
      var _JSON$parse = JSON.parse(data),
        rtcIceCandidate = _JSON$parse.rtcIceCandidate,
        rtcOffer = _JSON$parse.rtcOffer;
      setRtcRemoteOffer(rtcOffer);
      setRtcRemoteIceCandidate(rtcIceCandidate);
      setMode('createAnswer');
    },
    back: function back() {
      return setMode('');
    }
  }), mode === "scanAnswer" && /*#__PURE__*/index_js_default().createElement(QRInput, {
    scan: true,
    onScan: function onScan(data) {
      var _JSON$parse2 = JSON.parse(data),
        rtcAnswer = _JSON$parse2.rtcAnswer,
        rtcIceCandidate = _JSON$parse2.rtcIceCandidate;
      setRtcRemoteAnswer(rtcAnswer);
      setRtcRemoteIceCandidate(rtcIceCandidate);
      setMode('sharePublicKey');
    },
    back: function back() {
      return setMode('createOffer');
    }
  }), mode === "createAnswer" && /*#__PURE__*/index_js_default().createElement(QRInput, {
    value: JSON.stringify({
      rtcAnswer: rtcAnswer,
      rtcIceCandidate: rtcIceCandidate
    }),
    qr: true,
    back: function back() {
      return setMode('scanOffer');
    },
    next: function next() {
      return setMode('scanPublicKey');
    }
  }), mode === "sharePublicKey" && /*#__PURE__*/index_js_default().createElement(QRInput, {
    value: serializedPublicKey,
    qr: true,
    back: function back() {
      return setMode('scanAnswer');
    },
    next: function next() {
      return setMode('scanRemotePublicKey');
    }
  }), mode === "scanPublicKey" && /*#__PURE__*/index_js_default().createElement(QRInput, {
    scan: true,
    onScan: function onScan(data) {
      setRemotePublicKey(data);
      setMode('sharePublicKeyAndSymmetricKey');
    },
    back: function back() {
      return setMode('createAnswer');
    }
  }), mode === "scanRemotePublicKeyAndSymmetricKey" && /*#__PURE__*/index_js_default().createElement(QRInput, {
    scan: true,
    onScan: function onScan(data) {
      var _JSON$parse3 = JSON.parse(data),
        remotePublicKey = _JSON$parse3.remotePublicKey,
        symmetricKey = _JSON$parse3.symmetricKey;
      setRemotePublicKey(remotePublicKey);
      setSymmetricKey(symmetricKey);
      setMode('connected');
    },
    back: function back() {
      return setMode('scanPublicKey');
    }
  }), mode === "sharePublicKeyAndSymmetricKey" && /*#__PURE__*/index_js_default().createElement(QRInput, {
    value: JSON.stringify({
      publicKey: publicKey,
      symmetricKey: symmetricKey
    }),
    qr: true,
    back: function back() {
      return setMode('scanPublicKey');
    },
    next: function next() {
      return setMode('connected');
    }
  }));
});
;// CONCATENATED MODULE: ./src/components/atomic/molecules/connect-to-peer/ConnectToPeer.js
function ConnectToPeer_toConsumableArray(arr) { return ConnectToPeer_arrayWithoutHoles(arr) || ConnectToPeer_iterableToArray(arr) || ConnectToPeer_unsupportedIterableToArray(arr) || ConnectToPeer_nonIterableSpread(); }
function ConnectToPeer_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function ConnectToPeer_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function ConnectToPeer_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return ConnectToPeer_arrayLikeToArray(arr); }
function ConnectToPeer_slicedToArray(arr, i) { return ConnectToPeer_arrayWithHoles(arr) || ConnectToPeer_iterableToArrayLimit(arr, i) || ConnectToPeer_unsupportedIterableToArray(arr, i) || ConnectToPeer_nonIterableRest(); }
function ConnectToPeer_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function ConnectToPeer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ConnectToPeer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ConnectToPeer_arrayLikeToArray(o, minLen); }
function ConnectToPeer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ConnectToPeer_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function ConnectToPeer_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }






















var ConnectToPeer_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    qrcodeReader: {
      // height: '100vh',
      width: "100%",
      // top: 0,
      // left: 0,
      // position: 'absolute',
      zIndex: 10000
    }
  };
});
var ConnectToPeer = function ConnectToPeer(_ref) {
  var qr = _ref.qr,
    open = _ref.open,
    link = _ref.link,
    collapse = _ref.collapse;
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var classes = ConnectToPeer_useStyles();
  var dispatch = (0,react_redux/* useDispatch */.wA)();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var _useParams = (0,react_router_dist/* useParams */.g)(),
    contactId = _useParams.contactId;
  var _useState = (0,index_js_.useState)("No result"),
    _useState2 = ConnectToPeer_slicedToArray(_useState, 2),
    result = _useState2[0],
    setResult = _useState2[1];
  var _useState3 = (0,index_js_.useState)(false),
    _useState4 = ConnectToPeer_slicedToArray(_useState3, 2),
    scanning = _useState4[0],
    setScanning = _useState4[1];
  var qrcodeRef = (0,index_js_.useRef)(null);
  var _React$useState = index_js_default().useState([]),
    _React$useState2 = ConnectToPeer_slicedToArray(_React$useState, 2),
    expanded = _React$useState2[0],
    setExpanded = _React$useState2[1];
  var handleChange = function handleChange(panel) {
    return function (event, isExpanded) {
      if (isExpanded) {
        setExpanded(function (prevExpanded) {
          return [].concat(ConnectToPeer_toConsumableArray(prevExpanded), [panel]);
        });
      } else {
        setExpanded(function (prevExpanded) {
          return prevExpanded.filter(function (item) {
            return item !== panel;
          });
        });
      }
    };
  };
  var _useState5 = (0,index_js_.useState)(""),
    _useState6 = ConnectToPeer_slicedToArray(_useState5, 2),
    contactNamePreset = _useState6[0],
    setContactNamePreset = _useState6[1];
  var _useState7 = (0,index_js_.useState)(""),
    _useState8 = ConnectToPeer_slicedToArray(_useState7, 2),
    peerLink = _useState8[0],
    setPeerLink = _useState8[1];
  var storedBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: storedBlockchain
    }),
    compiledProfile = _useBlockchain.compiledBlockchain;
  // const storedConnectionId = useSelector((state) => state.userProfile.id);
  var storedConnectionId = compiledProfile.connectionId;
  var updateConnectionIdDispatch = function updateConnectionIdDispatch(connectionId) {
    return dispatch((0,userProfileSlice/* updatePeerId */.jX)(connectionId));
  };
  var handleConnectionIdChange = function handleConnectionIdChange(e) {
    updateConnectionIdDispatch(e.target.value);
  };
  var handlePeerLinkChange = function handlePeerLinkChange(e) {
    var _extractIDFromLink;
    var value = e.target.value;
    var previousValue = extractIDFromLink(peerLink) || "";

    // Check if more than 2 characters have changed
    var isPasted = Math.abs(((_extractIDFromLink = extractIDFromLink(value)) === null || _extractIDFromLink === void 0 ? void 0 : _extractIDFromLink.length) - previousValue.length) > 2;
    if (isPasted) {
      // Call a different function for paste event
      setPeerLink(value);
      handlePeerLinkConnect(value);
    } else {
      // Call the regular function for other change events
      setPeerLink(value);
    }
  };
  function extractIDFromLink(link) {
    // Regular expression pattern to extract the ID
    var pattern = /(login|contact)\/(\w+)/;

    // Extracting the ID using the pattern
    var match = link.match(pattern);

    // If a match is found, return the ID
    if (match && match.length > 2) {
      return match[2];
    }

    // If no match is found, return null or handle the error as desired
    return null;
  }
  var handlePeerLinkConnect = function handlePeerLinkConnect(link) {
    var peerLink = link || peerLink || "";
    if (!extractIDFromLink(peerLink) || extractIDFromLink(peerLink) === storedConnectionId) {
      return;
    }
    if (collapse) {
      setExpanded([]);
    } else {
      navigate("/contact/".concat(extractIDFromLink(peerLink)));
    }
  };
  var handleCopyConnectionIdToClipboard = function handleCopyConnectionIdToClipboard() {
    navigator.clipboard.writeText("".concat(window.location.origin, "/#/login/").concat(storedConnectionId).concat(contactNamePreset ? "/".concat(contactNamePreset) : ""));
  };
  var handleScan = function handleScan(data) {
    var _URL, _URL$split;
    if (!(data !== null && data !== void 0 && data.text)) return;
    data && setResult(data);
    var peerLink = (_URL = new URL(data.text)) === null || _URL === void 0 || (_URL = _URL.hash) === null || _URL === void 0 || (_URL$split = _URL.split) === null || _URL$split === void 0 ? void 0 : _URL$split.call(_URL, '/')[2];
    peerLink && navigate("/login/".concat(peerLink));
    if (collapse) {
      setExpanded([]);
    }
  };
  var handleError = function handleError(err) {
    console.error(err);
  };
  return /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    expanded: expanded.includes("share-panel") || qr || open || link,
    onChange: qr || open || link ? undefined : handleChange("share-panel")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: !!qr || open || link ? undefined : /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, t("components.connectToPeer.connectToPeer"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    expanded: expanded.includes("share-link") || link,
    onChange: handleChange("share-link")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: link ? undefined : /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    noWrap: true,
    sx: {
      flexShrink: 0
    }
  }, t("components.connectToPeer.shareLink"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: t("components.connectToPeer.shareToConnect"),
    name: "connectionId",
    value: "".concat(window.location.origin, "/#/login/").concat(storedConnectionId).concat(contactNamePreset ? "/".concat(contactNamePreset) : ""),
    onChange: handleConnectionIdChange,
    InputProps: {
      readOnly: true,
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(ContentCopy/* default */.A, null)))
    }
  }), !contactId && /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    color: extractIDFromLink(peerLink) && extractIDFromLink(peerLink) !== storedConnectionId ? "primary" : "error",
    id: "connectionId",
    label: t("components.connectToPeer.enterLink"),
    name: "connectionId",
    value: peerLink,
    autoComplete: "off",
    onChange: handlePeerLinkChange,
    onKeyPress: function onKeyPress(ev) {
      if (ev.key === "Enter" && !ev.shiftKey) {
        ev.preventDefault();
        handlePeerLinkConnect();
      }
    },
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handlePeerLinkConnect,
        edge: "end",
        disabled: !peerLink || extractIDFromLink(peerLink) === storedConnectionId,
        color: peerLink ? extractIDFromLink(peerLink) && extractIDFromLink(peerLink) !== storedConnectionId ? "primary" : "error" : "default"
      }, /*#__PURE__*/index_js_default().createElement(ConnectWithoutContact/* default */.A, null)))
    }
  }))), /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    expanded: expanded.includes("panel4") || qr,
    onChange: handleChange("panel4")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: qr ? undefined : /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, t("components.connectToPeer.shareQr"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, {
    style: {
      background: "white"
    }
  }, !scanning && /*#__PURE__*/index_js_default().createElement(react_qr_code_lib/* default */.Ay, {
    ref: qrcodeRef,
    size: 256,
    style: {
      height: "auto",
      maxWidth: "100%",
      width: "100%"
    },
    value: "".concat(window.location.origin, "/#/login/").concat(storedConnectionId),
    viewBox: "0 0 256 256"
  }), scanning && /*#__PURE__*/index_js_default().createElement((react_qr_scanner_umd_default()), {
    delay: 300,
    className: classes.qrcodeReader,
    onError: handleError,
    onScan: handleScan,
    constraints: {
      video: {
        facingMode: "environment"
      }
    }
  }), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: function onClick() {
      return setScanning(!scanning);
    },
    color: scanning ? "error" : "primary"
  }, scanning ? t("components.connectToPeer.stopScanning") : t("components.connectToPeer.scanQr")))),  true && /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    expanded: expanded.includes("panel5"),
    onChange: handleChange("panel5")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: qr ? undefined : /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, t("components.connectToPeer.shareWebRtcQr"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, expanded.includes("panel5") && /*#__PURE__*/index_js_default().createElement(WebRTCWizard, null)))));
};
/* harmony default export */ const connect_to_peer_ConnectToPeer = (ConnectToPeer);
;// CONCATENATED MODULE: ./public/logo512.png
const logo512_namespaceObject = __webpack_require__.p + "eff5e90f8290bab6a19a.png";
;// CONCATENATED MODULE: ./public/home-icons/decentralized.png
const decentralized_namespaceObject = __webpack_require__.p + "13cd39109b2a7d46819a.png";
;// CONCATENATED MODULE: ./public/home-icons/agnostic.png
const agnostic_namespaceObject = __webpack_require__.p + "defacba1197148e8ce94.png";
;// CONCATENATED MODULE: ./public/home-icons/data-export-import.png
const data_export_import_namespaceObject = __webpack_require__.p + "e579622dc9cdc1d3abe5.png";
;// CONCATENATED MODULE: ./public/home-icons/no-registration.png
const no_registration_namespaceObject = __webpack_require__.p + "369f792976bcd39c21fa.png";
;// CONCATENATED MODULE: ./public/home-icons/push-notifications.png
const push_notifications_namespaceObject = __webpack_require__.p + "fdae8135df8aa32c56bf.png";
;// CONCATENATED MODULE: ./public/home-icons/video-calls.png
const video_calls_namespaceObject = __webpack_require__.p + "9dc5be91906bd2de56fa.png";
// EXTERNAL MODULE: ./node_modules/@mui/material/styles/styled.js
var styled = __webpack_require__(11848);
// EXTERNAL MODULE: ./node_modules/@mui/material/Slide/Slide.js
var Slide = __webpack_require__(48875);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/QuestionMark.js
var QuestionMark = __webpack_require__(20772);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Close.js
var Close = __webpack_require__(39781);
// EXTERNAL MODULE: ./node_modules/@mui/material/Dialog/Dialog.js + 1 modules
var Dialog = __webpack_require__(58031);
// EXTERNAL MODULE: ./node_modules/@mui/material/DialogTitle/DialogTitle.js
var DialogTitle = __webpack_require__(46831);
// EXTERNAL MODULE: ./node_modules/@mui/material/DialogContent/DialogContent.js + 1 modules
var DialogContent = __webpack_require__(22477);
// EXTERNAL MODULE: ./node_modules/@mui/material/DialogActions/DialogActions.js + 1 modules
var DialogActions = __webpack_require__(58763);
;// CONCATENATED MODULE: ./src/components/atomic/atom/docLink/DocLink.js
function DocLink_slicedToArray(arr, i) { return DocLink_arrayWithHoles(arr) || DocLink_iterableToArrayLimit(arr, i) || DocLink_unsupportedIterableToArray(arr, i) || DocLink_nonIterableRest(); }
function DocLink_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function DocLink_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return DocLink_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return DocLink_arrayLikeToArray(o, minLen); }
function DocLink_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function DocLink_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function DocLink_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }











var BootstrapDialog = (0,styled/* default */.Ay)(Dialog/* default */.A)(function (_ref) {
  var theme = _ref.theme;
  return {
    "& .MuiDialogContent-root": {
      padding: theme.spacing(2),
      minHeight: '70vh',
      maxHeight: '70vh',
      display: 'flex',
      flexDirection: 'column'
    },
    "& .MuiDialogActions-root": {
      padding: theme.spacing(1)
    },
    "iframe": {
      width: "100%",
      height: "100%",
      backgroundColor: "white",
      // flex-grow: 1; border: none; margin: 0; padding: 0;
      flexGrow: 1,
      border: 'none',
      margin: 0
    }
  };
});
var Transition = /*#__PURE__*/index_js_default().forwardRef(function Transition(props, ref) {
  return /*#__PURE__*/index_js_default().createElement(Slide/* default */.A, _extends({
    direction: "up",
    ref: ref
  }, props));
});
/* harmony default export */ const DocLink = (function (_ref2) {
  var _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? 'large' : _ref2$size,
    _ref2$docLink = _ref2.docLink,
    docLink = _ref2$docLink === void 0 ? 'https://positive-intentions.com/docs/basics/getting-started/' : _ref2$docLink;
  var _useState = (0,index_js_.useState)(false),
    _useState2 = DocLink_slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var handleClose = function handleClose() {
    return setOpen(false);
  };
  var handleOpen = function handleOpen() {
    return setOpen(true);
  };
  return /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
    size: size,
    "aria-label": "account of current user",
    "aria-controls": "menu-appbar",
    "aria-haspopup": "true",
    color: "inherit",
    onClick: handleOpen
  }, /*#__PURE__*/index_js_default().createElement(QuestionMark/* default */.A, null)), /*#__PURE__*/index_js_default().createElement(BootstrapDialog, {
    onClose: handleClose,
    "aria-labelledby": "customized-dialog-title",
    open: open,
    TransitionComponent: Transition,
    disablePortal: true,
    fullWidth: true,
    fullHeight: true
  }, /*#__PURE__*/index_js_default().createElement(DialogTitle/* default */.A, {
    sx: {
      m: 0,
      p: 2
    },
    id: "customized-dialog-title"
  }, "Docs"), /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
    "aria-label": "close",
    onClick: handleClose,
    sx: {
      position: "absolute",
      right: 8,
      top: 8,
      color: function color(theme) {
        return theme.palette.grey[500];
      }
    }
  }, /*#__PURE__*/index_js_default().createElement(Close/* default */.A, null)), /*#__PURE__*/index_js_default().createElement(DialogContent/* default */.A, {
    dividers: true
  }, /*#__PURE__*/index_js_default().createElement("iframe", {
    src: docLink,
    width: "80vw",
    height: "100%",
    frameBorder: "0",
    title: "Docs"
  })), /*#__PURE__*/index_js_default().createElement(DialogActions/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    autoFocus: true,
    onClick: handleClose
  }, "close"))));
});
;// CONCATENATED MODULE: ./public/avatars/1.jpg
const _1_namespaceObject = __webpack_require__.p + "9ea0e16afc9516dcea53.jpg";
;// CONCATENATED MODULE: ./public/avatars/2.jpg
const _2_namespaceObject = __webpack_require__.p + "a3fcdef2d1473cb16962.jpg";
;// CONCATENATED MODULE: ./public/avatars/3.jpg
const _3_namespaceObject = __webpack_require__.p + "c3ccde5b00440d752330.jpg";
;// CONCATENATED MODULE: ./public/avatars/4.jpg
const _4_namespaceObject = __webpack_require__.p + "0f1b853406ca1afbf8dd.jpg";
;// CONCATENATED MODULE: ./public/avatars/5.jpg
const _5_namespaceObject = __webpack_require__.p + "82980c5cd8d7dda52ced.jpg";
;// CONCATENATED MODULE: ./public/avatars/6.jpg
const _6_namespaceObject = __webpack_require__.p + "521f516f6ed066df7cb4.jpg";
;// CONCATENATED MODULE: ./public/avatars/7.jpg
const _7_namespaceObject = __webpack_require__.p + "01d46372957497dd8f3b.jpg";
;// CONCATENATED MODULE: ./public/avatars/8.jpg
const _8_namespaceObject = __webpack_require__.p + "034d9e19326659d69234.jpg";
;// CONCATENATED MODULE: ./public/avatars/9.jpg
const _9_namespaceObject = __webpack_require__.p + "fb2fef1d328a84f4fefe.jpg";
;// CONCATENATED MODULE: ./src/components/pages/login/Login.js
function Login_typeof(o) { "@babel/helpers - typeof"; return Login_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Login_typeof(o); }
function Login_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Login_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Login_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Login_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function Login_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function Login_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Login_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Login_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function Login_toConsumableArray(arr) { return Login_arrayWithoutHoles(arr) || Login_iterableToArray(arr) || Login_unsupportedIterableToArray(arr) || Login_nonIterableSpread(); }
function Login_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Login_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Login_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Login_arrayLikeToArray(arr); }
function Login_slicedToArray(arr, i) { return Login_arrayWithHoles(arr) || Login_iterableToArrayLimit(arr, i) || Login_unsupportedIterableToArray(arr, i) || Login_nonIterableRest(); }
function Login_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Login_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Login_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Login_arrayLikeToArray(o, minLen); }
function Login_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Login_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Login_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// import React, { useState } from 'react';
// import TextField from '@mui/material/TextField';
// import Button from '@mui/material/Button';
// import { useSelector, useDispatch } from 'react-redux'
// import { updateUsername } from '../../redux/slices/userProfileSlice';
// import { useNavigate } from "react-router-dom";
// import AppHeader from '../../atomic/molecules/app-header/AppHeader';
// import Container from '@mui/material/Container';
// import Box from '@mui/material/Box';

// export default function LoginForm() {
//   // const classes = useStyles();
//   const [username, setUsername] = useState('');
//   const navigate = useNavigate();

//   const storedUsername = useSelector((state) => state.userProfile.username)
//   const dispatch = useDispatch();
//   const updateUsernameDispatch = (username) => dispatch(updateUsername(username));

//   const handleUsernameChange = (event) => {
//     setUsername(event.target.value);
//   };

//   const isSubmitDisabled = !username;

//   // make the form submit button dispatch the update action for username
//   return (
//     <Container maxWidth={false} disableGutters>
//       <AppHeader
//         title="Login"
//       />

//       {/* <box>

//       </box>

//       <Box>
//         <form noValidate autoComplete="off" style={{ padding: '20px' }}
//           onSubmit={(event) => {
//             event.preventDefault();
//             updateUsernameDispatch(username);
//           }}
//         >
//           <TextField
//             id="username"
//             label="Username"
//             value={username}
//             onChange={handleUsernameChange}
//           />
//           <br />
//           <br />
//           <Button
//             variant="contained"
//             color="primary"
//             disabled={isSubmitDisabled}
//             onClick={() => {
//               // update user name in redux and navigate to the chat page
//               updateUsernameDispatch(username);
//               navigate('/conversations');
//             }}
//           >
//             Submit
//           </Button>
//           <div>Username: {storedUsername || 'not set'}</div>
//         </form>
//       </Box>

//     </Container> */}

//     <Container maxWidth={false} disableGutters>
//       <Box
//         sx={{
//           display: 'flex',
//           flexDirection: 'column',
//           height: '100vh',
//           justifyContent: 'center',
//           alignItems: 'center',
//         }}
//       >
//         {/* random image related to "login" */}
//         <img  src="https://source.unsplash.com/random/400x200?login" alt="random" />

//         <Box
//           sx={{
//             display: 'flex',
//             flexDirection: 'column',
//             justifyContent: 'center',
//             alignItems: 'center',
//             width: '400px',
//           }}
//         >
//           <form noValidate autoComplete="off" style={{ padding: '20px' }}
//             onSubmit={(event) => {
//               event.preventDefault();
//               updateUsernameDispatch(username);
//             }}
//           >
//             <TextField
//               id="username"
//               label="Username"
//               value={username}
//               onChange={handleUsernameChange}
//               fullWidth
//             />
//             <br />
//             <br />
//             <Button
//               variant="contained"
//               color="primary"
//               disabled={isSubmitDisabled}
//               fullWidth
//               onClick={() => {
//                 // update user name in redux and navigate to the chat page
//                 updateUsernameDispatch(username);
//                 navigate('/conversations');
//               }}
//             >
//               Login
//             </Button>
//             {/* <div>Username: {storedUsername
//               || 'not set'}</div> */}
//           </form>
//               </Box>
//       </Box>
//     </Container>

//     </Container>
//   );

//   // return ("hello world")
// }






































// import {Adsense} from '@ctrl/react-adsense';

























var avatars = [{
  src: _1_namespaceObject
}, {
  src: _2_namespaceObject
}, {
  src: _3_namespaceObject
}, {
  src: _4_namespaceObject
}, {
  src: _5_namespaceObject
}, {
  src: _6_namespaceObject
}, {
  src: _7_namespaceObject
}, {
  src: _8_namespaceObject
}, {
  src: _9_namespaceObject
}];
var SimpleSlider = function SimpleSlider(_ref) {
  var onSelect = _ref.onSelect;
  var settings = {
    className: "center",
    centerMode: true,
    infinite: true,
    centerPadding: "30px",
    slidesToShow: 2,
    speed: 500,
    style: {
      height: '108px'
    }
  };
  // heading with artist link dark mode adjusted color based on the default from material ui for text
  return /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      margin: "0 25px 20px"
    }
  }, /*#__PURE__*/index_js_default().createElement(lib/* default */.A, settings, avatars.map(function (avatar, index) {
    return /*#__PURE__*/index_js_default().createElement("div", {
      key: index
    }, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
      onClick: function onClick() {
        return onSelect(avatar.src);
      }
    }, /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
      src: avatar.src,
      style: {
        minHeight: "100px",
        minWidth: "100px",
        margin: "auto"
      }
    })));
  })));
};
var Login_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    root: {
      flexGrow: 1
    },
    appBar: {
      height: theme.spacing(8)
    },
    form: {
      padding: "0 ".concat(theme.spacing(3))
    },
    title: {
      fontWeight: "bold",
      textAlign: "left",
      display: "flex",
      alignItems: "center",
      height: "100%",
      padding: "0 ".concat(theme.spacing(3))
    },
    img: {
      width: "100%"
    },
    hidden: {
      display: "none",
      visibility: "hidden"
    }
  };
});
function LoginPage() {
  var _compiledProfile$sett, _compiledProfile$sett2;
  var _useCryptography = (0,Cryptography.useCryptography)(),
    chance = _useCryptography.chance,
    randomString = _useCryptography.randomString;
  var _useParams = (0,react_router_dist/* useParams */.g)(),
    contactId = _useParams.contactId,
    contactName = _useParams.contactName;
  var _AllTermsAndCondition = termsAndConditions[termsAndConditions.length - 1],
    latestTermsAndConditionsVersion = _AllTermsAndCondition.version,
    TermsAndConditions = _AllTermsAndCondition.terms;
  var classes = Login_useStyles();
  var theme = (0,useTheme/* default */.A)();
  var colorMode = index_js_default().useContext(ColorModeContext);
  var store = (0,react_redux/* useStore */.Pj)();
  var dispatch = (0,react_redux/* useDispatch */.wA)();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var updateUsernameDispatch = function updateUsernameDispatch(username) {
    return dispatch((0,userProfileSlice/* updateUsername */.kZ)(username));
  };
  var updateAgreedToTermsDispatch = function updateAgreedToTermsDispatch(agreedToTerms) {
    return dispatch((0,userProfileSlice/* updateAgreedToTerms */.u2)(agreedToTerms));
  };
  var setUserProfileDispatch = function setUserProfileDispatch(userProfile) {
    return dispatch((0,userProfileSlice/* setUserProfile */.p)(userProfile));
  };
  var updateAvatarDispatch = function updateAvatarDispatch(avatar) {
    return dispatch((0,userProfileSlice/* updateAvatar */.xG)(avatar));
  };
  var setPodsDispatch = function setPodsDispatch(pods) {
    return dispatch((0,podsSlice/* setPods */.x7)(pods));
  };
  var setContactsDispatch = function setContactsDispatch(contacts) {
    return dispatch(setContacts(contacts));
  };
  var setEncryptionDispatch = function setEncryptionDispatch(encryption) {
    return dispatch(setEncryption(encryption));
  };
  var setInAppNotificationDispatch = function setInAppNotificationDispatch(inAppNotification) {
    return dispatch((0,userProfileSlice/* setInAppNotification */.IN)(inAppNotification));
  };
  var setBrowserNotificationDispatch = function setBrowserNotificationDispatch(browserNotification) {
    return dispatch((0,userProfileSlice/* setBrowserNotification */.c_)(browserNotification));
  };
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];
  // const { enqueueSnackbar } = useSnackbar();
  // const sendNotification = useNotification();

  var fileRef = (0,index_js_.useRef)(null);
  var setAvatarRef = (0,index_js_.useRef)(null);
  // make it so the form submits and updates the username in redux and navigates to the conversations page
  var _useState = (0,index_js_.useState)(contactName !== null && contactName !== void 0 ? contactName : "".concat(chance.animal())),
    _useState2 = Login_slicedToArray(_useState, 2),
    username = _useState2[0],
    setUsername = _useState2[1];
  var _useState3 = (0,index_js_.useState)(null),
    _useState4 = Login_slicedToArray(_useState3, 2),
    avatarBase64 = _useState4[0],
    setAvatarBase64 = _useState4[1];
  var _useState5 = (0,index_js_.useState)(false),
    _useState6 = Login_slicedToArray(_useState5, 2),
    agreedToTerms = _useState6[0],
    setAgreedToTerms = _useState6[1];
  // const storeInAppNotication = useSelector((state) => state?.userProfile?.inAppNotification)
  // const storeBrowserNotication = useSelector((state) => state?.userProfile?.browserNotification)
  var addToBlockchainDispatch = function addToBlockchainDispatch(_ref2) {
    var block = _ref2.block,
      blocks = _ref2.blocks,
      storage = _ref2.storage;
    return dispatch((0,userProfileSlice/* addToBlockchain */.XE)({
      block: block,
      blocks: blocks,
      storage: storage
    }));
  };
  var _React$useState = index_js_default().useState(false),
    _React$useState2 = Login_slicedToArray(_React$useState, 2),
    expanded = _React$useState2[0],
    setExpanded = _React$useState2[1];
  var handleChange = function handleChange(panel) {
    return function (event, isExpanded) {
      setExpanded(isExpanded ? panel : false);
    };
  };
  var storedBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: storedBlockchain,
      dispatch: addToBlockchainDispatch
    }),
    compiledProfile = _useBlockchain.compiledBlockchain,
    addBlocksToProfile = _useBlockchain.addBlocks;

  // const profileBlockchain = useMemo(() => new Blockchain({
  //   compiler: profileCompiler,
  //   chain: storedBlockchain.chain.filter(b => !!b) || [],
  //   storage: storedBlockchain.storage || {},
  // }), [storedBlockchain.chain, storedBlockchain.storage]);

  // const compiledProfile = useMemo(() => profileBlockchain.compile(), [profileBlockchain]);
  var storedUsername = compiledProfile.displayName;
  var storedId = compiledProfile.id;
  var storedConnectionId = compiledProfile.connectionId;
  var storedInAppNotification = (_compiledProfile$sett = compiledProfile.settings) === null || _compiledProfile$sett === void 0 ? void 0 : _compiledProfile$sett.inAppNotification;
  var storedBrowserNotification = (_compiledProfile$sett2 = compiledProfile.settings) === null || _compiledProfile$sett2 === void 0 ? void 0 : _compiledProfile$sett2.browserNotification;
  var _useState7 = (0,index_js_.useState)(""),
    _useState8 = Login_slicedToArray(_useState7, 2),
    peerjsServer = _useState8[0],
    setPeerjsServer = _useState8[1];
  var handlePeerjsServerChange = function handlePeerjsServerChange(event) {
    setPeerjsServer(event.target.value);
  };
  var _useState9 = (0,index_js_.useState)(""),
    _useState10 = Login_slicedToArray(_useState9, 2),
    encryptionSignature = _useState10[0],
    setEncryptionSignature = _useState10[1];
  var handleEncryptionSignatureChange = function handleEncryptionSignatureChange(signature) {
    setEncryptionSignature(signature);
  };
  var setAvatar = function setAvatar(avatar) {
    fetch(avatar).then(function (res) {
      return res.blob();
    }).then(function (blob) {
      var reader = new FileReader();
      reader.readAsDataURL(blob);
      reader.onloadend = function () {
        setAvatarBase64(reader.result);
      };
    });
  };
  (0,index_js_.useEffect)(function () {
    //get random avatar
    var randomAvatar = avatars[Math.floor(Math.random() * avatars.length)].src;
    setAvatar(randomAvatar);
  }, []);
  var isInstalledPwa = (0,index_js_.useMemo)(function () {
    return window.matchMedia("(display-mode: standalone)").matches || window.navigator.standalone || document.referrer.includes("android-app://");
  }, []);

  // list of random groups from chancejs
  var randomGroups = ['Random String', 'Animals', 'Countries', 'Months'];
  var _useState11 = (0,index_js_.useState)(randomGroups[0]),
    _useState12 = Login_slicedToArray(_useState11, 2),
    idType = _useState12[0],
    setIdType = _useState12[1];
  var _useState13 = (0,index_js_.useState)(storedId || randomString()),
    _useState14 = Login_slicedToArray(_useState13, 2),
    fromUser = _useState14[0],
    setFromUser = _useState14[1];
  var removeAllNonAlphaNumeric = function removeAllNonAlphaNumeric(str) {
    // except hyphen
    return str.replace(/[^a-zA-Z0-9-]/g, '');
  };
  var setNewId = function setNewId() {
    if (idType === 'Random String') {
      setFromUser(randomString());
    } else if (idType === 'Animals') {
      // create list of 6 animals as a hyphen separated string
      var animals = Array.from({
        length: 6
      }, function () {
        return chance.animal();
      }).map(function (a) {
        return a.toLowerCase().replace(/\s/g, '-');
      }).join('-');
      setFromUser(removeAllNonAlphaNumeric(animals));
    } else if (idType === 'Countries') {
      var countries = Array.from({
        length: 6
      }, function () {
        return chance.country({
          full: true
        });
      }).map(function (a) {
        return a.toLowerCase().replace(/\s/g, '-');
      }).join('-');
      setFromUser(removeAllNonAlphaNumeric(countries));
    } else if (idType === 'Months') {
      var months = Array.from({
        length: 6
      }, function () {
        return chance.month();
      }).map(function (a) {
        return a.toLowerCase().replace(/\s/g, '-');
      }).join('-');
      setFromUser(months);
    }
  };
  (0,index_js_.useEffect)(function () {
    setNewId();
  }, [idType]);

  // const storedUsername = compiledProfile.displayName;
  // const storedConnectionId = compiledProfile.connectionId;
  // const storedInAppNotification = compiledProfile.settings?.inAppNotification;
  // const storedBrowserNotification = compiledProfile.settings?.browserNotification;

  // useEffect(() => {
  //   console.log({ storedBlockchain, compiledProfile, profileBlockchain })
  //   if (storedBlockchain.chain.length === 0) {

  //     const newProfileBlocks = [
  //       ...blockBuilders().updateId({ from: fromUser, id: 'username123' }),
  //       ...blockBuilders().updateConnectionId({ from: fromUser, connectionId: fromUser }),
  //       ...blockBuilders().updateDisplayName({ from: fromUser, displayName: 'username123' }),
  //       ...blockBuilders().updateAvatar({ from: fromUser, avatar: '' }),
  //       ...blockBuilders().updateAgreedToTerms({ from: fromUser, agreedToTerms: 'latestTermsAndConditionsVersion' }),
  //       ...blockBuilders().updateInAppNotification({ from: fromUser, inAppNotification: true }),
  //       ...blockBuilders().updateBrowserNotification({ from: fromUser, browserNotification: false }),
  //     ];
  //     profileBlockchain.addBlocks(newProfileBlocks);
  //     const pendingUpdate = profileBlockchain.getUpdate();
  //     console.log({pendingUpdate})

  //     addToBlockchainDispatch({
  //       blocks: pendingUpdate.pendingBlocks,
  //       storage: pendingUpdate.pendingStorage,
  //     });

  //     console.log({
  //       compiledProfile,
  //       pendingUpdate,
  //       newProfileBlocks,
  //       storedBlockchain,
  //     });
  //   }
  // }, []);

  var _useState15 = (0,index_js_.useState)(storedInAppNotification !== null && storedInAppNotification !== void 0 ? storedInAppNotification : true),
    _useState16 = Login_slicedToArray(_useState15, 2),
    appNotifications = _useState16[0],
    setAppNotifications = _useState16[1];
  var _useState17 = (0,index_js_.useState)(storedBrowserNotification !== null && storedBrowserNotification !== void 0 ? storedBrowserNotification : false),
    _useState18 = Login_slicedToArray(_useState17, 2),
    browserNotifications = _useState18[0],
    setBrowserNotifications = _useState18[1];
  var handleAppNotificationChange = function handleAppNotificationChange(event) {
    setAppNotifications(event.target.checked);
  };
  var handleBrowserNotificationChange = function handleBrowserNotificationChange(event) {
    setBrowserNotifications(event.target.checked);
  };
  var inAppNotifications = {
    fullWidth: true,
    inputProps: {
      "aria-label": "Allow in-app notification"
    },
    defaultChecked: appNotifications,
    label: "In-app notifications",
    onChange: handleAppNotificationChange
  };
  var browserNotification = {
    fullWidth: true,
    inputProps: {
      "aria-label": "Allow browser notification"
    },
    defaultChecked: browserNotifications,
    label: "Browser notifications",
    onChange: handleBrowserNotificationChange
  };
  (0,index_js_.useEffect)(function () {
    if (contactId && storedUsername && storedConnectionId !== contactId) {
      navigate("/pods");
      navigate("/contacts");
      navigate("/contact/".concat(contactId));
    }
    if (!contactId && storedUsername && contacts.length > 0) {
      navigate("/pods");
    }
  }, [contactId, storedUsername, contacts]);
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t,
    i18n = _useTranslation.i18n;
  var pageTitle = t("loginPage.pageTitle");
  var handleUsernameChange = function handleUsernameChange(event) {
    setUsername(event.target.value);
  };
  var handleSubmit = function handleSubmit() {
    // // update user name in redux and navigate to the chat page
    // updateUsernameDispatch(username);
    // updateAvatarDispatch(avatarBase64);
    // //get last item from TermsAndConditions
    // updateAgreedToTermsDispatch(latestTermsAndConditionsVersion);

    var newProfileBlocks = [].concat(Login_toConsumableArray((0,profileChain/* blockBuilders */.e)().updateId({
      from: fromUser,
      id: fromUser
    })), Login_toConsumableArray((0,profileChain/* blockBuilders */.e)().updateConnectionId({
      from: fromUser,
      connectionId: fromUser
    })), Login_toConsumableArray((0,profileChain/* blockBuilders */.e)().updateDisplayName({
      from: fromUser,
      displayName: username
    })), Login_toConsumableArray((0,profileChain/* blockBuilders */.e)().updateAvatar({
      from: fromUser,
      avatar: avatarBase64
    })), Login_toConsumableArray((0,profileChain/* blockBuilders */.e)().updateAgreedToTerms({
      from: fromUser,
      agreedToTerms: latestTermsAndConditionsVersion
    })), Login_toConsumableArray((0,profileChain/* blockBuilders */.e)().updateInAppNotification({
      from: fromUser,
      inAppNotification: appNotifications
    })), Login_toConsumableArray((0,profileChain/* blockBuilders */.e)().updateBrowserNotification({
      from: fromUser,
      browserNotification: browserNotifications
    })), Login_toConsumableArray((0,profileChain/* blockBuilders */.e)().updatePeerjsServer({
      from: fromUser,
      peerjsServer: peerjsServer
    })), Login_toConsumableArray((0,profileChain/* blockBuilders */.e)().updateEncryptionSignature({
      from: fromUser,
      encryptionSignature: encryptionSignature
    })));
    addBlocksToProfile(newProfileBlocks);
    // const pendingUpdate = profileBlockchain.getUpdate();

    // addToBlockchainDispatch({
    //   blocks: pendingUpdate.pendingBlocks,
    //   storage: pendingUpdate.pendingStorage,
    // });
  };
  var tacCheckbox = {
    inputProps: {
      "aria-label": "terms and conditions",
      onClick: function onClick(e) {
        e.stopPropagation();
        console.log("checked", e.target.checked);
        setAgreedToTerms(e.target.checked);
      }
    },
    checked: agreedToTerms
  };
  function handleFile(_x) {
    return _handleFile.apply(this, arguments);
  }
  function _handleFile() {
    _handleFile = Login_asyncToGenerator( /*#__PURE__*/Login_regeneratorRuntime().mark(function _callee2(_ref3) {
      var files, f, zip;
      return Login_regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            files = _ref3.target.files;
            f = files[0];
            _context2.prev = 2;
            _context2.next = 5;
            return jszip_min_default().loadAsync(f);
          case 5:
            zip = _context2.sent;
            // Use await here

            zip.forEach( /*#__PURE__*/function () {
              var _ref5 = Login_asyncToGenerator( /*#__PURE__*/Login_regeneratorRuntime().mark(function _callee(relativePath, zipEntry) {
                var content, _JSON$parse, pods, contacts, encryption, userProfile;
                return Login_regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return zip.file(zipEntry.name).async("string");
                    case 2:
                      content = _context.sent;
                      _JSON$parse = JSON.parse(content), pods = _JSON$parse.pods, contacts = _JSON$parse.contacts, encryption = _JSON$parse.encryption, userProfile = _JSON$parse.userProfile;
                      setPodsDispatch(pods);
                      setContactsDispatch(contacts);
                      setEncryptionDispatch(encryption);
                      setUserProfileDispatch(userProfile);
                    case 8:
                    case "end":
                      return _context.stop();
                  }
                }, _callee);
              }));
              return function (_x2, _x3) {
                return _ref5.apply(this, arguments);
              };
            }());
            _context2.next = 12;
            break;
          case 9:
            _context2.prev = 9;
            _context2.t0 = _context2["catch"](2);
            console.error(_context2.t0);
          case 12:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[2, 9]]);
    }));
    return _handleFile.apply(this, arguments);
  }
  var handleAvatar = function handleAvatar(_ref4) {
    var files = _ref4.target.files;
    var f = files[0];
    var img = new Image();
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    img.onload = function () {
      var maxWidthHeight = 500;
      var width = img.width;
      var height = img.height;
      if (width > height) {
        if (width > maxWidthHeight) {
          height *= maxWidthHeight / width;
          width = maxWidthHeight;
        }
      } else {
        if (height > maxWidthHeight) {
          width *= maxWidthHeight / height;
          height = maxWidthHeight;
        }
      }
      canvas.width = width;
      canvas.height = height;
      ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);
      var base64String = canvas.toDataURL("image/jpeg", 1.0);
      setAvatarBase64(base64String);
    };
    img.src = URL.createObjectURL(f);
  };

  //   const [deferredPrompt, setDeferredPrompt] = useState(null);
  //   useEffect(() => {
  //     const handleBeforeInstallPromptEvent = (e) => {
  //         console.log('setting defferedPrompt')
  //         e.preventDefault();
  //         setDeferredPrompt(e);
  //     };
  //     if (!deferredPrompt) window.addEventListener('beforeinstallprompt', handleBeforeInstallPromptEvent);

  //     const bipEvent = new Event('beforeinstallprompt');

  //     // Define the prompt method on the event object
  //     bipEvent.prompt = () => {
  //         return new Promise((resolve) => {
  //             // Simulate user accepting the prompt
  //             resolve({ outcome: 'accepted' });  // or 'dismissed' to simulate user dismissing the prompt
  //         });
  //     };

  //     // Dispatch the custom event to trigger your event handler
  //     window.dispatchEvent(bipEvent);
  //     return () => {
  //         console.log('removing defferedPrompt')
  //         window.removeEventListener('beforeinstallprompt', handleBeforeInstallPromptEvent);
  //     };
  // }, []);

  var _useState19 = (0,index_js_.useState)(null),
    _useState20 = Login_slicedToArray(_useState19, 2),
    activatedNumber = _useState20[0],
    setActivateNumber = _useState20[1];
  var NextButton = /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return setActivateNumber(activatedNumber + 1);
    }
  }, "Next");
  var PrevButton = /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return setActivateNumber(activatedNumber - 1);
    }
  }, "Prev");
  var ref1 = (0,index_js_.useRef)(null);
  var ref2 = (0,index_js_.useRef)(null);
  var ref3 = (0,index_js_.useRef)(null);
  var ref4 = (0,index_js_.useRef)(null);
  var ref5 = (0,index_js_.useRef)(null);
  var ref6 = (0,index_js_.useRef)(null);
  var ref7 = (0,index_js_.useRef)(null);
  var coachList = [
  // {
  //   activate: activatedNumber === 0,
  //   component:
  //     <Typography style={{
  //     color: 'black',
  //   }}>Info and app settings <br />{NextButton} </Typography>,
  //   reference: ref1,
  //   tooltip: { position: 'top' }
  // },
  {
    activate: activatedNumber === 0,
    component: /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
      style: {
        color: "black"
      }
    }, "(Optional) Set profile details like display name and avatar ", /*#__PURE__*/index_js_default().createElement("br", null), NextButton, " "),
    reference: ref2,
    tooltip: {
      position: "top"
    }
  }, {
    activate: activatedNumber === 1,
    component: /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
      style: {
        color: "black"
      }
    }, "(Optional) Some extra app settings if you want to change the default values ", /*#__PURE__*/index_js_default().createElement("br", null), PrevButton, NextButton),
    reference: ref3,
    tooltip: {
      position: "top"
    }
  }, {
    activate: activatedNumber === 2,
    component: /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
      style: {
        color: "black"
      }
    }, "Must accept terms and conditions before using the app", /*#__PURE__*/index_js_default().createElement("br", null), PrevButton, NextButton),
    reference: ref4,
    tooltip: {
      position: "top"
    }
  }, {
    activate: activatedNumber === 3,
    component: /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
      style: {
        color: "black"
      }
    }, "Get started in using the app ", /*#__PURE__*/index_js_default().createElement("br", null), PrevButton, NextButton),
    reference: ref5,
    tooltip: {
      position: "top"
    }
  }, {
    activate: activatedNumber === 4,
    component: /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
      style: {
        color: "black"
      }
    }, "(Optional) Load a profile from a previous backup ", /*#__PURE__*/index_js_default().createElement("br", null), PrevButton, NextButton),
    reference: ref6,
    tooltip: {
      position: "top"
    }
  }];
  var coach = coachList[activatedNumber];
  var isSubmitDisabled = !username || !agreedToTerms;
  var handleCopyConnectionIdToClipboard = function handleCopyConnectionIdToClipboard() {
    navigator.clipboard.writeText("".concat(window.location.origin, "/#/login/").concat(storedConnectionId));
  };
  if (contactId && storedUsername && storedConnectionId === contactId) {
    return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
      headerProps: {
        title: "Share this URL with a peer"
      },
      className: classes.form
    }, /*#__PURE__*/index_js_default().createElement("form", {
      noValidate: true,
      className: classes.form
    }, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
      variant: "outlined",
      margin: "normal",
      required: true,
      fullWidth: true,
      id: "connectionId",
      label: "Share to connect",
      name: "connectionId",
      defaultValue: "".concat(window.location.origin, "/#/login/").concat(storedConnectionId),
      readOnly: true,
      InputProps: {
        endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
          position: "end"
        }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
          "aria-label": "toggle password visibility",
          onClick: handleCopyConnectionIdToClipboard,
          edge: "end"
        }, /*#__PURE__*/index_js_default().createElement(ContentCopy/* default */.A, null)))
      }
    })));
  }

  // the hipain image to use as the default file

  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: pageTitle,
      customButtons: [
      /*#__PURE__*/
      // {
      //   icon: 'help',
      //   onClick: () => setActivateNumber(0)
      // }
      index_js_default().createElement(DocLink, {
        key: "doc-link"
      })],
      menuProps: {
        icon: "more",
        ref: ref1,
        items: [
          // {
          //   text: t("components.menuItems.labs"),
          //   icon: "labs",
          //   subMenuItems: [
          //     {
          //       text: t("podsPage.gram"),
          //       icon: "gram",
          //       onClick: () => navigate("/feed"),
          //     },
          //     {
          //       text: t("podsPage.verse"),
          //       icon: "verse",
          //       onClick: () => navigate("/verse"),
          //     },
          //     {
          //       text: t("podsPage.map"),
          //       icon: "map",
          //       onClick: () => navigate("/map"),
          //     },
          //     {
          //       text: t("podsPage.qr"),
          //       icon: "qr",
          //       onClick: () => navigate("/qr"),
          //     },
          //     {
          //       text: t("podsPage.webrtc"),
          //       icon: "connect",
          //       onClick: () => navigate("/webrtc"),
          //     },
          //     {
          //       text: t("podsPage.hands"),
          //       icon: "hand",
          //       onClick: () => navigate("/hands"),
          //     }
          //   ],
          // },
          // { text: t('components.menuItems.about'), icon: 'info', onClick: () => window.location = 'https://positive-intentions.com' },
          // {
          //   text: t('components.menuItems.options'),
          //   icon: 'settings',
          //   subMenuItems: [
          //     { text: theme.palette.mode === 'dark' ? t('components.menuItems.lightMode') : t('components.menuItems.darkMode'), icon: theme.palette.mode === 'dark' ? 'lightMode' : 'darkMode', onClick: colorMode.toggleColorMode },
          //     !isInstalledPwa ? { text: isFullScreen ? t('components.menuItems.exitFullscreen') : t('components.menuItems.fullscreen') , icon: isFullScreen ? 'fullscreenExit' : 'fullscreen', onClick: () => setIsFullScreen(!isFullScreen) } : null,
          //     !isInstalledPwa ? {
          //       text: t('components.menuItems.install'), icon: 'install', onClick: () => {
          //           sendNotification?.(t('components.menuItems.requestingToInstall'), { variant: 'info' })

          //           if (deferredPrompt) {
          //               deferredPrompt.prompt()
          //                   .then((result) => {
          //                       if (result.outcome === 'accepted') {
          //                           console.log('Installation accepted');
          //                           sendNotification?.(t('components.menuItems.installPossible'), { variant: 'success' })

          //                       } else {
          //                           console.log('Installation dismissed');
          //                           sendNotification?.(t('components.menuItems.installDismissed'), { variant: 'warning' })

          //                       }
          //                   })
          //                   .catch((error) => {
          //                       console.error('Installation prompt error:', error);
          //                       sendNotification?.(t('components.menuItems.installFailed'), { variant: 'warning' })

          //                   });
          //           } else {
          //               console.error('The beforeinstallprompt event has not been fired.');
          //               sendNotification?.(t('components.menuItems.installNotSupported'), { variant: 'warning' })
          //           }
          //       }
          //   } : null,
          //   ]
          // },

          // { text: t('components.menuItems.language'), icon: 'translate', onClick: () => navigate('/privacy'), subMenuItems: [
          //   { text: 'English', onClick: () => i18n.changeLanguage('en') },
          //   { text: 'Spanish', onClick: () => i18n.changeLanguage('es') },
          //   { text: 'Mandarin', onClick: () => i18n.changeLanguage('zh') },
          //   { text: 'Gujrati', onClick: () => i18n.changeLanguage('gu') },
          // ] },
        ]
      }
    }
  }, /*#__PURE__*/index_js_default().createElement(react_coach_mark_dist.CoachMark, coach), /*#__PURE__*/index_js_default().createElement("form", {
    noValidate: true,
    className: classes.form
  }, /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
    src: logo512_namespaceObject,
    style: {
      minHeight: "300px",
      minWidth: "300px",
      margin: "auto"
    }
  }),  true && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    variant: "p",
    gutterBottom: true
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    variant: "body1",
    gutterBottom: true
  }, t("loginPage.featuresInclude"), /*#__PURE__*/index_js_default().createElement("ul", null, /*#__PURE__*/index_js_default().createElement("li", null, t("loginPage.noCookies")), /*#__PURE__*/index_js_default().createElement("li", null, t("loginPage.noRegistration")), /*#__PURE__*/index_js_default().createElement("li", null, t("loginPage.noInstalling")), /*#__PURE__*/index_js_default().createElement("li", null, t("loginPage.groupMessaging")), /*#__PURE__*/index_js_default().createElement("li", null, t("loginPage.textMessaging")), /*#__PURE__*/index_js_default().createElement("li", null, t("loginPage.multimediaMessaging")), /*#__PURE__*/index_js_default().createElement("li", null, t("loginPage.videoCalls")), /*#__PURE__*/index_js_default().createElement("li", null, t("loginPage.dataOwnership")), /*#__PURE__*/index_js_default().createElement("li", null, t("loginPage.screensharing")), /*#__PURE__*/index_js_default().createElement("li", null, t("loginPage.fileTransfer"))), t("loginPage.getStarted"))), /*#__PURE__*/index_js_default().createElement("br", null), storedUsername && contacts.length === 0 ? /*#__PURE__*/index_js_default().createElement("div", {
    className: classes.connect
  }, /*#__PURE__*/index_js_default().createElement(connect_to_peer_ConnectToPeer, {
    open: !contacts.length,
    link: !contacts.length
  })) : /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    ref: ref2,
    expanded: expanded === "profile",
    onChange: handleChange("profile")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, t("loginPage.setProfile"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(SimpleSlider, {
    onSelect: setAvatar
  }), /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
    src: avatarBase64 !== null && avatarBase64 !== void 0 ? avatarBase64 : logo512_namespaceObject,
    style: {
      minHeight: "300px",
      minWidth: "300px",
      margin: "auto"
    }
  }), /*#__PURE__*/index_js_default().createElement("br", null)), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      var _setAvatarRef$current;
      return setAvatarRef === null || setAvatarRef === void 0 || (_setAvatarRef$current = setAvatarRef.current) === null || _setAvatarRef$current === void 0 ? void 0 : _setAvatarRef$current.click();
    }
  }, t("loginPage.setAvatar")), /*#__PURE__*/index_js_default().createElement("input", {
    type: "file",
    name: "picture",
    ref: setAvatarRef,
    className: classes.hidden,
    accept: "image/*",
    onChange: handleAvatar
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    required: true,
    fullWidth: true,
    id: "username",
    label: t("loginPage.displayName"),
    name: "username",
    onChange: handleUsernameChange,
    autoFocus: true,
    value: username,
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: function onClick() {
          return setUsername("".concat(chance.animal()));
        },
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Refresh/* default */.A, null)))
    }
  }), /*#__PURE__*/index_js_default().createElement(signatureCanvas_SignatureCanvas, {
    heading: t("loginPage.cryptoSignature"),
    onChange: handleEncryptionSignatureChange
  }), /*#__PURE__*/index_js_default().createElement(FormControl/* default */.A, {
    fullWidth: true
  }, /*#__PURE__*/index_js_default().createElement(InputLabel/* default */.A, {
    id: "demo-simple-select-label"
  }, "Connection ID Type"), /*#__PURE__*/index_js_default().createElement(Select/* default */.A, {
    labelId: "demo-simple-select-label",
    id: "demo-simple-select",
    value: idType,
    label: "Connection ID Type",
    onChange: function onChange(e) {
      return setIdType(e.target.value);
    }
  }, /*#__PURE__*/index_js_default().createElement(MenuItem/* default */.A, {
    value: 'Random String'
  }, "Random String"), /*#__PURE__*/index_js_default().createElement(MenuItem/* default */.A, {
    value: 'Animals'
  }, "Animals"), /*#__PURE__*/index_js_default().createElement(MenuItem/* default */.A, {
    value: 'Countries'
  }, "Countries"), /*#__PURE__*/index_js_default().createElement(MenuItem/* default */.A, {
    value: 'Months'
  }, "Months"))), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    required: true,
    fullWidth: true,
    id: "username",
    label: t("loginPage.connectionId"),
    name: "username",
    autoFocus: true,
    value: fromUser,
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: function onClick() {
          return setNewId();
        },
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Refresh/* default */.A, null)))
    }
  }))), /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    ref: ref3,
    expanded: expanded === "notifications",
    onChange: handleChange("notifications")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, t("loginPage.setPreference"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(FormGroup/* default */.A, null, /*#__PURE__*/index_js_default().createElement(FormControlLabel/* default */.A, {
    control: /*#__PURE__*/index_js_default().createElement(Switch/* default */.A, inAppNotifications),
    label: t("loginPage.inAppNotification")
  }), /*#__PURE__*/index_js_default().createElement(FormControlLabel/* default */.A, {
    control: /*#__PURE__*/index_js_default().createElement(Switch/* default */.A, browserNotification),
    label: t("loginPage.browserNotification")
  })), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "peerjs-server",
    label: "PeerJS server",
    name: "peerjs-server",
    onChange: handlePeerjsServerChange,
    value: peerjsServer,
    placeholder: "https: 0.peerjs.com",
    autoComplete: "off"
  }))), /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    ref: ref4,
    expanded: expanded === "panel4",
    onChange: handleChange("panel4")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      width: "90%",
      flexShrink: 0
    }
  }, /*#__PURE__*/index_js_default().createElement(Checkbox/* default */.A, tacCheckbox), /*#__PURE__*/index_js_default().createElement("span", {
    style: {
      color: "red"
    }
  }, "*"), t("loginPage.termsAgreement"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return navigate("/terms");
    }
  }, t("loginPage.goToTermsAndConditions"))), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return navigate("/terms/privacy");
    }
  }, t("loginPage.goToPrivacyPolicy"))))), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    ref: ref5,
    type: "button",
    fullWidth: true,
    variant: "contained",
    color: "success",
    disabled: isSubmitDisabled,
    onClick: handleSubmit
  }, t("loginPage.connect")), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    ref: ref6,
    type: "button",
    fullWidth: true,
    variant: "contained",
    color: "primary",
    disabled: !agreedToTerms,
    onClick: function onClick() {
      var _fileRef$current;
      return fileRef === null || fileRef === void 0 || (_fileRef$current = fileRef.current) === null || _fileRef$current === void 0 ? void 0 : _fileRef$current.click();
    }
  }, t("loginPage.loadProfileFromFile")), /*#__PURE__*/index_js_default().createElement("input", {
    type: "file",
    accept: ".zip",
    className: classes.hidden,
    ref: fileRef,
    onChange: handleFile
  }), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement("br", null)))));
}
// EXTERNAL MODULE: ./node_modules/@mui/material/List/List.js + 1 modules
var List = __webpack_require__(49799);
// EXTERNAL MODULE: ./node_modules/@mui/material/ListItem/ListItem.js + 4 modules
var ListItem = __webpack_require__(12794);
// EXTERNAL MODULE: ./node_modules/@mui/material/ListItemText/ListItemText.js
var ListItemText = __webpack_require__(82241);
// EXTERNAL MODULE: ./node_modules/@mui/material/Badge/Badge.js + 3 modules
var Badge = __webpack_require__(93979);
// EXTERNAL MODULE: ./node_modules/@mui/material/ListItemIcon/ListItemIcon.js
var ListItemIcon = __webpack_require__(57873);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ChevronRight.js
var ChevronRight = __webpack_require__(27562);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Mail.js
var Mail = __webpack_require__(1062);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Cloud.js
var Cloud = __webpack_require__(32592);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Storage.js
var Storage = __webpack_require__(19648);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Devices.js
var Devices = __webpack_require__(31378);
// EXTERNAL MODULE: ./node_modules/@sandstreamdev/react-swipeable-list/dist/react-swipeable-list.umd.js
var react_swipeable_list_umd = __webpack_require__(48440);
// EXTERNAL MODULE: ./node_modules/@mui/material/Divider/Divider.js
var Divider = __webpack_require__(71543);
// EXTERNAL MODULE: ./node_modules/@mui/material/Chip/Chip.js + 2 modules
var Chip = __webpack_require__(82022);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Collections.js
var Collections = __webpack_require__(46628);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ViewInAr.js
var ViewInAr = __webpack_require__(68636);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Navigation.js
var Navigation = __webpack_require__(50739);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/SmartToy.js
var SmartToy = __webpack_require__(15926);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Brush.js
var Brush = __webpack_require__(17473);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Groups.js
var Groups = __webpack_require__(77649);
// EXTERNAL MODULE: ./node_modules/@sandstreamdev/react-swipeable-list/dist/styles.css
var styles = __webpack_require__(50647);
;// CONCATENATED MODULE: ./src/components/atomic/molecules/list/List.js
function List_typeof(o) { "@babel/helpers - typeof"; return List_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, List_typeof(o); }
function List_slicedToArray(arr, i) { return List_arrayWithHoles(arr) || List_iterableToArrayLimit(arr, i) || List_unsupportedIterableToArray(arr, i) || List_nonIterableRest(); }
function List_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function List_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return List_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return List_arrayLikeToArray(o, minLen); }
function List_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function List_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function List_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function List_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function List_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? List_ownKeys(Object(t), !0).forEach(function (r) { List_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : List_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function List_defineProperty(obj, key, value) { key = List_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function List_toPropertyKey(t) { var i = List_toPrimitive(t, "string"); return "symbol" == List_typeof(i) ? i : i + ""; }
function List_toPrimitive(t, r) { if ("object" != List_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != List_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


























var List_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    chevron: {
      justifyContent: "right"
    }
  };
});
var StyledBadge = (0,styled/* default */.Ay)(Badge/* default */.A)(function (_ref) {
  var theme = _ref.theme;
  return {
    "& .MuiBadge-badge": {
      boxShadow: "0 0 0 2px ".concat(theme.palette.background.paper),
      "&::after": {
        position: "absolute",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        borderRadius: "50%",
        animation: "ripple 1.2s infinite ease-in-out",
        border: "1px solid currentColor",
        content: '""'
      }
    },
    "&.green .MuiBadge-badge": {
      backgroundColor: "#44b700",
      color: "#44b700"
    },
    "&.amber .MuiBadge-badge": {
      backgroundColor: "#FFA500",
      color: "#FFA500"
    },
    "@keyframes ripple": {
      "0%": {
        transform: "scale(.8)",
        opacity: 1
      },
      "100%": {
        transform: "scale(2.4)",
        opacity: 0
      }
    }
  };
});
var Root = (0,styled/* default */.Ay)("div")(function (_ref2) {
  var theme = _ref2.theme;
  return List_objectSpread(List_objectSpread({
    width: "100%"
  }, theme.typography.body2), {}, {
    "& > :not(style) ~ :not(style)": {
      marginTop: theme.spacing(2)
    }
  });
});
function ListComponent(_ref3) {
  var heading = _ref3.heading,
    list = _ref3.list,
    chevronOverride = _ref3.chevronOverride,
    sections = _ref3.sections;
  var classes = List_useStyles();
  var _React$useState = index_js_default().useState(false),
    _React$useState2 = List_slicedToArray(_React$useState, 2),
    isSwiping = _React$useState2[0],
    setIsSwiping = _React$useState2[1];
  var handleClick = function handleClick(itemOnClick) {
    console.log({
      isSwiping: isSwiping
    });
    if (!isSwiping) {
      itemOnClick();
    }
  };
  var handleStartSwiping = function handleStartSwiping() {
    // console.log({ isSwiping: true })
    // setIsSwiping(true);
  };
  var handleEndSwiping = function handleEndSwiping() {
    console.log({
      isSwiping: isSwiping
    });
    if (isSwiping < 10) {
      console.log("click action");
    }
    setIsSwiping(false);
  };
  return /*#__PURE__*/index_js_default().createElement(Root, null, /*#__PURE__*/index_js_default().createElement(List/* default */.A, null, sections && sections.length > 0 && sections.map(function (section) {
    return /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, !!section.heading && /*#__PURE__*/index_js_default().createElement(Divider/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Chip/* default */.A, {
      label: section.heading
    })), section.list.map(function (item) {
      return /*#__PURE__*/index_js_default().createElement(ListItem/* default */.Ay, {
        button: true,
        key: item.id,
        onClick: item.onClick
      }, /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, null, /*#__PURE__*/index_js_default().createElement(StyledBadge, {
        className: item.isOnline ? "green" : "amber",
        overlap: "circular",
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "right"
        },
        variant: "dot",
        invisible: !item.isOnline && !item.isSomeOnline
      }, !item.isCloud && !item.isGram && !item.isVerse && !item.isMap && !item.isAI && !item.isVinnC && !item.isContacts && /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
        src: item.avatarUrl,
        alt: item.name
      }, item.name ? item.name[0] : "-"), !!item.isCloud && /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Storage/* default */.A, null)), !!item.isGram && /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Collections/* default */.A, null)), !!item.isVerse && /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, null, /*#__PURE__*/index_js_default().createElement(ViewInAr/* default */.A, null)), !!item.isMap && /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Navigation/* default */.A, null)), !!item.isAI && /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, null, /*#__PURE__*/index_js_default().createElement(SmartToy/* default */.A, null)), !!item.isVinnC && /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Brush/* default */.A, null)), !!item.isContacts && /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Groups/* default */.A, null)))), /*#__PURE__*/index_js_default().createElement(ListItemText/* default */.A, {
        primary: item.name,
        primaryTypographyProps: {
          style: {
            whiteSpace: "nowrap",
            overflow: "hidden",
            textOverflow: "ellipsis"
          }
        }
      }), !!item.isClone && /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, {
        className: classes.chevron
      }, /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
        color: "primary",
        badgeContent: 0
      }, /*#__PURE__*/index_js_default().createElement(Devices/* default */.A, null))), !!item.isCloud && /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, {
        className: classes.chevron
      }, /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
        color: "primary",
        badgeContent: item.unreadCount
      }, /*#__PURE__*/index_js_default().createElement(Cloud/* default */.A, null))), !item.isCloud && item.unreadCount > 0 && /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, {
        className: classes.chevron
      }, /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
        color: "primary",
        badgeContent: item.unreadCount
      }, /*#__PURE__*/index_js_default().createElement(Mail/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, {
        className: classes.chevron,
        button: true,
        onClick: item.onClick
      }, chevronOverride ? chevronOverride : /*#__PURE__*/index_js_default().createElement(ChevronRight/* default */.A, null)));
    }));
  }), (!sections || sections.length === 0) && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, !!heading && list.length > 0 && /*#__PURE__*/index_js_default().createElement(Divider/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Chip/* default */.A, {
    label: heading
  })), list.map(function (item) {
    var handleEndSwipingWithClick = function handleEndSwipingWithClick() {
      console.log({
        isSwiping: isSwiping
      });
      if (isSwiping < 10) {
        console.log("click action");
        item.onClick();
      }
      setIsSwiping(false);
    };
    return (
      /*#__PURE__*/
      // <SwipeableListItem
      //     swipeLeft={{
      //         content: <DoubleArrowIcon style={{ height: '30px', marginRight: 20 }} />,
      //         action: () => handleClick(item.onClick)
      //     }}
      //     swipeRight={{
      //         content: <DownloadIcon style={{ height: '30px', marginLeft: 20 }} />,
      //         action: () => console.info('swipe action triggered')
      //     }}
      //     // onSwipeProgress={setIsSwiping}
      //     // onSwipeStart={handleStartSwiping}
      //     // onSwipeEnd={handleEndSwipingWithClick}
      // >
      index_js_default().createElement(ListItem/* default */.Ay, {
        button: true,
        key: item.id,
        onClick: item.onClick
      }, /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, null, /*#__PURE__*/index_js_default().createElement(StyledBadge, {
        className: item.isOnline ? "green" : "amber",
        overlap: "circular",
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "right"
        },
        variant: "dot",
        invisible: !item.isOnline && !item.isSomeOnline
      }, /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
        src: item.avatarUrl,
        alt: item.name
      }, item.name ? item.name[0] : "-"))), /*#__PURE__*/index_js_default().createElement(ListItemText/* default */.A, {
        primary: item.name,
        primaryTypographyProps: {
          style: {
            whiteSpace: "nowrap",
            overflow: "hidden",
            textOverflow: "ellipsis"
          }
        }
      }), !!item.isClone && /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, {
        className: classes.chevron
      }, /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
        color: "primary",
        badgeContent: 0
      }, /*#__PURE__*/index_js_default().createElement(Devices/* default */.A, null))), item.unreadCount > 0 && /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, {
        className: classes.chevron
      }, /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
        color: "primary",
        badgeContent: item.unreadCount
      }, /*#__PURE__*/index_js_default().createElement(Mail/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, {
        className: classes.chevron,
        button: true,
        onClick: item.onClick
      }, chevronOverride ? chevronOverride : /*#__PURE__*/index_js_default().createElement(ChevronRight/* default */.A, null)))
      // </SwipeableListItem>
    );
  }),  false && /*#__PURE__*/0,  false && /*#__PURE__*/0)));
}
// EXTERNAL MODULE: ./src/components/blockchain/chains/podChain.js
var podChain = __webpack_require__(53288);
// EXTERNAL MODULE: ./node_modules/i18next/dist/esm/i18next.js
var i18next = __webpack_require__(72635);
;// CONCATENATED MODULE: ./src/components/utils/analytics.js
function analytics_typeof(o) { "@babel/helpers - typeof"; return analytics_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, analytics_typeof(o); }
function analytics_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ analytics_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == analytics_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(analytics_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function analytics_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function analytics_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { analytics_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { analytics_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var logToNLevelAnalytics = /*#__PURE__*/function () {
  var _ref = analytics_asyncToGenerator( /*#__PURE__*/analytics_regeneratorRuntime().mark(function _callee(action) {
    var url, propKey, accountId, timestamp, area, data;
    return analytics_regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          url = "https://api.nlevelsoftware.com/analytics";
          propKey = "0ynKMoKXFY2GuI2oIz9rSaBVWbX0NIak7fsV7wcJ";
          accountId = "o16efmpht7"; // Replace with your actual account ID
          timestamp = Math.floor(Date.now() / 1000); // Current Unix timestamp
          area = action !== null && action !== void 0 ? action : "https://chat-staging.positive-intentions.com"; // Replace with the URL of the webpage
          data = {
            accountId: accountId,
            eventCategory: "pageview",
            timestamp: timestamp,
            area: area
          };
          _context.prev = 6;
          _context.next = 9;
          return fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "x-api-key": propKey
            },
            body: JSON.stringify(data)
          });
        case 9:
          _context.next = 13;
          break;
        case 11:
          _context.prev = 11;
          _context.t0 = _context["catch"](6);
        case 13:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[6, 11]]);
  }));
  return function logToNLevelAnalytics(_x) {
    return _ref.apply(this, arguments);
  };
}();
;// CONCATENATED MODULE: ./src/components/pages/pods/Pods.js
function Pods_typeof(o) { "@babel/helpers - typeof"; return Pods_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Pods_typeof(o); }
function Pods_slicedToArray(arr, i) { return Pods_arrayWithHoles(arr) || Pods_iterableToArrayLimit(arr, i) || Pods_unsupportedIterableToArray(arr, i) || Pods_nonIterableRest(); }
function Pods_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Pods_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Pods_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Pods_arrayLikeToArray(o, minLen); }
function Pods_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Pods_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Pods_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Pods_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function Pods_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? Pods_ownKeys(Object(t), !0).forEach(function (r) { Pods_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : Pods_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function Pods_defineProperty(obj, key, value) { key = Pods_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Pods_toPropertyKey(t) { var i = Pods_toPrimitive(t, "string"); return "symbol" == Pods_typeof(i) ? i : i + ""; }
function Pods_toPrimitive(t, r) { if ("object" != Pods_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Pods_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

























var Pods_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    root: {
      flexGrow: 1
    },
    appBar: {
      height: theme.spacing(8)
    },
    form: {
      padding: theme.spacing(3)
    },
    title: {
      fontWeight: "bold",
      textAlign: "left",
      display: "flex",
      alignItems: "center",
      height: "100%",
      padding: "0 ".concat(theme.spacing(3))
    },
    img: {
      width: "100%"
    }
  };
});
function GroupsListPage() {
  var classes = Pods_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var storedPods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var storedContacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  });
  var sendNotification = (0,notificationManager/* useNotification */.hN)();
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain
    }),
    userProfile = _useBlockchain.compiledBlockchain;
  var storedPersonalId = userProfile.connectionId;
  // const storedPersonalId = useSelector((state) => state.userProfile.id);
  var _usePeer = (0,usePeer/* default */.A)(),
    activeConnections = _usePeer.activeConnections;
  var _useBlockchain2 = (0,Blockchain/* useBlockchain */.o)({
      compiler: podChain/* compiler */.cx,
      blockchains: storedPods.map(function (pod) {
        return pod.blockchain;
      })
    }),
    compiledPods = _useBlockchain2.compiledBlockchains;
  var podsList = compiledPods.filter(function (pod) {
    return pod && pod.id;
  }).map(function (pod) {
    var _storedPods$find, _ref, _pod$users, _storedContacts$find$, _storedContacts$find, _ref2, _pod$users3, _storedContacts$find$2, _storedContacts$find2;
    // get unreadCount from redux
    var unreadCount = ((_storedPods$find = storedPods.find(function (p) {
      return p.id === pod.id;
    })) === null || _storedPods$find === void 0 ? void 0 : _storedPods$find.unreadCount) || 0;
    return Pods_objectSpread(Pods_objectSpread({}, pod), {}, {
      onClick: function onClick() {
        return navigate("/pod/".concat(pod.id));
      },
      name: ((_ref = ((_pod$users = pod.users) === null || _pod$users === void 0 ? void 0 : _pod$users.length) > 2) !== null && _ref !== void 0 ? _ref : false) ? pod.name : (_storedContacts$find$ = (_storedContacts$find = storedContacts.find(function (contact) {
        var _pod$users2;
        return contact.connectionId === ((_pod$users2 = pod.users) === null || _pod$users2 === void 0 ? void 0 : _pod$users2.filter(function (memberId) {
          return memberId !== storedPersonalId;
        })[0]);
      })) === null || _storedContacts$find === void 0 ? void 0 : _storedContacts$find.displayName) !== null && _storedContacts$find$ !== void 0 ? _storedContacts$find$ : "Please wait",
      avatarUrl: ((_ref2 = ((_pod$users3 = pod.users) === null || _pod$users3 === void 0 ? void 0 : _pod$users3.length) > 2) !== null && _ref2 !== void 0 ? _ref2 : false) ? pod.avatar : (_storedContacts$find$2 = (_storedContacts$find2 = storedContacts.find(function (contact) {
        var _pod$users4;
        return contact.connectionId === ((_pod$users4 = pod.users) === null || _pod$users4 === void 0 ? void 0 : _pod$users4.filter(function (memberId) {
          return memberId !== storedPersonalId;
        })[0]);
      })) === null || _storedContacts$find2 === void 0 ? void 0 : _storedContacts$find2.avatar) !== null && _storedContacts$find$2 !== void 0 ? _storedContacts$find$2 : "-",
      isOnline: pod.users.filter(function (c) {
        return c !== storedPersonalId;
      }).every(function (c) {
        return activeConnections.includes(c);
      }),
      isSomeOnline: pod.users.filter(function (c) {
        return c !== storedPersonalId;
      }).some(function (c) {
        return activeConnections.includes(c);
      }),
      unreadCount: unreadCount,
      isClone: pod.clone
    });
  });
  var sections = [{
    heading: (0,i18next.t)("podsPage.social"),
    list: podsList.filter(function (pod) {
      return !pod.isClone;
    })
  }, {
    heading: (0,i18next.t)("podsPage.devices"),
    list: podsList.filter(function (pod) {
      return pod.isClone;
    })
  }, {
    heading: (0,i18next.t)("podsPage.cloud"),
    list: [{
      onClick: function onClick() {
        return navigate("/contacts");
      },
      name: (0,i18next.t)("contactsPage.pageTitle"),
      avatarUrl: "-",
      // isOnline: pod.users
      //   .filter(c => c !== storedPersonalId)
      //   .every(c => activeConnections.includes(c)),
      // isSomeOnline: pod.users
      //   .filter(c => c !== storedPersonalId)
      //   .some(c => activeConnections.includes(c)),
      // unreadCount,
      // unreadCount: podsList.filter(pod => pod.isClone)
      //   .filter(pod => pod.isSomeOnline).length,
      isContacts: true
    }
    // {
    //   onClick: () => navigate("/feed"),
    //   name: t("podsPage.gram"),
    //   avatarUrl: "-",
    //   // isOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .every(c => activeConnections.includes(c)),
    //   // isSomeOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .some(c => activeConnections.includes(c)),
    //   // unreadCount,
    //   // unreadCount: podsList.filter(pod => pod.isClone)
    //   //   .filter(pod => pod.isSomeOnline).length,
    //   isGram: true,
    // },
    // {
    //   onClick: () => navigate("/verse"), // sendNotification(t('podsPage.commingSoon'), { variant: 'info' }),
    //   name: t("podsPage.verse"),
    //   avatarUrl: "-",
    //   // isOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .every(c => activeConnections.includes(c)),
    //   // isSomeOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .some(c => activeConnections.includes(c)),
    //   // unreadCount,
    //   unreadCount: podsList
    //     .filter((pod) => pod.isClone)
    //     .filter((pod) => pod.isSomeOnline).length,
    //   isVerse: true,
    // },
    // {
    //   onClick: () => navigate('/map'), // sendNotification(t('podsPage.commingSoon'), { variant: 'info' }),
    //   name: t('podsPage.map'),
    //   avatarUrl: "-",
    //   // isOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .every(c => activeConnections.includes(c)),
    //   // isSomeOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .some(c => activeConnections.includes(c)),
    //   // unreadCount,
    //   unreadCount: podsList.filter(pod => pod.isClone)
    //     .filter(pod => pod.isSomeOnline).length,
    //   isMap: true,
    // },
    // {
    //   onClick: () => sendNotification(t('podsPage.commingSoon'), { variant: 'info' }),
    //   name: t('podsPage.ai'),
    //   avatarUrl: "-",
    //   // isOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .every(c => activeConnections.includes(c)),
    //   // isSomeOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .some(c => activeConnections.includes(c)),
    //   // unreadCount,
    //   unreadCount: podsList.filter(pod => pod.isClone)
    //     .filter(pod => pod.isSomeOnline).length,
    //   isAI: true,
    // },
    // {
    //   onClick: () => sendNotification(t('podsPage.commingSoon'), { variant: 'info' }),
    //   name: t('podsPage.vinnc'),
    //   avatarUrl: "-",
    //   // isOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .every(c => activeConnections.includes(c)),
    //   // isSomeOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .some(c => activeConnections.includes(c)),
    //   // unreadCount,
    //   unreadCount: podsList.filter(pod => pod.isClone)
    //     .filter(pod => pod.isSomeOnline).length,
    //   isVinnC: true,
    // },
    // {
    //   onClick: () => sendNotification(t('podsPage.commingSoon'), { variant: 'info' }),
    //   name: t('podsPage.storage'),
    //   avatarUrl: "-",
    //   // isOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .every(c => activeConnections.includes(c)),
    //   // isSomeOnline: pod.users
    //   //   .filter(c => c !== storedPersonalId)
    //   //   .some(c => activeConnections.includes(c)),
    //   // unreadCount,
    //   unreadCount: podsList.filter(pod => pod.isClone)
    //     .filter(pod => pod.isSomeOnline).length,
    //   isCloud: true,
    // }
    ]
  }].filter(function (s) {
    return s.list.length > 0;
  });
  return /*#__PURE__*/index_js_default().createElement(ListComponent, {
    heading: "Social",
    list: podsList,
    sections: sections
  });
}
function Pods() {
  var _compiledProfile$sett;
  var classes = Pods_useStyles();
  var theme = (0,useTheme/* default */.A)();
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var colorMode = index_js_default().useContext(ColorModeContext);
  var _useState = (0,index_js_.useState)(null),
    _useState2 = Pods_slicedToArray(_useState, 2),
    activatedNumber = _useState2[0],
    setActivateNumber = _useState2[1];
  var NextButton = /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return setActivateNumber(activatedNumber + 1);
    }
  }, "Next");
  var PrevButton = /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return setActivateNumber(activatedNumber - 1);
    }
  }, "Prev");
  var ref1 = (0,index_js_.useRef)(null);
  var ref2 = (0,index_js_.useRef)(null);
  var coachList = [
  // {
  //   activate: true,
  //   component:
  //     <Typography style={{
  //     color: 'black',
  //   }}>Info and app settings <br />{NextButton} </Typography>,
  //   reference: ref1,
  //   tooltip: { position: 'bottom' }
  // },
  {
    activate: true,
    component: /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
      style: {
        color: "black"
      }
    }, "Add a new contact to get started ", /*#__PURE__*/index_js_default().createElement("br", null), NextButton, " "),
    reference: ref2,
    tooltip: {
      position: "bottom"
    }
  }];
  var coach = coachList[activatedNumber];
  (0,index_js_.useEffect)(function () {
    logToNLevelAnalytics("podsPageLoaded");
  }, []);

  // make it so the form submits and updates the username in redux and navigates to the conversations page
  // const [username, setUsername] = useState("");
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var sendNotification = (0,notificationManager/* useNotification */.hN)();

  // const storedInAppNotification = useSelector(state => state.userProfile.inAppNotification);
  // const storedBrowserNotification = useSelector(state => state.userProfile.browserNotification);

  var storedPods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var storedBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var profileBlockchain = (0,index_js_.useMemo)(function () {
    return new Blockchain/* default */.A({
      compiler: profileChain/* compiler */.c,
      chain: storedBlockchain.chain.filter(function (b) {
        return !!b;
      }) || [],
      storage: storedBlockchain.storage || {}
    });
  }, [storedBlockchain.chain, storedBlockchain.storage]);
  var compiledProfile = (0,index_js_.useMemo)(function () {
    return profileBlockchain.compile();
  }, [profileBlockchain]);
  // const storedInAppNotification = compiledProfile.settings.inAppNotification;
  var storedBrowserNotification = (_compiledProfile$sett = compiledProfile.settings) === null || _compiledProfile$sett === void 0 ? void 0 : _compiledProfile$sett.browserNotification;

  // const dispatch = useDispatch();
  // const updateUsernameDispatch = (username) => dispatch(updateUsername(username));

  // const handleUsernameChange = (event) => {
  //   setUsername(event.target.value);
  // };

  // const isSubmitDisabled = !username;

  (0,index_js_.useEffect)(function () {
    if (storedBrowserNotification) {
      if (Notification.permission === "granted") return;
      if (Notification.permission !== "denied" || Notification.permission === "default") {
        Notification.requestPermission(function (permission) {
          // If the user accepts, let's create a notification
          if (permission === "granted") {
            sendNotification("👍 Notification permission granted ", {
              variant: "success"
            });
          }
        });
      }
    }
  }, []);
  (0,index_js_.useEffect)(function () {
    if (storedPods.length === 0) {
      navigate("/contacts");
    }
  }, [storedPods.length]);
  var isInstalledPwa = (0,index_js_.useMemo)(function () {
    return window.matchMedia("(display-mode: standalone)").matches || window.navigator.standalone || document.referrer.includes("android-app://");
  }, []);

  //   const [deferredPrompt, setDeferredPrompt] = useState(null);
  //   useEffect(() => {
  //     const handleBeforeInstallPromptEvent = (e) => {
  //         console.log('setting defferedPrompt')
  //         e.preventDefault();
  //         setDeferredPrompt(e);
  //     };
  //     window.addEventListener('beforeinstallprompt', handleBeforeInstallPromptEvent);

  //     const bipEvent = new Event('beforeinstallprompt');

  //     // Define the prompt method on the event object
  //     bipEvent.prompt = () => {
  //         return new Promise((resolve) => {
  //             // Simulate user accepting the prompt
  //             resolve({ outcome: 'accepted' });  // or 'dismissed' to simulate user dismissing the prompt
  //         });
  //     };

  //     // Dispatch the custom event to trigger your event handler
  //     window.dispatchEvent(bipEvent);
  //     return () => {
  //         window.removeEventListener('beforeinstallprompt', handleBeforeInstallPromptEvent);
  //     };
  // }, []);

  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: t("podsPage.pageTitle"),
      // backButton: true,
      // avatarProps: {
      //   src: "https://source.unsplash.com/random/400x200?login",
      //   alt: "random"
      // },
      customButtons: [
      /*#__PURE__*/
      // {
      //   icon: "help",
      //   onClick: () => setActivateNumber(0),
      // },
      index_js_default().createElement(DocLink, {
        key: "docs",
        docLink: "https://positive-intentions.com/docs/basics/pods"
      })],
      menuProps: {
        icon: "more",
        ref: ref1,
        items: [{
          text: t("components.menuItems.profile"),
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }
        //   { text: theme.palette.mode === 'dark' ? 'Light Mode' : 'Dark Mode', icon: theme.palette.mode === 'dark' ? 'lightMode' : 'darkMode', onClick: colorMode.toggleColorMode },
        //   !isInstalledPwa ? {
        //     text: 'Install App', icon: 'install', onClick: () => {
        //         sendNotification?.('Requesting to install.', { variant: 'info' })

        //         if (deferredPrompt) {
        //             deferredPrompt.prompt()
        //                 .then((result) => {
        //                     if (result.outcome === 'accepted') {
        //                         console.log('Installation accepted');
        //                         sendNotification?.('👍 Install possible. Try from your browser settings.', { variant: 'success' })

        //                     } else {
        //                         console.log('Installation dismissed');
        //                         sendNotification?.('👎 Autoinstall dismissed. You can install through your browser.', { variant: 'warning' })

        //                     }
        //                 })
        //                 .catch((error) => {
        //                     console.error('Installation prompt error:', error);
        //                     sendNotification?.('👎 Autoinstall failed. You might be able to install through your browser.', { variant: 'warning' })

        //                 });
        //         } else {
        //             console.error('The beforeinstallprompt event has not been fired.');
        //             sendNotification?.('👎 Autoinstall failed. You might be able to install through your browser.', { variant: 'warning' })
        //         }
        //     }
        // } : null,
        //   // { text: 'Language', icon: 'translate', onClick: () => navigate('/privacy'), subMenuItems: [
        //   //   { text: 'English', onClick: () => navigate('/privacy') },
        //   //   { text: 'Spanish', onClick: () => navigate('/privacy') },
        //   // ] },
        //   { text: 'Terms', icon: 'document', onClick: () => navigate('/terms') },
        //   { text: 'About', icon: 'info', onClick: () => window.location = 'https://positive-intentions.com' },
        //   // { text: 'throw', icon: 'info', onClick: () => {
        //   //   const myArrowFunction = () => {
        //   //     throw new Error('This is an error message');
        //   //   };

        //   //   myArrowFunction();
        //   // }},
        ].filter(function (i) {
          return !!i;
        })
      }
    }
    // fabProps={{
    //   icon: "add",
    //   onClick: () => {
    //     navigate('/contacts');
    //   }
    // }}
  }, /*#__PURE__*/index_js_default().createElement(react_coach_mark_dist.CoachMark, coach), /*#__PURE__*/index_js_default().createElement("div", {
    ref: ref2
  }, /*#__PURE__*/index_js_default().createElement(GroupsListPage, null)));
}
// EXTERNAL MODULE: ./node_modules/@mui/material/AppBar/AppBar.js + 1 modules
var AppBar = __webpack_require__(89828);
// EXTERNAL MODULE: ./node_modules/@mui/material/OutlinedInput/OutlinedInput.js + 2 modules
var OutlinedInput = __webpack_require__(6757);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Send.js
var Send = __webpack_require__(40443);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/AttachFile.js
var AttachFile = __webpack_require__(40530);
// EXTERNAL MODULE: ./node_modules/@mui/material/Toolbar/Toolbar.js + 1 modules
var Toolbar = __webpack_require__(8532);
// EXTERNAL MODULE: ./node_modules/@mui/material/Container/Container.js + 1 modules
var Container = __webpack_require__(97834);
// EXTERNAL MODULE: ./src/components/atomic/molecules/conversation/Conversation.js + 1 modules
var Conversation = __webpack_require__(61545);
// EXTERNAL MODULE: ./src/components/atomic/atom/message/Message.js + 3 modules
var Message = __webpack_require__(69178);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Image.js
var icons_material_Image = __webpack_require__(55072);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Place.js
var Place = __webpack_require__(76298);
// EXTERNAL MODULE: ./src/components/utils/calculateSha256.js
var calculateSha256 = __webpack_require__(59701);
// EXTERNAL MODULE: ./src/components/redux/slices/storageSlice.js
var storageSlice = __webpack_require__(42040);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Mic.js
var Mic = __webpack_require__(2250);
;// CONCATENATED MODULE: ./src/components/atomic/atom/voiceRecorder/VoiceRecorder.js
function VoiceRecorder_slicedToArray(arr, i) { return VoiceRecorder_arrayWithHoles(arr) || VoiceRecorder_iterableToArrayLimit(arr, i) || VoiceRecorder_unsupportedIterableToArray(arr, i) || VoiceRecorder_nonIterableRest(); }
function VoiceRecorder_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function VoiceRecorder_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return VoiceRecorder_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return VoiceRecorder_arrayLikeToArray(o, minLen); }
function VoiceRecorder_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function VoiceRecorder_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function VoiceRecorder_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


var VoiceRecorderButton = function VoiceRecorderButton(_ref) {
  var onVoiceRecording = _ref.onVoiceRecording;
  var _useState = (0,index_js_.useState)(false),
    _useState2 = VoiceRecorder_slicedToArray(_useState, 2),
    recording = _useState2[0],
    setRecording = _useState2[1];
  var _useState3 = (0,index_js_.useState)(null),
    _useState4 = VoiceRecorder_slicedToArray(_useState3, 2),
    mediaRecorder = _useState4[0],
    setMediaRecorder = _useState4[1];
  var _useState5 = (0,index_js_.useState)(null),
    _useState6 = VoiceRecorder_slicedToArray(_useState5, 2),
    audioUrl = _useState6[0],
    setAudioUrl = _useState6[1];
  var audioRef = (0,index_js_.useRef)();
  var startRecording = function startRecording() {
    navigator.mediaDevices.getUserMedia({
      audio: true
    }).then(function (stream) {
      var recorder = new MediaRecorder(stream);
      setMediaRecorder(recorder);
      recorder.start();
      recorder.ondataavailable = function (e) {
        var reader = new FileReader();
        reader.onloadend = function () {
          var base64AudioMessage = reader.result;
          setAudioUrl(base64AudioMessage);
        };
        reader.readAsDataURL(e.data);
      };
      setRecording(true);
    });
  };
  var stopRecording = function stopRecording() {
    if (mediaRecorder) {
      mediaRecorder.stop();
      setRecording(false);
    }
  };
  var playRecording = function playRecording() {
    if (audioRef.current) {
      audioRef.current.play();
    }
  };
  return /*#__PURE__*/index_js_default().createElement("div", null, audioUrl && /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement("audio", {
    ref: audioRef,
    src: audioUrl,
    controls: true,
    style: {
      width: "100%"
    }
  })), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: recording ? "error" : "primary",
    onClick: recording ? stopRecording : startRecording,
    fullWidth: true
  }, recording ? "Stop Recording" : "New Recording"), audioUrl && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "success",
    onClick: function onClick() {
      return onVoiceRecording(audioUrl) && setAudioUrl(null);
    },
    fullWidth: true
  }, "send")));
};
/* harmony default export */ const VoiceRecorder = (VoiceRecorderButton);
;// CONCATENATED MODULE: ./src/components/pages/pod/Pod.js
function Pod_typeof(o) { "@babel/helpers - typeof"; return Pod_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Pod_typeof(o); }
function Pod_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function Pod_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? Pod_ownKeys(Object(t), !0).forEach(function (r) { Pod_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : Pod_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function Pod_defineProperty(obj, key, value) { key = Pod_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Pod_toPropertyKey(t) { var i = Pod_toPrimitive(t, "string"); return "symbol" == Pod_typeof(i) ? i : i + ""; }
function Pod_toPrimitive(t, r) { if ("object" != Pod_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Pod_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Pod_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Pod_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Pod_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Pod_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function Pod_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function Pod_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Pod_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Pod_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function Pod_toConsumableArray(arr) { return Pod_arrayWithoutHoles(arr) || Pod_iterableToArray(arr) || Pod_unsupportedIterableToArray(arr) || Pod_nonIterableSpread(); }
function Pod_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Pod_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Pod_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Pod_arrayLikeToArray(arr); }
function Pod_slicedToArray(arr, i) { return Pod_arrayWithHoles(arr) || Pod_iterableToArrayLimit(arr, i) || Pod_unsupportedIterableToArray(arr, i) || Pod_nonIterableRest(); }
function Pod_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Pod_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Pod_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Pod_arrayLikeToArray(o, minLen); }
function Pod_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Pod_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Pod_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Pod_extends() { Pod_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return Pod_extends.apply(this, arguments); }
// import React, { useEffect, useState } from "react";
// // import {
// //     Avatar,
// //     Conversation,
// //     ConversationHeader,
// //     ConversationList,
// //     InfoButton,
// //     MainContainer,
// //     MessageList,
// //     Search,
// //     Sidebar,
// //     TypingIndicator,
// //     VideoCallButton,
// //     VoiceCallButton
// // } from "@chatscope/chat-ui-kit-react";
// // import { Message, MessageInput, ChatContainer, MessageSeparator, MessageSeparator } from "@chatscope/chat-ui-kit-react";

// //import all @chatscope/chat-ui-kit-react" dependencies in multiline
// import {
//   Avatar,
//   Conversation,
//   ConversationHeader,
//   ConversationList,
//   InfoButton,
//   MainContainer,
//   MessageList,
//   // Search,
//   Sidebar,
//   TypingIndicator,
//   VideoCallButton,
//   VoiceCallButton,
//   Message,
//   MessageInput,
//   ChatContainer,
//   MessageSeparator,
//   ExpansionPanel,
//   EllipsisButton
// } from "@chatscope/chat-ui-kit-react";

// import lillyIco from './logo192.png'
// import joeIco from './logo192.png'
// import emilyIco from './logo192.png'
// import kaiIco from './logo192.png'
// import akaneIco from './logo192.png'
// import eliotIco from './logo192.png'
// import zoeIco from './logo192.png'
// import patrikIco from './logo192.png'
// import { useNavigate, useParams } from "react-router-dom";
// import { useSelector } from 'react-redux'
// import usePeer from "../../p2p/usePeer";
// import { createConversation } from "../../redux/slices/podsSlice";
// import AppHeader from "../../atomic/molecules/app-header/AppHeader";
// import { styled, alpha } from '@mui/material/styles';
// import AppBar from '@mui/material/AppBar';
// import Box from '@mui/material/Box';
// import Toolbar from '@mui/material/Toolbar';
// import IconButton from '@mui/material/IconButton';
// import Typography from '@mui/material/Typography';
// import InputBase from '@mui/material/InputBase';
// import Badge from '@mui/material/Badge';
// import MenuItem from '@mui/material/MenuItem';
// import Menu from '@mui/material/Menu';
// import MenuIcon from '@mui/icons-material/Menu';
// import SearchIcon from '@mui/icons-material/Search';
// import AccountCircle from '@mui/icons-material/AccountCircle';
// import MailIcon from '@mui/icons-material/Mail';
// import NotificationsIcon from '@mui/icons-material/Notifications';
// import MoreIcon from '@mui/icons-material/MoreVert';
// import Container from '@mui/material/Container';
// import TextField from '@mui/material/TextField';
// import Button from '@mui/material/Button';

// const Search = styled('div')(({ theme }) => ({
//   position: 'relative',
//   borderRadius: theme.shape.borderRadius,
//   backgroundColor: alpha(theme.palette.common.white, 0.15),
//   '&:hover': {
//     backgroundColor: alpha(theme.palette.common.white, 0.25),
//   },
//   marginRight: theme.spacing(2),
//   marginLeft: 0,
//   width: '100%',
//   [theme.breakpoints.up('sm')]: {
//     marginLeft: theme.spacing(3),
//     width: 'auto',
//   },
// }));

// const SearchIconWrapper = styled('div')(({ theme }) => ({
//   padding: theme.spacing(0, 2),
//   height: '100%',
//   position: 'absolute',
//   pointerEvents: 'none',
//   display: 'flex',
//   alignItems: 'center',
//   justifyContent: 'center',
// }));

// const StyledInputBase = styled(InputBase)(({ theme }) => ({
//   color: 'inherit',
//   '& .MuiInputBase-input': {
//     padding: theme.spacing(1, 1, 1, 0),
//     // vertical padding + font size from searchIcon
//     paddingLeft: `calc(1em + ${theme.spacing(4)})`,
//     transition: theme.transitions.create('width'),
//     width: '100%',
//     [theme.breakpoints.up('md')]: {
//       width: '20ch',
//     },
//   },
// }));

// export default () => {
//   const [messageInputValue, setMessageInputValue] = useState("");
//   const [toggleInfo, setToggleInfo] = useState(false);
//   const navigate = useNavigate();
//   const { conversationId } = useParams();
//   const conversation = useSelector((state) => state.conversations.find((c) => {
//     return c.id == conversationId
//   }));
//   const contact = useSelector((state) => state.contacts.contacts.find((c) => c.id === conversationId));

//   const { sendMessage } = usePeer({ peerId: conversationId });

//   const [anchorEl, setAnchorEl] = React.useState(null);
//   const [mobileMoreAnchorEl, setMobileMoreAnchorEl] =
//     React.useState(null);

//   const isMenuOpen = Boolean(anchorEl);
//   const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);

//   const handleProfileMenuOpen = (event) => {
//     setAnchorEl(event.currentTarget);
//   };

//   const handleMobileMenuClose = () => {
//     setMobileMoreAnchorEl(null);
//   };

//   const handleMenuClose = () => {
//     setAnchorEl(null);
//     handleMobileMenuClose();
//   };

//   const handleMobileMenuOpen = (event) => {
//     setMobileMoreAnchorEl(event.currentTarget);
//   };

//   const menuId = 'primary-search-account-menu';
//   const renderMenu = (
//     <Menu
//       anchorEl={anchorEl}
//       anchorOrigin={{
//         vertical: 'top',
//         horizontal: 'right',
//       }}
//       id={menuId}
//       keepMounted
//       transformOrigin={{
//         vertical: 'top',
//         horizontal: 'right',
//       }}
//       open={isMenuOpen}
//       onClose={handleMenuClose}
//     >
//       <MenuItem onClick={handleMenuClose}>Profile</MenuItem>
//       <MenuItem onClick={handleMenuClose}>My account</MenuItem>
//     </Menu>
//   );

//   const mobileMenuId = 'primary-search-account-menu-mobile';
//   const renderMobileMenu = (
//     <Menu
//       anchorEl={mobileMoreAnchorEl}
//       anchorOrigin={{
//         vertical: 'top',
//         horizontal: 'right',
//       }}
//       id={mobileMenuId}
//       keepMounted
//       transformOrigin={{
//         vertical: 'top',
//         horizontal: 'right',
//       }}
//       open={isMobileMenuOpen}
//       onClose={handleMobileMenuClose}
//     >
//       <MenuItem>
//         <IconButton size="large" aria-label="show 4 new mails" color="inherit">
//           <Badge badgeContent={4} color="error">
//             <MailIcon />
//           </Badge>
//         </IconButton>
//         <p>Messages</p>
//       </MenuItem>
//       <MenuItem>
//         <IconButton
//           size="large"
//           aria-label="show 17 new notifications"
//           color="inherit"
//         >
//           <Badge badgeContent={17} color="error">
//             <NotificationsIcon />
//           </Badge>
//         </IconButton>
//         <p>Notifications</p>
//       </MenuItem>
//       <MenuItem onClick={handleProfileMenuOpen}>
//         <IconButton
//           size="large"
//           aria-label="account of current user"
//           aria-controls="primary-search-account-menu"
//           aria-haspopup="true"
//           color="inherit"
//         >
//           <AccountCircle />
//         </IconButton>
//         <p>Profile</p>
//       </MenuItem>
//     </Menu>
//   );

//   // useEffect(() => {
//   //     if (!conversation) {
//   //         createConversation({ id: conversationId, messages: [] });
//   //     }
//   // }, [conversation]);

//   // return (
//   //     <div style={{
//   //         height: "100vh",
//   //         position: "relative",
//   //         overflow: "none"
//   //     }}>

//   //         <MainContainer responsive>
//   //             {/* <Sidebar position="left" scrollable={true}> */}
//   //                 {/* <ConversationList scrollable>
//   //                 <Search placeholder="Search..." style={{ margin: '10px' }}/>
//   //                 <Conversation name="Lilly" lastSenderName="Lilly" info="Yes i can do it for you">
//   //                     <Avatar src={lillyIco} name="Lilly" status="available" />
//   //                 </Conversation>

//   //                 <Conversation name="Joe" lastSenderName="Joe" info="Yes i can do it for you">
//   //                     <Avatar src={joeIco} name="Joe" status="dnd" />
//   //                 </Conversation>

//   //                 <Conversation name="Emily" lastSenderName="Emily" info="Yes i can do it for you" unreadCnt={3}>
//   //                     <Avatar src={emilyIco} name="Emily" status="available" />
//   //                 </Conversation>

//   //                 <Conversation name="Kai" lastSenderName="Kai" info="Yes i can do it for you" unreadDot>
//   //                     <Avatar src={kaiIco} name="Kai" status="unavailable" />
//   //                 </Conversation>

//   //                 <Conversation name="Akane" lastSenderName="Akane" info="Yes i can do it for you">
//   //                     <Avatar src={akaneIco} name="Akane" status="eager" />
//   //                 </Conversation>

//   //                 <Conversation name="Eliot" lastSenderName="Eliot" info="Yes i can do it for you">
//   //                     <Avatar src={eliotIco} name="Eliot" status="away" />
//   //                 </Conversation>

//   //                 <Conversation name="Zoe" lastSenderName="Zoe" info="Yes i can do it for you" active>
//   //                     <Avatar src={zoeIco} name="Zoe" status="dnd" />
//   //                 </Conversation>

//   //                 <Conversation name="Patrik" lastSenderName="Patrik" info="Yes i can do it for you">
//   //                     <Avatar src={patrikIco} name="Patrik" status="invisible" />
//   //                 </Conversation>

//   //             </ConversationList> */}
//   //                 {/* <Conversations />
//   //             </Sidebar> */}

//   //             <ChatContainer>
//   //                 <AppHeader
//   //                     title="Login"
//   //                 />
//   //                 {/* <ConversationHeader>
//   //                     <ConversationHeader.Back
//   //                         onClick={() => {
//   //                             // go back to the previous page
//   //                             navigate(-1);
//   //                         }}
//   //                     />
//   //                     <Avatar src={zoeIco} name="Zoe" />
//   //                     <ConversationHeader.Content userName={contact?.name || "some contact name here"} info="Active 10 mins ago" />
//   //                     <ConversationHeader.Actions>
//   //                         <VoiceCallButton />
//   //                         <VideoCallButton />
//   //                         <EllipsisButton onClick={() => setToggleInfo(!toggleInfo)} />
//   //                         <InfoButton />
//   //                     </ConversationHeader.Actions>
//   //                 </ConversationHeader> */}
//   //                 <MessageList typingIndicator={<TypingIndicator content="Zoe is typing" />}>

//   //                     <MessageSeparator content="Saturday, 30 November 2019" />

//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Zoe",
//   //                         direction: "incoming",
//   //                         position: "single"
//   //                     }}>
//   //                         <Avatar src={zoeIco} name="Zoe" />
//   //                     </Message>

//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Patrik",
//   //                         direction: "outgoing",
//   //                         position: "single"
//   //                     }} avatarSpacer />
//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Zoe",
//   //                         direction: "incoming",
//   //                         position: "first"
//   //                     }} avatarSpacer />
//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Zoe",
//   //                         direction: "incoming",
//   //                         position: "normal"
//   //                     }} avatarSpacer />
//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Zoe",
//   //                         direction: "incoming",
//   //                         position: "normal"
//   //                     }} avatarSpacer />
//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Zoe",
//   //                         direction: "incoming",
//   //                         position: "last"
//   //                     }}>
//   //                         <Avatar src={zoeIco} name="Zoe" />
//   //                     </Message>

//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Patrik",
//   //                         direction: "outgoing",
//   //                         position: "first"
//   //                     }} />
//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Patrik",
//   //                         direction: "outgoing",
//   //                         position: "normal"
//   //                     }} />
//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Patrik",
//   //                         direction: "outgoing",
//   //                         position: "normal"
//   //                     }} />
//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Patrik",
//   //                         direction: "outgoing",
//   //                         position: "last"
//   //                     }} />

//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Zoe",
//   //                         direction: "incoming",
//   //                         position: "first"
//   //                     }} avatarSpacer />
//   //                     <Message model={{
//   //                         message: "Hello my friend",
//   //                         sentTime: "15 mins ago",
//   //                         sender: "Zoe",
//   //                         direction: "incoming",
//   //                         position: "last"
//   //                     }}>
//   //                         <Avatar src={zoeIco} name="Zoe" />
//   //                     </Message>
//   //                 </MessageList>
//   //                 <MessageInput placeholder="Type message here" value={messageInputValue} onChange={val => setMessageInputValue(val)} onSend={() => {
//   //                     // generate random id
//   //                     const newConversationId = Math.floor(Math.random() * 1000000000)
//   //                     sendMessage('message', { id: newConversationId, message: messageInputValue })
//   //                     setMessageInputValue("")
//   //                     navigate(`/conversations/${newConversationId}`);
//   //                 }} />
//   //             </ChatContainer>

//   //             {toggleInfo && (
//   //                 <Sidebar position="right">
//   //                     <ExpansionPanel open title="INFO">
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                     </ExpansionPanel>
//   //                     <ExpansionPanel title="LOCALIZATION">
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                     </ExpansionPanel>
//   //                     <ExpansionPanel title="MEDIA">
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                     </ExpansionPanel>
//   //                     <ExpansionPanel title="SURVEY">
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                     </ExpansionPanel>
//   //                     <ExpansionPanel title="OPTIONS">
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                         <p>Lorem ipsum</p>
//   //                     </ExpansionPanel>
//   //                 </Sidebar>
//   //             )}
//   //         </MainContainer>
//   //     </div>
//   // )

//   return (
//     <>
//       <AppHeader
//         title="Chat"
//         backButton
//         rightIcon={
//           <IconButton
//             size="large"
//             edge="end"
//             aria-label="account of current user"
//             aria-controls={menuId}
//             aria-haspopup="true"
//             onClick={() => navigate(`/conversations/${conversationId}/details`)}
//             color="inherit"
//           >
//             <MoreIcon />
//           </IconButton>
//         }
//       // onMenuClick={() => setToggleMenu(!toggleMenu)}
//       // onInfoClick={() => setToggleInfo(!toggleInfo)}
//       />
//       <Container maxWidth={false} disableGutters>

//         <ChatContainer>
//           <AppHeader
//             title="Login"
//           />
//           {/* <ConversationHeader>
//                          <ConversationHeader.Back
//                              onClick={() => {
//                                  // go back to the previous page
//                                  navigate(-1);
//                              }}
//                          />
//                          <Avatar src={zoeIco} name="Zoe" />
//                          <ConversationHeader.Content userName={contact?.name || "some contact name here"} info="Active 10 mins ago" />
//                          <ConversationHeader.Actions>
//                              <VoiceCallButton />
//                              <VideoCallButton />
//                              <EllipsisButton onClick={() => setToggleInfo(!toggleInfo)} />
//                              <InfoButton />
//                          </ConversationHeader.Actions>
//                      </ConversationHeader> */}
//           <MessageList typingIndicator={<TypingIndicator content="Zoe is typing" />} style={{ marginBottom: '60px' }}>

//             <MessageSeparator content="Saturday, 30 November 2019" />
//             {/* <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Zoe",
//               direction: "incoming",
//               position: "single"
//             }}>
//               <Avatar src={zoeIco} name="Zoe" />
//             </Message>
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Patrik",
//               direction: "outgoing",
//               position: "single"
//             }} avatarSpacer />
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Zoe",
//               direction: "incoming",
//               position: "first"
//             }} avatarSpacer />
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Zoe",
//               direction: "incoming",
//               position: "normal"
//             }} avatarSpacer />
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Zoe",
//               direction: "incoming",
//               position: "normal"
//             }} avatarSpacer />
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Zoe",
//               direction: "incoming",
//               position: "last"
//             }}>
//               <Avatar src={zoeIco} name="Zoe" />
//             </Message>
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Patrik",
//               direction: "outgoing",
//               position: "first"
//             }} />
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Patrik",
//               direction: "outgoing",
//               position: "normal"
//             }} />
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Patrik",
//               direction: "outgoing",
//               position: "normal"
//             }} />
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Patrik",
//               direction: "outgoing",
//               position: "last"
//             }} />
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Zoe",
//               direction: "incoming",
//               position: "first"
//             }} avatarSpacer />
//             <Message model={{
//               message: "Hello my friend",
//               sentTime: "15 mins ago",
//               sender: "Zoe",
//               direction: "incoming",
//               position: "last"
//             }}>
//               <Avatar src={zoeIco} name="Zoe" />
//             </Message> */}

//             {conversation?.messages?.map((message, index) => {
//               const previousMessage = conversation.messages[index - 1]
//               const nextMessage = conversation.messages[index + 1]
//               // const position = calculateMessagePosition(message, previousMessage, nextMessage)
//               return (
//                 <Message
//                   key={message.id}
//                   model={{
//                     message: message.content,
//                     sentTime: message.timestamp,
//                     sender: message.from,
//                     direction: message.sender === "Zoe" ? "incoming" : "outgoing",
//                     position: "single"
//                   }}
//                 >
//                   {message.sender === "Zoe" && <Avatar src={zoeIco} name="Zoe" />}
//                 </Message>
//               )
//             })}
//           </MessageList>
//           {/* <MessageInput placeholder="Type message here" value={messageInputValue} onChange={val => setMessageInputValue(val)} onSend={() => {
//             // generate random id
//             const newConversationId = Math.floor(Math.random() * 1000000000)
//             sendMessage('message', { id: newConversationId, message: messageInputValue })
//             setMessageInputValue("")
//             navigate(`/conversations/${newConversationId}`);
//           }} /> */}
//         </ChatContainer>

//         <AppBar position="fixed" color="primary" sx={{ top: 'auto', bottom: 0 }}>
//           <Container maxWidth="lg">

//             <Toolbar>
//               {/*  add an input field and a send button and make it so that the input takes up the available space */}
//               {/* make it so that the send button is always on the right side
//                        */}

//               <TextField

//                 id="outlined-multiline-static"
//                 label="Message"

//                 // multiline
//                 // rows={4}
//                 defaultValue=""
//                 variant="filled"
//                 sx={{ width: '100%' }}
//               />
//               <Button variant="contained" sx={{ ml: 2 }}>Send</Button>

//             </Toolbar>
//           </Container>
//         </AppBar>
//       </Container>
//     </>
//   )
// }














































var lightBackground = "/backgrounds/light-leaves.png";
var darkBackground = "/backgrounds/dark-leaves.png";
var calculateHash = calculateSha256/* default */.A;
var Pod_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    root: {
      flexGrow: 1,
      paddingBottom: theme.spacing(8)
    },
    appBar: {
      height: theme.spacing(8)
    },
    form: {
      padding: theme.spacing(3),
      position: "relative"
    },
    title: {
      fontWeight: "bold",
      textAlign: "left",
      display: "flex",
      alignItems: "center",
      height: "100%",
      padding: "0 ".concat(theme.spacing(3))
    },
    img: {
      width: "100%"
    },
    conversation: {
      paddingBottom: theme.spacing(8)
    },
    messageInput: {
      backgroundColor: theme.palette.mode === "dark" ? "#303030" : "#f0f8ff"
    }
  };
});
var Pod_BootstrapDialog = (0,styled/* default */.Ay)(Dialog/* default */.A)(function (_ref) {
  var theme = _ref.theme;
  return {
    "& .MuiDialogContent-root": {
      padding: theme.spacing(2),
      minWidth: "300px"
    },
    "& .MuiDialogActions-root": {
      padding: theme.spacing(1)
    }
  };
});
var Pod_Transition = /*#__PURE__*/index_js_default().forwardRef(function Transition(props, ref) {
  return /*#__PURE__*/index_js_default().createElement(Slide/* default */.A, Pod_extends({
    direction: "up",
    ref: ref
  }, props));
});
function Pod() {
  var _podBlockchain$users2, _podBlockchain$name, _contactDetails$displ, _podBlockchain$users3, _podBlockchain$users4, _podBlockchain$users5, _podBlockchain$messag, _replyMessage$timesta;
  var _useParams = (0,react_router_dist/* useParams */.g)(),
    podId = _useParams.podId;
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var classes = Pod_useStyles();
  var theme = (0,useTheme/* default */.A)();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var storedPods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var storedContacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  });
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var addToBlockchainDispatch = function addToBlockchainDispatch(_ref2) {
    var block = _ref2.block,
      blocks = _ref2.blocks,
      storage = _ref2.storage;
    return dispatch((0,podsSlice/* addToBlockchain */.XE)({
      podId: podId,
      block: block,
      blocks: blocks,
      storage: storage
    }));
  };
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain,
      dispatch: addToBlockchainDispatch
    }),
    userProfile = _useBlockchain.compiledBlockchain,
    addBlocksToProfile = _useBlockchain.addBlocks;
  var storedConnectionId = userProfile.connectionId;
  var storedUsername = userProfile.displayName;
  var storedAvatar = userProfile.avatar;

  // const storedConnectionId = useSelector((state) => state.userProfile.id);
  // const storedUsername = useSelector((state) => state.userProfile.displayName);
  // const storedAvatar = useSelector((state) => state.userProfile.avatar);
  var dispatch = (0,react_redux/* useDispatch */.wA)();
  var addMessageDispatch = function addMessageDispatch(message) {
    return dispatch((0,podsSlice/* addMessage */.tj)(message));
  };
  var setShouldHangupDispatch = function setShouldHangupDispatch() {
    return dispatch((0,podsSlice/* setShouldHangup */.d6)({
      podId: podId,
      shouldHangUp: false
    }));
  };
  var updatePodUnreadCountDispatch = function updatePodUnreadCountDispatch(podId, unreadCount) {
    return dispatch((0,podsSlice/* updatePodUnreadCount */.ZH)({
      podId: podId,
      unreadCount: unreadCount
    }));
  };
  var _useState = (0,index_js_.useState)(""),
    _useState2 = Pod_slicedToArray(_useState, 2),
    messageInputValue = _useState2[0],
    setMessageInputValue = _useState2[1];
  var _useState3 = (0,index_js_.useState)(null),
    _useState4 = Pod_slicedToArray(_useState3, 2),
    mediaStream = _useState4[0],
    setMediaStream = _useState4[1];
  var _useState5 = (0,index_js_.useState)(false),
    _useState6 = Pod_slicedToArray(_useState5, 2),
    callActive = _useState6[0],
    setCallActive = _useState6[1];
  var _useState7 = (0,index_js_.useState)(null),
    _useState8 = Pod_slicedToArray(_useState7, 2),
    imageAttachment = _useState8[0],
    setImageAttachment = _useState8[1];
  var _useState9 = (0,index_js_.useState)(null),
    _useState10 = Pod_slicedToArray(_useState9, 2),
    videoAttachment = _useState10[0],
    setVideoAttachment = _useState10[1];
  var _useState11 = (0,index_js_.useState)(null),
    _useState12 = Pod_slicedToArray(_useState11, 2),
    fileAttachment = _useState12[0],
    setFileAttachment = _useState12[1];
  var _useState13 = (0,index_js_.useState)(null),
    _useState14 = Pod_slicedToArray(_useState13, 2),
    locationAttachment = _useState14[0],
    setLocationAttachment = _useState14[1];
  var _useState15 = (0,index_js_.useState)(null),
    _useState16 = Pod_slicedToArray(_useState15, 2),
    audioAttachment = _useState16[0],
    setAudioAttachment = _useState16[1];
  var _useState17 = (0,index_js_.useState)(null),
    _useState18 = Pod_slicedToArray(_useState17, 2),
    linkAttachment = _useState18[0],
    setLinkAttachment = _useState18[1];
  var _useState19 = (0,index_js_.useState)(false),
    _useState20 = Pod_slicedToArray(_useState19, 2),
    isLoadingFile = _useState20[0],
    setIsLoadingFile = _useState20[1];
  var inputRef = (0,index_js_.useRef)(null);
  var fileInputRef = (0,index_js_.useRef)(null);
  // const filesForPod = []; // useSelector((state) => state.storage[podId]) || [];

  (0,index_js_.useEffect)(function () {
    logToNLevelAnalytics("podPageLoaded");
  }, []);
  var _React$useState = index_js_default().useState(false),
    _React$useState2 = Pod_slicedToArray(_React$useState, 2),
    open = _React$useState2[0],
    setOpen = _React$useState2[1];
  var handleClickOpen = function handleClickOpen() {
    setOpen(true);
  };
  var handleClose = function handleClose() {
    setOpen(false);
  };
  var addStorageItemDispatch = function addStorageItemDispatch(item) {
    return dispatch((0,storageSlice/* addStorageItem */.O7)({
      podId: podId,
      item: item
    }));
  };
  var conversation = storedPods.find(function (pod) {
    return pod.id === podId;
  });
  // const podBlockchain = useMemo(() => new Blockchain({
  //   chain: conversation?.blockchain?.chain || [],
  //   compiler: podCompiler,
  //   storage: conversation?.blockchain?.storage || [],
  // }), [conversation?.blockchain?.chain, conversation?.blockchain?.storage])

  // const compiedBlockchain = useMemo(() => podBlockchain.compile(), [podBlockchain]);

  var _useBlockchain2 = (0,Blockchain/* useBlockchain */.o)({
      compiler: podChain/* compiler */.cx,
      blockchain: conversation === null || conversation === void 0 ? void 0 : conversation.blockchain,
      dispatch: addToBlockchainDispatch
    }),
    podBlockchain = _useBlockchain2.compiledBlockchain,
    addBlocksToPod = _useBlockchain2.addBlocks;
  var _usePeer = (0,usePeer/* default */.A)((podBlockchain === null || podBlockchain === void 0 ? void 0 : podBlockchain.users) || []),
    sendMessage = _usePeer.sendMessage,
    makeCall = _usePeer.makeCall,
    endCall = _usePeer.endCall,
    calls = _usePeer.calls,
    callsHash = _usePeer.callsHash,
    activeConnections = _usePeer.activeConnections;
  var storedShouldHangup = conversation === null || conversation === void 0 ? void 0 : conversation.shouldHangup;
  var peerIsTyping = conversation === null || conversation === void 0 ? void 0 : conversation.peerIsTyping;
  // const filesForPod  = podBlockchain.meaa
  // const peersActivelyTyping = Object.keys(peerIsTyping ?? {}) || []
  // .filter(key => !!peerIsTyping[key])

  var _useState21 = (0,index_js_.useState)(Object.keys(peerIsTyping !== null && peerIsTyping !== void 0 ? peerIsTyping : {}) || [].filter(function (key) {
      return !!peerIsTyping[key];
    })),
    _useState22 = Pod_slicedToArray(_useState21, 2),
    peersActivelyTyping = _useState22[0],
    setPeersActivelyTyping = _useState22[1];
  (0,index_js_.useEffect)(function () {
    setPeersActivelyTyping(Object.keys(peerIsTyping !== null && peerIsTyping !== void 0 ? peerIsTyping : {}).filter(function (k) {
      return !!peerIsTyping[k];
    }));
  }, [peerIsTyping]);
  var handleEndCall = function handleEndCall() {
    console.log("ending call");
    endCall();
    sendMessage({
      type: "setShouldHangup",
      payload: {
        podId: podId,
        shouldHangup: true
      }
    }).then(setShouldHangupDispatch);
  };
  var activeCalls = (0,index_js_.useMemo)(function () {
    if (callActive) {
      setCallActive(false);
      return [];
    }
    return Pod_toConsumableArray(calls);
  }, [callsHash, calls]);
  (0,index_js_.useEffect)(function () {
    if (storedShouldHangup) {
      handleEndCall();
    }
  }, [storedShouldHangup]);
  var handleAttachFile = function handleAttachFile() {
    setIsLoadingFile(true);
    fileInputRef.current.click();
  };
  var handleAttachImage = function handleAttachImage() {
    // setIsLoadingFile(true);
    inputRef.current.click();
  };
  var handleAttachLocation = function handleAttachLocation() {
    navigator.geolocation.getCurrentPosition(function (position) {
      var _position$coords = position.coords,
        latitude = _position$coords.latitude,
        longitude = _position$coords.longitude;
      setLocationAttachment({
        latitude: latitude,
        longitude: longitude
      });
    });
  };
  var handleAttachAudio = function handleAttachAudio(base64AudioMessage) {
    handleClose();
    setAudioAttachment({
      data: base64AudioMessage
    });
  };
  var attachImage = function attachImage(_ref3) {
    var files = _ref3.target.files;
    var f = files[0];
    var img = new Image();
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    img.onload = function () {
      var maxWidthHeight = 300;
      var width = img.width;
      var height = img.height;
      if (width > height) {
        if (width > maxWidthHeight) {
          height *= maxWidthHeight / width;
          width = maxWidthHeight;
        }
      } else {
        if (height > maxWidthHeight) {
          width *= maxWidthHeight / height;
          height = maxWidthHeight;
        }
      }
      canvas.width = width;
      canvas.height = height;
      ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);
      var base64String = canvas.toDataURL("image/jpeg", 1.0);
      var newAttachment = {
        name: f.name,
        type: "image",
        data: base64String,
        size: f.size,
        // md5: calculateMD5(base64String),
        // sha256: calculateSHA256(base64String),
        sha: calculateHash(base64String)
      };
      setImageAttachment(newAttachment);
    };
    img.onerror = function (event) {
      console.error("An error occurred while reading the file:", img.error);
      setIsLoadingFile(false);
    };
    img.onabort = function (event) {
      console.log("File reading was aborted.");
      setIsLoadingFile(false);
    };
    img.src = URL.createObjectURL(f);
  };
  var attachFile = function attachFile(_ref4) {
    var files = _ref4.target.files;
    var f = files[0];
    var reader = new FileReader();
    reader.onload = function (e) {
      var base64String = e.target.result;
      console.log({
        base64String: base64String
      });
      var newAttachment = {
        name: f.name,
        type: "file",
        data: base64String,
        size: f.size,
        // md5: calculateMD5(base64String),
        // sha256: calculateSHA256(base64String),
        sha: calculateHash(base64String)
      };
      setFileAttachment(newAttachment);

      // sendMessage({
      //   type: 'largeFile',
      //   payload: {
      //     ...newAttachment,
      //   }
      // }).then(() => {
      //   setIsLoadingFile(false);
      // })
      setIsLoadingFile(false);
    };
    reader.addEventListener("error", function (err) {
      console.error(err);
      setIsLoadingFile(false);
    });
    reader.addEventListener("abort", function (err) {
      console.error(err);
      setIsLoadingFile(false);
    });
    reader.readAsDataURL(f);
  };
  var handleUpvote = function handleUpvote(messageId) {
    var newBlocks = (0,podChain/* blockBuilders */.e3)().upvoteMessage({
      messageId: messageId,
      from: storedConnectionId
    });
    var pendingUpdate = addBlocksToPod(newBlocks);
    sendMessage({
      type: "addToBlockchain",
      payload: {
        id: podId,
        pendingBlocks: pendingUpdate.pendingBlocks,
        pendingStorage: pendingUpdate.pendingStorage
      }
    });
  };
  (0,index_js_.useEffect)(function () {
    if (imageAttachment !== null || fileAttachment !== null || locationAttachment !== null || audioAttachment !== null) {
      handleSendMessage();
    }
  }, [imageAttachment, fileAttachment, locationAttachment, audioAttachment]);
  (0,index_js_.useEffect)(function () {
    if (conversation !== null && conversation !== void 0 && conversation.unreadCount) {
      updatePodUnreadCountDispatch(podId, 0);
    }
  }, [conversation === null || conversation === void 0 ? void 0 : conversation.unreadCount]);
  var _useState23 = (0,index_js_.useState)(null),
    _useState24 = Pod_slicedToArray(_useState23, 2),
    replyMessage = _useState24[0],
    setReplyMessage = _useState24[1];
  var handleOnReply = function handleOnReply(message) {
    setReplyMessage(message);
  };
  var handleSendMessage = function handleSendMessage() {
    var messageObject = {
      from: storedConnectionId,
      content: messageInputValue ? (0,podChain/* encodeEmojisToUnicode */.It)(messageInputValue) : undefined,
      image: imageAttachment !== null && imageAttachment !== void 0 ? imageAttachment : undefined,
      video: videoAttachment !== null && videoAttachment !== void 0 ? videoAttachment : undefined,
      file: fileAttachment !== null && fileAttachment !== void 0 ? fileAttachment : undefined,
      location: locationAttachment !== null && locationAttachment !== void 0 ? locationAttachment : undefined,
      audio: audioAttachment !== null && audioAttachment !== void 0 ? audioAttachment : undefined,
      link: linkAttachment !== null && linkAttachment !== void 0 ? linkAttachment : undefined,
      reply: replyMessage !== null && replyMessage !== void 0 ? replyMessage : undefined,
      timestampSent: new Date().valueOf(),
      timestampRecieved: null
    };
    var newMessageBlocks = (0,podChain/* blockBuilders */.e3)().sendMessage(messageObject);
    var pendingUpdate = addBlocksToPod(newMessageBlocks);
    // const pendingUpdate = podBlockchain.getUpdate();
    // addToBlockchainDispatch({
    //   blocks: pendingUpdate.pendingBlocks,
    //   storage: pendingUpdate.pendingStorage
    // })
    setImageAttachment(null);
    setFileAttachment(null);
    setReplyMessage(null);
    setIsLoadingFile(false);
    setLocationAttachment(null);
    setAudioAttachment(null);
    setMessageInputValue("");
    if (imageAttachment) addStorageItemDispatch(imageAttachment);
    if (fileAttachment) addStorageItemDispatch(fileAttachment);
    if (locationAttachment) addStorageItemDispatch(locationAttachment);
    if (audioAttachment) addStorageItemDispatch(audioAttachment);
    if (replyMessage) addStorageItemDispatch(replyMessage);
    sendMessage({
      type: "setPeerIsTyping",
      payload: {
        podId: podId,
        peerDisplayName: storedUsername,
        isTyping: false
      }
    });
    // pendingUpdate.pendingBlocks.forEach(block => addToBlockchainDispatch(block))

    logToNLevelAnalytics("sendingMessageAttempt");
    sendMessage({
      type: "message",
      payload: {
        podId: podId,
        message: messageObject,
        podDetails: {
          // ...conversation,
          id: podId,
          messages: [messageObject]
        },
        blocks: pendingUpdate.pendingBlocks,
        storage: pendingUpdate.pendingStorage
      }
    }).then(function (response) {
      logToNLevelAnalytics("sendingMessageSuccess");
      // addMessageDispatch({
      //   podId,
      //   message: { ...messageObject, attachment: imageAttachment?.md5 },
      // });
    });
  };
  var handleMessageChange = function handleMessageChange(event) {
    setMessageInputValue(event.target.value);
    sendMessage({
      type: "setPeerIsTyping",
      payload: {
        podId: podId,
        peerDisplayName: storedUsername,
        isTyping: !!event.target.value
      }
    });
  };

  // useEffect(() => {
  //   const interval = setInterval(() => console.log({calls: getCalls(), callsLength}), 5000)
  //   return () => clearInterval(interval);
  // }, [])

  var remoteStreamCount = calls.filter(function (call) {
    return call._remoteStream;
  }).length;
  (0,index_js_.useEffect)(function () {
    if (callActive && remoteStreamCount) {
      setCallActive(false);
      handleEndCall();
    }
    activeCalls.filter(function (call) {
      return call._remoteStream;
    }).map(function (call) {
      return {
        remote: call._remoteStream,
        local: call._localStream,
        metadata: call.metadata
      };
    }).forEach( /*#__PURE__*/function () {
      var _ref6 = Pod_asyncToGenerator( /*#__PURE__*/Pod_regeneratorRuntime().mark(function _callee(_ref5, index) {
        var remote, local, metadata, isCasting;
        return Pod_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              remote = _ref5.remote, local = _ref5.local, metadata = _ref5.metadata;
              isCasting = metadata === null || metadata === void 0 ? void 0 : metadata.cast;
              if (!(isCasting || remote)) {
                _context.next = 7;
                break;
              }
              document.getElementById("remote-video-".concat(index)).srcObject = isCasting ? local : remote;
              _context.next = 6;
              return document.getElementById("remote-video-".concat(index)).play();
            case 6:
              setCallActive(true);
            case 7:
              if (!(!isCasting && local)) {
                _context.next = 11;
                break;
              }
              document.getElementById("local-video-".concat(index)).srcObject = local;
              _context.next = 11;
              return document.getElementById("local-video-".concat(index)).play();
            case 11:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x, _x2) {
        return _ref6.apply(this, arguments);
      };
    }());
  }, [remoteStreamCount]);
  var handleAnswerCall = /*#__PURE__*/function () {
    var _ref7 = Pod_asyncToGenerator( /*#__PURE__*/Pod_regeneratorRuntime().mark(function _callee2(call) {
      var _call$metadata;
      var _call$_remoteStream, hasVideo, newMediaStream, _call$_remoteStream2, _hasVideo, _newMediaStream;
      return Pod_regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!(call !== null && call !== void 0 && (_call$metadata = call.metadata) !== null && _call$metadata !== void 0 && _call$metadata.cast)) {
              _context2.next = 9;
              break;
            }
            hasVideo = ((_call$_remoteStream = call._remoteStream) === null || _call$_remoteStream === void 0 ? void 0 : _call$_remoteStream.getVideoTracks().length) > 0;
            _context2.next = 4;
            return navigator.mediaDevices.getUserMedia({
              video: hasVideo ? true : true,
              audio: true
            });
          case 4:
            newMediaStream = _context2.sent;
            call.answer(newMediaStream);
            setMediaStream(newMediaStream);
            _context2.next = 15;
            break;
          case 9:
            _hasVideo = ((_call$_remoteStream2 = call._remoteStream) === null || _call$_remoteStream2 === void 0 ? void 0 : _call$_remoteStream2.getVideoTracks().length) > 0;
            _context2.next = 12;
            return navigator.mediaDevices.getUserMedia({
              video: _hasVideo ? true : true,
              audio: true
            });
          case 12:
            _newMediaStream = _context2.sent;
            call.answer(_newMediaStream);
            setMediaStream(_newMediaStream);
          case 15:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function handleAnswerCall(_x3) {
      return _ref7.apply(this, arguments);
    };
  }();
  var contactDetails = storedContacts.find(function (contact) {
    var _podBlockchain$users;
    return contact.connectionId === (podBlockchain === null || podBlockchain === void 0 || (_podBlockchain$users = podBlockchain.users) === null || _podBlockchain$users === void 0 ? void 0 : _podBlockchain$users.filter(function (member) {
      return member !== storedConnectionId;
    })[0]);
  });
  var pageTitle = (podBlockchain === null || podBlockchain === void 0 || (_podBlockchain$users2 = podBlockchain.users) === null || _podBlockchain$users2 === void 0 ? void 0 : _podBlockchain$users2.length) > 2 ? (_podBlockchain$name = podBlockchain === null || podBlockchain === void 0 ? void 0 : podBlockchain.name) !== null && _podBlockchain$name !== void 0 ? _podBlockchain$name : "Pod" : (_contactDetails$displ = contactDetails === null || contactDetails === void 0 ? void 0 : contactDetails.displayName) !== null && _contactDetails$displ !== void 0 ? _contactDetails$displ : "Contact";
  var isOnline = ((_podBlockchain$users3 = podBlockchain.users) !== null && _podBlockchain$users3 !== void 0 ? _podBlockchain$users3 : []).filter(function (c) {
    return c !== storedConnectionId;
  }).every(function (c) {
    return activeConnections.includes(c);
  });
  var isSomeOnline = ((_podBlockchain$users4 = podBlockchain.users) !== null && _podBlockchain$users4 !== void 0 ? _podBlockchain$users4 : []).filter(function (c) {
    return c !== storedConnectionId;
  }).some(function (user) {
    return activeConnections.includes(user);
  });
  var headerActions = [{
    text: t("podPage.podDetails"),
    icon: "account",
    onClick: function onClick() {
      return navigate("/pod/".concat(podId, "/details"));
    }
  }];
  // if (filesForPod.length > 0) {
  headerActions.push({
    text: t("podPage.files"),
    icon: "folder",
    onClick: function onClick() {
      return navigate("/pod/".concat(podId, "/files"));
    }
  });
  // }

  // get boolean if on  if any mobile browser by user agent. like an android ios browser on mobile
  var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  var isGroup = (podBlockchain === null || podBlockchain === void 0 || (_podBlockchain$users5 = podBlockchain.users) === null || _podBlockchain$users5 === void 0 ? void 0 : _podBlockchain$users5.length) > 2;
  var handleItemDelete = function handleItemDelete(id) {
    console.log({
      id: id
    });
    var newMessageBlocks = (0,podChain/* blockBuilders */.e3)().deleteMessage({
      id: id
    });
    var pendingUpdate = addBlocksToPod(newMessageBlocks);
    sendMessage({
      type: "addToBlockchain",
      payload: {
        id: id,
        pendingBlocks: pendingUpdate.pendingBlocks,
        pendingStorage: pendingUpdate.pendingStorage
      }
    });
  };
  var customButtons = isOnline ? [{
    text: t("podPage.call"),
    icon: "callContact",
    subMenuItems: [!isGroup && !isMobile && {
      text: t("podPage.screenshare"),
      icon: "screen",
      onClick: function onClick() {
        return makeCall({
          screen: true,
          video: true,
          audio: true
        });
      }
    }, !isGroup && {
      text: t("podPage.videoCall"),
      icon: "camera",
      onClick: function onClick() {
        return makeCall({
          video: true,
          audio: true
        });
      }
    }, !isGroup && {
      text: t("podPage.call"),
      icon: "call",
      onClick: function onClick() {
        return makeCall({
          audio: true
        });
      }
    }, !isGroup && {
      text: t("podPage.cast"),
      icon: "cast",
      onClick: function onClick() {
        return makeCall({
          audio: true,
          video: true,
          cast: true
        });
      }
    }, {
      text: t("podsPage.verse"),
      icon: "verse",
      onClick: function onClick() {
        return navigate("/pod/".concat(podId, "/verse"));
      }
    }].filter(function (i) {
      return !!i;
    })
  }].filter(function (i) {
    return !!i;
  }) : [];
  headerActions.push.apply(headerActions, Pod_toConsumableArray(customButtons));

  // log which redux state is being updated in a loop
  (0,index_js_.useEffect)(function () {
    return function () {
      console.log({
        storedPods: storedPods
      });
    };
  }, [storedPods]);
  (0,index_js_.useEffect)(function () {
    return function () {
      console.log({
        storedContacts: storedContacts
      });
    };
  }, [storedContacts]);
  (0,index_js_.useEffect)(function () {
    return function () {
      console.log({
        storedConnectionId: storedConnectionId
      });
    };
  }, [storedConnectionId]);
  (0,index_js_.useEffect)(function () {
    return function () {
      console.log({
        storedUsername: storedUsername
      });
    };
  }, [storedUsername]);

  // list of the state variable that could be causing a render loop
  // storedPods
  // storedContacts
  // storedConnectionId
  // storedUsername
  // storedAvatar

  console.log("rendering pod page");
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    backgroundImage: theme.palette.mode === "dark" ? darkBackground : lightBackground,
    headerProps: {
      // title: pageTitle,
      title: /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
        variant: "h6",
        component: "div",
        sx: {
          flexGrow: 1
        }
      }, pageTitle), /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
        variant: "subtitle2",
        component: "div",
        sx: {
          flexGrow: 1
        }
      }, peersActivelyTyping.length > 0 && "".concat(peersActivelyTyping.join(", "), " is typing..."))),
      backButton: "/pods",
      backCount: storedPods.filter(function (pod) {
        return pod.unreadCount > 0;
      }).length,
      avatarProps: {
        src: isGroup ? conversation === null || conversation === void 0 ? void 0 : conversation.avatarUrl : contactDetails === null || contactDetails === void 0 ? void 0 : contactDetails.avatar,
        alt: pageTitle[0],
        isOnline: isOnline,
        isSomeOnline: isSomeOnline
      },
      menuProps: {
        icon: "more",
        items: headerActions
      },
      customButtons: isOnline && !activeCalls.length ? [
      // !isGroup && !isMobile && { icon: 'screen', onClick: () => makeCall({ screen: true, video: true, audio: true }) },
      !isGroup && {
        icon: 'camera',
        onClick: function onClick() {
          return makeCall({
            video: true,
            audio: true
          });
        }
      }, !isGroup && {
        icon: 'call',
        onClick: function onClick() {
          return makeCall({
            audio: true
          });
        }
      }].filter(function (i) {
        return !!i;
      }) : undefined
    },
    className: classes.conversation
  }, /*#__PURE__*/index_js_default().createElement(Conversation/* default */.A, {
    className: classes.conversation,
    isGroup: isGroup,
    deleteItem: handleItemDelete,
    onReply: handleOnReply,
    onUpvote: handleUpvote,
    list: Pod_toConsumableArray(((_podBlockchain$messag = podBlockchain.messages) !== null && _podBlockchain$messag !== void 0 ? _podBlockchain$messag : []).map(function (message) {
      var _storedContacts$find, _storedContacts$find2, _message$payload;
      return Pod_objectSpread(Pod_objectSpread({}, message), {}, {
        name: message.from === storedConnectionId ? storedUsername : (_storedContacts$find = storedContacts.find(function (contact) {
          return contact.connectionId === message.from;
        })) === null || _storedContacts$find === void 0 ? void 0 : _storedContacts$find.displayName,
        avatar: message.from === storedConnectionId ? storedAvatar : (_storedContacts$find2 = storedContacts.find(function (contact) {
          return contact.id === message.from;
        })) === null || _storedContacts$find2 === void 0 ? void 0 : _storedContacts$find2.avatar,
        isOnline: activeConnections.includes(message.from),
        attachmentSha: (_message$payload = message.payload) === null || _message$payload === void 0 ? void 0 : _message$payload.sha,
        type: message.from === storedConnectionId ? "sent" : "recieved"
      });
    })),
    loading: isLoadingFile
  }), /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      marginBottom: 50
    }
  }), /*#__PURE__*/index_js_default().createElement(AppBar/* default */.A, {
    position: "fixed",
    color: "primary",
    sx: {
      top: "auto",
      bottom: 0
    }
  }, /*#__PURE__*/index_js_default().createElement(Container/* default */.A, {
    maxWidth: "lg",
    disableGutters: true
  }, !!replyMessage && /*#__PURE__*/index_js_default().createElement(Container/* default */.A, {
    sx: {
      p: "10px 15px",
      display: "flex",
      flexDirection: "column",
      alignItems: "center"
    }
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    variant: "subtitle2",
    component: "div",
    sx: {
      flexGrow: 1
    }
  }, t("podPage.replyingTo", {
    displayName: replyMessage.name
  })), /*#__PURE__*/index_js_default().createElement(Message/* default */.A, {
    style: {
      transform: "scale(0.7)",
      margin: "-15px"
    },
    type: replyMessage.type,
    payload: replyMessage.payload,
    message: replyMessage.content,
    attachmentSha: replyMessage.attachmentSha,
    attachment: replyMessage.attachment,
    imageAttachment: replyMessage.image,
    username: replyMessage.name,
    isOnline: isGroup && replyMessage.isOnline
    // parse date from something like `Date(item.timestampSent)` to `'10/23/2023 12:00:00 AM'`
    ,
    timestamp: (0,Conversation/* formatDate */.Y)((_replyMessage$timesta = replyMessage.timestamp) === null || _replyMessage$timesta === void 0 ? void 0 : _replyMessage$timesta.created),
    avatar: replyMessage.avatar
  }), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    onClick: function onClick() {
      return setReplyMessage(null);
    }
  }, t("podPage.cancelReply"))), /*#__PURE__*/index_js_default().createElement(Toolbar/* default */.A, {
    disableGutters: true
  }, /*#__PURE__*/index_js_default().createElement(OutlinedInput/* default */.A, {
    id: "outlined-adornment-weight",
    endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
      position: "start"
    }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
      "aria-label": "send location",
      onClick: handleAttachLocation
      // icon is green when there is text in the input field
      ,
      color: "primary",
      disabled: !isOnline,
      edge: "end"
    }, /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
      badgeContent: null,
      color: "info"
    }, /*#__PURE__*/index_js_default().createElement(Place/* default */.A, null)))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
      position: "start"
    }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
      "aria-label": "send message",
      onClick: handleAttachFile
      // icon is green when there is text in the input field
      ,
      color: "primary",
      disabled: !isOnline,
      edge: "end"
    }, /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
      badgeContent: null,
      color: "info"
    }, /*#__PURE__*/index_js_default().createElement(AttachFile/* default */.A, null)))), /*#__PURE__*/index_js_default().createElement("input", {
      type: "file",
      name: "attachment",
      accept: "",
      ref: fileInputRef,
      style: {
        display: "none"
      },
      onChange: attachFile
    }), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
      position: "start"
    }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
      "aria-label": "send message",
      onClick: handleAttachImage
      // icon is green when there is text in the input field
      ,
      color: "primary",
      disabled: !isOnline,
      edge: "end"
    }, /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
      badgeContent: imageAttachment ? "1" : null,
      color: "info"
    }, /*#__PURE__*/index_js_default().createElement(icons_material_Image/* default */.A, null)))), /*#__PURE__*/index_js_default().createElement("input", {
      type: "file",
      name: "attachment",
      accept: "image/*",
      ref: inputRef,
      style: {
        display: "none"
      },
      onChange: attachImage
    }), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
      position: "end"
    }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
      "aria-label": "send voice memo",
      onClick: handleClickOpen,
      color: "primary",
      disabled: !isOnline,
      edge: "end"
    }, /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
      badgeContent: null,
      color: "info"
    }, /*#__PURE__*/index_js_default().createElement(Mic/* default */.A, null)))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
      position: "end"
    }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
      "aria-label": "send message",
      onClick: handleSendMessage
      // icon is green when there is text in the input field
      ,
      color: messageInputValue || imageAttachment ? "primary" : "disabled",
      disabled: !messageInputValue && !imageAttachment || !isOnline,
      edge: "end"
    }, /*#__PURE__*/index_js_default().createElement(Send/* default */.A, null)))),
    "aria-describedby": "outlined-weight-helper-text",
    onChange: handleMessageChange
    // on Enter key press, send message
    // but on on shift Enter
    ,
    onKeyPress: function onKeyPress(ev) {
      if (ev.key === "Enter" && !ev.shiftKey) {
        ev.preventDefault();
        if (messageInputValue) handleSendMessage();
      }
    },
    placeholder: "Type message here",
    value: messageInputValue,
    classes: {
      root: classes.messageInput
    },
    sx: {
      width: "100%"
    },
    autoComplete: "off"
    // lightblue background
    // style={{ backgroundColor: '#f0f8ff' }}
    ,
    multiline: true,
    inputProps: {
      "aria-label": "weight"
    }
  }))), /*#__PURE__*/index_js_default().createElement(Pod_BootstrapDialog, {
    onClose: handleClose,
    "aria-labelledby": "customized-dialog-title",
    open: open || activeCalls.length > 0,
    TransitionComponent: Pod_Transition
  }, /*#__PURE__*/index_js_default().createElement(DialogTitle/* default */.A, {
    sx: {
      m: 0,
      p: 2
    },
    id: "customized-dialog-title"
  }, "Voice message"), /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
    "aria-label": "close",
    onClick: handleClose,
    sx: {
      position: "absolute",
      right: 8,
      top: 8,
      color: function color(theme) {
        return theme.palette.grey[500];
      }
    }
  }, /*#__PURE__*/index_js_default().createElement(Close/* default */.A, null)), /*#__PURE__*/index_js_default().createElement(DialogContent/* default */.A, {
    dividers: true
  }, (activeCalls === null || activeCalls === void 0 ? void 0 : activeCalls.length) < 1 && /*#__PURE__*/index_js_default().createElement(VoiceRecorder, {
    onVoiceRecording: handleAttachAudio
  }), activeCalls.length > 0 && [activeCalls[activeCalls.length - 1]]
  // .filter(call => call._remoteStream)
  .map(function (call, index) {
    var _call$metadata2;
    var stream = call._remoteStream;
    var localStream = call._localStream;
    var isCasting = (_call$metadata2 = call.metadata) === null || _call$metadata2 === void 0 ? void 0 : _call$metadata2.cast;
    console.log({
      call: call,
      stream: stream,
      localStream: localStream,
      isCasting: isCasting
    });
    // option to answer call
    if (localStream && !callActive) handleAnswerCall(call);
    // // autsswerCall(call)

    // on stream disconnect, cklosethe local tracks
    if (stream) {
      stream.oninactive = function () {
        [mediaStream, localStream, stream].map(function (stream) {
          var tracks = stream === null || stream === void 0 ? void 0 : stream.getTracks();
          if (tracks) {
            console.log({
              tracks: tracks
            });
            tracks.forEach(function (track) {
              return track.stop();
            });
            setMediaStream(null);
          }
        });
      };
    }
    return /*#__PURE__*/index_js_default().createElement("div", {
      className: classes.form
    }, stream && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement("video", {
      id: "remote-video-".concat(index),
      playsInline: true,
      style: {
        width: "100%"
      }
    }), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement("br", null)), localStream && (stream === null || stream === void 0 ? void 0 : stream.getVideoTracks().length) > 0 && /*#__PURE__*/index_js_default().createElement("video", {
      id: "local-video-".concat(index),
      muted: true,
      playsInline: true,
      style: {
        width: "20vw",
        position: "absolute",
        top: 90,
        left: 10
      }
    }), !localStream && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
      type: "button",
      sx: {
        mb: 2
      },
      variant: "contained",
      fullWidth: true,
      color: "success",
      onClick: function onClick() {
        return handleAnswerCall(call);
      }
    }, "answer call"), /*#__PURE__*/index_js_default().createElement("br", null)), !isCasting && localStream && stream && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
      type: "button",
      sx: {
        mb: 2
      },
      variant: "contained",
      fullWidth: true,
      color: "info",
      onClick: function onClick() {
        return navigate("/pod/".concat(podId, "/verse"));
      }
    }, "go to verse"), /*#__PURE__*/index_js_default().createElement("br", null)), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
      type: "button",
      variant: "contained",
      fullWidth: true,
      color: "error",
      onClick: handleEndCall
    }, "hang up"));
  })), /*#__PURE__*/index_js_default().createElement(DialogActions/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    autoFocus: true,
    onClick: handleClose
  }, "close")))));
}
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Add.js
var Add = __webpack_require__(16718);
;// CONCATENATED MODULE: ./src/components/pages/podDetails/PodDetails.js
function PodDetails_typeof(o) { "@babel/helpers - typeof"; return PodDetails_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, PodDetails_typeof(o); }
function PodDetails_toConsumableArray(arr) { return PodDetails_arrayWithoutHoles(arr) || PodDetails_iterableToArray(arr) || PodDetails_unsupportedIterableToArray(arr) || PodDetails_nonIterableSpread(); }
function PodDetails_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function PodDetails_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function PodDetails_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return PodDetails_arrayLikeToArray(arr); }
function PodDetails_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function PodDetails_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? PodDetails_ownKeys(Object(t), !0).forEach(function (r) { PodDetails_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : PodDetails_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function PodDetails_defineProperty(obj, key, value) { key = PodDetails_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function PodDetails_toPropertyKey(t) { var i = PodDetails_toPrimitive(t, "string"); return "symbol" == PodDetails_typeof(i) ? i : i + ""; }
function PodDetails_toPrimitive(t, r) { if ("object" != PodDetails_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != PodDetails_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function PodDetails_slicedToArray(arr, i) { return PodDetails_arrayWithHoles(arr) || PodDetails_iterableToArrayLimit(arr, i) || PodDetails_unsupportedIterableToArray(arr, i) || PodDetails_nonIterableRest(); }
function PodDetails_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function PodDetails_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return PodDetails_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return PodDetails_arrayLikeToArray(o, minLen); }
function PodDetails_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function PodDetails_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function PodDetails_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }







// import { updateUsername } from "../../redux/slices/userProfileSlice";


















var PodDetails_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    root: {
      flexGrow: 1
    },
    appBar: {
      height: theme.spacing(8)
    },
    form: {
      padding: theme.spacing(3)
    },
    title: {
      fontWeight: "bold",
      textAlign: "left",
      display: "flex",
      alignItems: "center",
      height: "100%",
      padding: "0 ".concat(theme.spacing(3))
    },
    img: {
      width: "100%"
    }
  };
});
function Profile() {
  var classes = PodDetails_useStyles();
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    _useTranslation2 = PodDetails_slicedToArray(_useTranslation, 1),
    t = _useTranslation2[0];
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var dispatch = (0,react_redux/* useDispatch */.wA)();
  var _useParams = (0,react_router_dist/* useParams */.g)(),
    podId = _useParams.podId;
  var _React$useState = index_js_default().useState(null),
    _React$useState2 = PodDetails_slicedToArray(_React$useState, 2),
    anchorEl = _React$useState2[0],
    setAnchorEl = _React$useState2[1];
  var podDetails = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods.find(function (pod) {
      return pod.id === podId;
    });
  });
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  });
  var podBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods.find(function (pod) {
      return pod.id === podId;
    }).blockchain;
  });
  var updatePodNameDispatch = function updatePodNameDispatch(podName) {
    return dispatch((0,podsSlice/* updatePodName */.AZ)(podName));
  };
  var addUserToPodDispatch = function addUserToPodDispatch(userId) {
    return dispatch((0,podsSlice/* addUserToPod */.zv)({
      podId: podId,
      userId: userId
    }));
  };
  var removePodDispatch = function removePodDispatch(podId) {
    return dispatch((0,podsSlice/* removePod */.gH)(podId));
  };
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var addToBlockchainDispatch = function addToBlockchainDispatch(_ref) {
    var blocks = _ref.blocks,
      block = _ref.block,
      storage = _ref.storage;
    return dispatch((0,podsSlice/* addToBlockchain */.XE)({
      podId: podId,
      blocks: blocks,
      block: block,
      storage: storage,
      append: true
    }));
  };
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain
    }),
    userProfile = _useBlockchain.compiledBlockchain;
  var storedConnectionId = userProfile.connectionId;
  // const storedConnectionId = useSelector((state) => state.userProfile.id);

  // create pod blockchain with dispatch
  var _useBlockchain2 = (0,Blockchain/* useBlockchain */.o)({
      compiler: podChain/* compiler */.cx,
      blockchain: podBlockchain,
      storage: podBlockchain.storage,
      dispatch: addToBlockchainDispatch
    }),
    compiledPodBlockchain = _useBlockchain2.compiledBlockchain,
    addPodBlocks = _useBlockchain2.addBlocks;
  var _usePeer = (0,usePeer/* default */.A)((podDetails === null || podDetails === void 0 ? void 0 : podDetails.members) || []),
    sendMessage = _usePeer.sendMessage,
    connectToPeer = _usePeer.connectToPeer,
    activeConnections = _usePeer.activeConnections;
  (0,index_js_.useEffect)(function () {
    console.log({
      compiledPodBlockchain: compiledPodBlockchain
    });
    // memebers not connected to
    var membersNotConnectedTo = compiledPodBlockchain.users.filter(function (userId) {
      return !contacts.map(function (contact) {
        return contact.connectionId;
      }).includes(userId);
    });
    // connect to members not connected to
    membersNotConnectedTo.forEach(function (member) {
      connectToPeer(member);
    });
  }, [compiledPodBlockchain === null || compiledPodBlockchain === void 0 ? void 0 : compiledPodBlockchain.users]);
  var _React$useState3 = index_js_default().useState(false),
    _React$useState4 = PodDetails_slicedToArray(_React$useState3, 2),
    expanded = _React$useState4[0],
    setExpanded = _React$useState4[1];
  var handleChange = function handleChange(panel) {
    return function (event, isExpanded) {
      setExpanded(isExpanded ? panel : false);
    };
  };
  var handlePodNameChange = function handlePodNameChange(e) {
    updatePodNameDispatch({
      podId: podId,
      name: e.target.value
    });
  };
  var handleMenu = function handleMenu(event) {
    setAnchorEl(event.currentTarget);
  };
  var handleClose = function handleClose() {
    setAnchorEl(null);
  };
  var membersList = compiledPodBlockchain === null || compiledPodBlockchain === void 0 ? void 0 : compiledPodBlockchain.users.filter(function (member) {
    return member !== storedConnectionId;
  }).map(function (member) {
    return contacts.find(function (contact) {
      return contact.connectionId === member;
    });
  }).filter(function (contact) {
    return contact;
  }).map(function (contact) {
    return {
      id: contact.id,
      name: contact.displayName,
      avatarUrl: contact.avatar,
      onClick: function onClick() {
        return navigate("/contact/".concat(contact.connectionId));
      },
      isOnline: activeConnections.includes(contact.connectionId)
    };
  });
  var contactsThatCanBeAdded = contacts.filter(function (contact) {
    return !compiledPodBlockchain.users.includes(contact.connectionId);
  }).filter(function (contact) {
    return activeConnections.includes(contact.connectionId);
  }).map(function (contact) {
    return {
      id: contact.id,
      name: contact.displayName,
      avatarUrl: contact.avatar,
      isOnline: activeConnections.includes(contact.connectionId),
      onClick: function onClick() {
        handleAddPeerToGroup(contact);
        // console.log('adding user to pod')
        // sendMessage({
        //     type: 'addNewPod',
        //     recipients: [contact.id],
        //     payload: {
        //         ...podDetails,
        //         members: [...podDetails.members, contact.id],
        //     }
        // }).then(() => {
        //     addUserToPodDispatch(contact.id)
        // });

        // sendMessage({
        //     type: 'addUserToPod',
        //     recipients: podDetails.members,
        //     payload: {
        //         podId,
        //         userId: contact.id,
        //     }
        // })
      }
    };
  });
  var handleAddPeerToGroup = function handleAddPeerToGroup(contact) {
    var addNewUserBlocks = (0,podChain/* blockBuilders */.e3)().addMember({
      userId: contact.connectionId
    });
    var pendingUpdate = addPodBlocks(addNewUserBlocks);
    var newPod = PodDetails_objectSpread(PodDetails_objectSpread({}, pendingUpdate), compiledPodBlockchain);
    sendMessage({
      type: "addToBlockchain",
      payload: newPod
    });
    sendMessage({
      type: "addNewPod",
      payload: {
        id: podId,
        pendingBlocks: [].concat(PodDetails_toConsumableArray(podBlockchain.chain), PodDetails_toConsumableArray(pendingUpdate.pendingBlocks)),
        pendingStorage: PodDetails_objectSpread(PodDetails_objectSpread({}, podBlockchain.storage), pendingUpdate.pendingStorage)
      },
      recipients: [contact.connectionId]
    });
    // .then(() => {
    //     navigate(`/pod/${newPod.id}`);
    // });
  };
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: podDetails.name,
      backButton: "/pod/".concat(podId),
      avatarProps: {
        // src: "https://source.unsplash.com/random/400x200?login",
        alt: "random"
      }
    }
  }, /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
    alt: "Remy Sharp"
    // src={"https://source.unsplash.com/random/400x200?login"}
    ,
    style: {
      minHeight: "300px",
      minWidth: "300px",
      margin: "auto"
    }
  }), /*#__PURE__*/index_js_default().createElement("form", {
    noValidate: true,
    className: classes.form
  }, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    required: true,
    fullWidth: true,
    id: "podName",
    label: t("podDetailsPage.podName"),
    name: "podName",
    defaultValue: podDetails.name,
    onChange: handlePodNameChange
  }), /*#__PURE__*/index_js_default().createElement(ListComponent, {
    list: PodDetails_toConsumableArray(membersList)
  }), contactsThatCanBeAdded.length > 0 && /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    expanded: expanded === "addpeer",
    onChange: handleChange("addpeer")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header",
    style: {
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between"
    },
    sx: {
      "& .MuiAccordionSummary-content": {
        overflow: "hidden"
      }
    }
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    component: "div",
    style: {
      flexGrow: 1,
      flexShrink: 1,
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      marginRight: "8px" // Providing space between the text and the icon
    }
  }, t("podDetailsPage.addExistingPeerToPod"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(ListComponent, {
    chevronOverride: /*#__PURE__*/index_js_default().createElement(Add/* default */.A, null),
    list: PodDetails_toConsumableArray(contactsThatCanBeAdded)
  }))), /*#__PURE__*/index_js_default().createElement(connect_to_peer_ConnectToPeer, {
    collapse: true
  }), /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    expanded: expanded === "advanced",
    onChange: handleChange("advanced")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, t("common.more"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "podID",
    label: t("podDetailsPage.podId"),
    name: "podID",
    value: podDetails.id,
    InputProps: {
      readOnly: true
    }
  }),  false && /*#__PURE__*/0))));
}
;// CONCATENATED MODULE: ./src/components/pages/contacts/Contacts.js
function Contacts_typeof(o) { "@babel/helpers - typeof"; return Contacts_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Contacts_typeof(o); }
function Contacts_toConsumableArray(arr) { return Contacts_arrayWithoutHoles(arr) || Contacts_iterableToArray(arr) || Contacts_unsupportedIterableToArray(arr) || Contacts_nonIterableSpread(); }
function Contacts_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Contacts_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Contacts_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Contacts_arrayLikeToArray(arr); }
function Contacts_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function Contacts_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? Contacts_ownKeys(Object(t), !0).forEach(function (r) { Contacts_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : Contacts_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function Contacts_defineProperty(obj, key, value) { key = Contacts_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Contacts_toPropertyKey(t) { var i = Contacts_toPrimitive(t, "string"); return "symbol" == Contacts_typeof(i) ? i : i + ""; }
function Contacts_toPrimitive(t, r) { if ("object" != Contacts_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Contacts_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Contacts_slicedToArray(arr, i) { return Contacts_arrayWithHoles(arr) || Contacts_iterableToArrayLimit(arr, i) || Contacts_unsupportedIterableToArray(arr, i) || Contacts_nonIterableRest(); }
function Contacts_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Contacts_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Contacts_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Contacts_arrayLikeToArray(o, minLen); }
function Contacts_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Contacts_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Contacts_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// import React, { useState } from "react";

// import {
//     Avatar,
//     Conversation,
//     ConversationHeader,
//     ConversationList,
//     InfoButton,
//     MainContainer,
//     MessageList,
//     Search,
//     Sidebar,
//     TypingIndicator,
//     VideoCallButton,
//     VoiceCallButton,
//     Message,
//     MessageInput,
//     ChatContainer,
//     MessageSeparator,
//     ExpansionPanel
// } from "@chatscope/chat-ui-kit-react";
// import IconButton from '@mui/material/IconButton';
// import AddIcon from '@mui/icons-material/Add';

// // import contacts to be displayed at the end of this list of contacts
// import { useSelector, useDispatch } from 'react-redux'

// import lillyIco from './logo192.png'
// import joeIco from './logo192.png'
// import emilyIco from './logo192.png'
// import kaiIco from './logo192.png'
// import akaneIco from './logo192.png'
// import eliotIco from './logo192.png'
// import zoeIco from './logo192.png'
// import patrikIco from './logo192.png'
// import { useNavigate, useParams } from "react-router-dom";
// // import for the creation of a new conversation
// import { createConversation } from '../../redux/slices/podsSlice'

// export default () => {
//     const [messageInputValue, setMessageInputValue] = useState("");
//     const navigate = useNavigate();
//     const dispatch = useDispatch();
//     const contacts = useSelector((state) => state.contacts.contacts);

//     // get the conversationId from the url if it is there with react-router-dom
//     const { conversationId } = useParams();

//     // handle the creation of a new conversation
//     const handleCreateConversation = () => {
//         dispatch(createConversation({
//             name: 'New Conversation',
//             messages: [],
//             id: Math.floor(Math.random() * 1000000)
//         }))
//     }

//     return (
//         <div style={{
//             height: "100vh",
//             position: "relative",
//             overflow: "none"
//         }}>
//                 <Search key={'search'} placeholder="Search..." style={{ margin: '10px' }}/>
//                 <ConversationList scrollable>
//                     {contacts.map((contact) => (
//                         <Conversation name={contact.name} lastSenderName={contact.name} info="Yes i can do it for you" onClick={() => navigate(`/contacts/${contact.id}`)} active={conversationId === contact.id}>
//                             <Avatar src={patrikIco} name={contact.name} status="available" />
//                         </Conversation>
//                     ))}

//                     <div style={{
//                         // position: "fixed",
//                         // bottom: "0",
//                         // left: "0",
//                         // right: "0",
//                         textAlign: "center",
//                         padding: "10px",
//                     }}>
//                         <IconButton style={{ background: '#2b6a9b', color: '#fff', zIndex: 1, }} aria-label="add" size="large" onClick={() => navigate('/contacts/add')}>
//                             <AddIcon />
//                         </IconButton>
//                         <IconButton style={{ background: '#2b6a9b', color: '#fff', zIndex: 1, }} aria-label="add" size="large" onClick={handleCreateConversation}>
//                             <AddIcon />
//                         </IconButton>
//                     </div>

//                 </ConversationList>
//         </div>
//     )
// }







































var Contacts_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    appBar: {
      height: theme.spacing(8)
    },
    title: {
      fontWeight: "bold",
      textAlign: "left",
      display: "flex",
      alignItems: "center",
      height: "100%",
      padding: "0 ".concat(theme.spacing(3))
    },
    chevron: {
      justifyContent: "right"
    },
    fab: {
      position: "absolute !important",
      bottom: theme.spacing(2),
      right: theme.spacing(2)
    },
    hidden: {
      display: "none"
    },
    qrcodeReader: {
      height: "100vh",
      width: "100vw",
      top: 0,
      left: 0,
      position: "absolute",
      zIndex: 10000
    },
    connect: {
      margin: "0 ".concat(theme.spacing(2))
    }
  };
});
function ContactsListPage(_ref) {
  var headerOverride = _ref.headerOverride;
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var classes = Contacts_useStyles();
  var theme = (0,useTheme/* default */.A)();
  var colorMode = index_js_default().useContext(ColorModeContext);
  var sendNotification = (0,notificationManager/* useNotification */.hN)();
  (0,index_js_.useEffect)(function () {
    logToNLevelAnalytics("contactsPageLoaded");
  }, []);
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];
  // const storedConnectionId = useSelector((state) => state.userProfile.connectionId);
  var storedPods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var _usePeer = (0,usePeer/* default */.A)([]),
    activeConnections = _usePeer.activeConnections;
  var _useState = (0,index_js_.useState)(false),
    _useState2 = Contacts_slicedToArray(_useState, 2),
    scanning = _useState2[0],
    setScanning = _useState2[1];
  var _useState3 = (0,index_js_.useState)("No result"),
    _useState4 = Contacts_slicedToArray(_useState3, 2),
    result = _useState4[0],
    setResult = _useState4[1];
  // const [deferredPrompt, setDeferredPrompt] = useState(null);

  // useEffect(() => {
  //     const handleBeforeInstallPromptEvent = (e) => {
  //         console.log('setting defferedPrompt')
  //         e.preventDefault();
  //         setDeferredPrompt(e);
  //     };
  //     window.addEventListener('beforeinstallprompt', handleBeforeInstallPromptEvent);

  //     const bipEvent = new Event('beforeinstallprompt');

  //     // Define the prompt method on the event object
  //     bipEvent.prompt = () => {
  //         return new Promise((resolve) => {
  //             // Simulate user accepting the prompt
  //             resolve({ outcome: 'accepted' });  // or 'dismissed' to simulate user dismissing the prompt
  //         });
  //     };

  //     // Dispatch the custom event to trigger your event handler
  //     window.dispatchEvent(bipEvent);
  //     return () => {
  //         window.removeEventListener('beforeinstallprompt', handleBeforeInstallPromptEvent);
  //     };
  // }, []);

  var contactsList = contacts.map(function (contact) {
    return {
      id: contact.id,
      name: contact.displayName,
      avatarUrl: contact.avatar,
      onClick: function onClick() {
        return navigate("/contact/".concat(contact.connectionId));
      },
      isOnline: activeConnections.includes(contact.connectionId)
    };
  });
  var handleScan = function handleScan(data) {
    if (!(data !== null && data !== void 0 && data.text)) return;
    data && setResult(data);
    data && navigate(data.text.replace(window.location.origin, ""));
  };
  var handleError = function handleError(err) {
    console.error(err);
  };
  var previewStyle = {
    height: "100vh",
    width: "100vw",
    top: 0,
    left: 0,
    position: "absolute",
    zIndex: 10000
  };
  var isInstalledPwa = (0,index_js_.useMemo)(function () {
    return window.matchMedia("(display-mode: standalone)").matches || window.navigator.standalone || document.referrer.includes("android-app://");
  }, []);
  var _useState5 = (0,index_js_.useState)(null),
    _useState6 = Contacts_slicedToArray(_useState5, 2),
    activatedNumber = _useState6[0],
    setActivateNumber = _useState6[1];
  var NextButton = /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return setActivateNumber(activatedNumber + 1);
    }
  }, "Next");
  var PrevButton = /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return setActivateNumber(activatedNumber - 1);
    }
  }, "Prev");
  var ref1 = (0,index_js_.useRef)(null);
  var ref2 = (0,index_js_.useRef)(null);
  var coachList = [{
    activate: true,
    component: /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
      style: {
        color: "black"
      }
    }, "Share link or QR-code to connect to a peer and get started!", /*#__PURE__*/index_js_default().createElement("br", null), NextButton, " "),
    reference: ref1,
    tooltip: {
      position: "top"
    }
  }];
  var coach = coachList[activatedNumber];
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: Contacts_objectSpread({
      title: t("contactsPage.pageTitle"),
      backButton: storedPods.length > 0 ? "/pods" : false,
      backCount: storedPods.filter(function (pod) {
        return pod.unreadCount > 0;
      }).length,
      // avatarProps: {
      //   src: "https://source.unsplash.com/random/400x200?login",
      //   alt: "random"
      // },
      // menuProps: {
      //   icon: 'account',
      //   items: [
      //     { text: 'Profile', icon: 'account', onClick: () => navigate('/profile') },
      //   ]
      // }
      customButtons: [
      /*#__PURE__*/
      // {
      //   icon: "help",
      //   onClick: () => setActivateNumber(0),
      // },
      index_js_default().createElement(DocLink, {
        key: "docLink",
        docLink: "https://positive-intentions.com/docs/basics/peers"
      })],
      menuProps: {
        icon: "more",
        items: [{
          text: t("components.menuItems.profile"),
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }
        // { text: theme.palette.mode === 'dark' ? 'Light Mode' : 'Dark Mode', icon: theme.palette.mode === 'dark' ? 'lightMode' : 'darkMode', onClick: colorMode.toggleColorMode },
        // !isInstalledPwa ? { text: isFullScreen ? 'Exit Fullscreen' : 'Fullscreen', icon: isFullScreen ? 'fullscreenExit' : 'fullscreen', onClick: () => setIsFullScreen(!isFullScreen) } : null,
        // !isInstalledPwa ? {
        //     text: 'Install App', icon: 'install', onClick: () => {
        //         sendNotification?.('Requesting to install.', { variant: 'info' })

        //         if (deferredPrompt) {
        //             deferredPrompt.prompt()
        //                 .then((result) => {
        //                     if (result.outcome === 'accepted') {
        //                         console.log('Installation accepted');
        //                         sendNotification?.('👍 Install possible. Try from your browser settings.', { variant: 'success' })

        //                     } else {
        //                         console.log('Installation dismissed');
        //                         sendNotification?.('👎 Autoinstall dismissed. You can install through your browser.', { variant: 'warning' })

        //                     }
        //                 })
        //                 .catch((error) => {
        //                     console.error('Installation prompt error:', error);
        //                     sendNotification?.('👎 Autoinstall failed. You might be able to install through your browser.', { variant: 'warning' })

        //                 });
        //         } else {
        //             console.error('The beforeinstallprompt event has not been fired.');
        //             sendNotification?.('👎 Autoinstall failed. You might be able to install through your browser.', { variant: 'warning' })
        //         }
        //     }
        // } : null,
        // // { text: 'Language', icon: 'translate', onClick: () => navigate('/privacy'), subMenuItems: [
        // //     { text: 'English', onClick: () => navigate('/privacy') },
        // //     { text: 'Spanish', onClick: () => navigate('/privacy') },
        // //   ] },
        // { text: 'Terms', icon: 'document', onClick: () => navigate('/terms') },
        // { text: 'About', icon: 'info', onClick: () => window.location = 'https://positive-intentions.com' },
        ]
      }
    }, headerOverride)
    // speedDialProps={{
    //     actions: [
    //         { icon: <CameraAltIcon />, name: 'Camera', onClick: () => setScanning(true) },
    //         { icon: <QrCode2Icon />, name: 'QR code', onClick: () => navigate(`/profile/qr`) },
    //         { icon: <LinkIcon />, name: 'share link', onClick: () => navigator.clipboard.writeText(`${window.location.origin}/login/${storedConnectionId}`)},
    //     ],
    // }}
    //   fabProps={{
    //     icon: "add",
    //     onClick: () => {
    //       console.log("add clicked");
    //     }
    //   }}
  }, !scanning && /*#__PURE__*/index_js_default().createElement(ListComponent, {
    list: Contacts_toConsumableArray(contactsList)
  }), /*#__PURE__*/index_js_default().createElement(react_coach_mark_dist.CoachMark, coach), /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
    src: logo512_namespaceObject,
    style: {
      minHeight: "300px",
      minWidth: "300px",
      margin: "auto"
    }
  }), /*#__PURE__*/index_js_default().createElement("div", {
    ref: ref1,
    className: classes.connect
  }, /*#__PURE__*/index_js_default().createElement(connect_to_peer_ConnectToPeer, {
    open: !contactsList.length,
    link: !contactsList.length
  })), scanning && /*#__PURE__*/index_js_default().createElement((react_qr_scanner_umd_default()), {
    delay: 100,
    className: classes.qrcodeReader,
    onError: handleError,
    onScan: handleScan,
    constraints: {
      video: {
        facingMode: "environment"
      }
    }
  }));
}
;// CONCATENATED MODULE: ./src/components/pages/contactDetails/ContactDetails.js
function ContactDetails_typeof(o) { "@babel/helpers - typeof"; return ContactDetails_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ContactDetails_typeof(o); }
function ContactDetails_toConsumableArray(arr) { return ContactDetails_arrayWithoutHoles(arr) || ContactDetails_iterableToArray(arr) || ContactDetails_unsupportedIterableToArray(arr) || ContactDetails_nonIterableSpread(); }
function ContactDetails_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function ContactDetails_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function ContactDetails_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return ContactDetails_arrayLikeToArray(arr); }
function ContactDetails_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function ContactDetails_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ContactDetails_ownKeys(Object(t), !0).forEach(function (r) { ContactDetails_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ContactDetails_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function ContactDetails_defineProperty(obj, key, value) { key = ContactDetails_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function ContactDetails_toPropertyKey(t) { var i = ContactDetails_toPrimitive(t, "string"); return "symbol" == ContactDetails_typeof(i) ? i : i + ""; }
function ContactDetails_toPrimitive(t, r) { if ("object" != ContactDetails_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != ContactDetails_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function ContactDetails_slicedToArray(arr, i) { return ContactDetails_arrayWithHoles(arr) || ContactDetails_iterableToArrayLimit(arr, i) || ContactDetails_unsupportedIterableToArray(arr, i) || ContactDetails_nonIterableRest(); }
function ContactDetails_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function ContactDetails_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ContactDetails_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ContactDetails_arrayLikeToArray(o, minLen); }
function ContactDetails_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ContactDetails_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function ContactDetails_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// import React, { useEffect, useState } from "react";
// import { makeStyles } from "@mui/styles";
// import AppBar from "@mui/material/AppBar";
// import Typography from "@mui/material/Typography";
// import Avatar from "@mui/material/Avatar";
// import Button from "@mui/material/Button";
// import { useSelector, useDispatch } from "react-redux";
// import { Navigate, useNavigate, useParams } from "react-router-dom";
// import IconButton from "@mui/material/IconButton";
// import ArrowBackIcon from "@mui/icons-material/ArrowBack";
// import AppHeader from "../../atomic/molecules/app-header/AppHeader";

// const useStyles = makeStyles((theme) => ({
//     appBar: {
//         height: theme.spacing(8),
//     },
//     menuButton: {
//         marginRight: theme.spacing(2),
//     },
//     title: {
//         fontWeight: "bold",
//         textAlign: "left",
//         display: "flex",
//         alignItems: "center",
//         height: "100%",
//         padding: `0 ${theme.spacing(3)}`,
//     },
//     avatar: {
//         width: `${theme.spacing(20)} !important`,
//         height: `${theme.spacing(20)} !important`,
//         margin: theme.spacing(3),
//     },
//     backButton: {
//         marginRight: theme.spacing(2),
//     },
//     details: {
//         display: "flex",
//         flexDirection: "column",
//         alignItems: "center",
//         padding: theme.spacing(3),
//     },
//     deleteButton: {
//         marginTop: theme.spacing(2),
//     },
// }));

// export default function ContactDetailsPage() {
//     const classes = useStyles();
//     const { contactId } = useParams();
//     const [contact, setContact] = useState({});
//     const navigate = useNavigate();

//     useEffect(() => {
//         // here you can make a call to your api to fetch the contact data
//         // setContact()
//         setContact({
//             id: contactId,
//             avatarUrl: "https://via.placeholder.com/150",
//             username: "Contact Username",
//             connectionId: "conn_12345",
//         });
//     }, [contactId]);

//     const handleDelete = () => {
//         console.log("Deleting contact: ", contactId);
//     };

//     const handleBackButtonClick = () => {
//         navigate(-1);
//     };

//     return (
//         <>
//             <AppHeader
//                 title="Contact Details"
//                 backButton
//             />
//             <div className={classes.details}>
//                 <Avatar className={classes.avatar} src={contact.avatarUrl} />
//                 <Typography variant="subtitle1">Username: {contact.username}</Typography>
//                 <Typography variant="subtitle1">Connection ID: {contact.connectionId}</Typography>
//                 <Button className={classes.deleteButton} variant="contained" color="secondary" onClick={() => {
//                     console.log("deleting contact", contact.id);
//                     //dispatch the delete action here
//                 }}>
//                     Delete Contact
//                 </Button>
//             </div>
//         </>
//     );
// }




























// import Blockchain from "../../blockchain/Blockchain";



var ContactDetails_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    root: {
      flexGrow: 1
    },
    appBar: {
      height: theme.spacing(8)
    },
    form: {
      padding: theme.spacing(3)
    },
    title: {
      fontWeight: "bold",
      textAlign: "left",
      display: "flex",
      alignItems: "center",
      height: "100%",
      padding: "0 ".concat(theme.spacing(3))
    },
    img: {
      width: "100%"
    },
    button: {
      marginTop: "".concat(theme.spacing(2), " !important")
    }
  };
});
function ContactDetails_Profile() {
  var _useCryptography = (0,Cryptography.useCryptography)(),
    chance = _useCryptography.chance;
  var classes = ContactDetails_useStyles();
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var _useParams = (0,react_router_dist/* useParams */.g)(),
    contactId = _useParams.contactId;
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var addToBlockchainDispatch = function addToBlockchainDispatch(update) {
    return dispatch((0,podsSlice/* addToBlockchain */.XE)(update));
  };
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain,
      dispatch: addToBlockchainDispatch
    }),
    userProfile = _useBlockchain.compiledBlockchain,
    addBlocksToProfile = _useBlockchain.addBlocks;
  var userProfileId = userProfile.connectionId;
  // const userProfileId = useSelector((state) => state.userProfile.connectionId);
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  });
  var contact = contacts.find(function (contact) {
    return contact.connectionId === contactId;
  });
  var _usePeer = (0,usePeer/* default */.A)([contactId]),
    connectToPeer = _usePeer.connectToPeer,
    sendMessage = _usePeer.sendMessage,
    activeConnections = _usePeer.activeConnections;
  var dispatch = (0,react_redux/* useDispatch */.wA)();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var removeContactDispatch = function removeContactDispatch(contactId) {
    return dispatch(removeContact({
      id: contactId
    }));
  };
  var updateContactDisplayNameDispatch = function updateContactDisplayNameDispatch(newDisplayName) {
    return dispatch(updateContactDisplayName({
      id: contactId,
      displayName: newDisplayName
    }));
  };
  var createNewPodDispatch = function createNewPodDispatch(newPod) {
    return dispatch((0,podsSlice/* createNewPod */.O)(newPod));
  };
  var removeUserFromConversationFromAllPodsDispatch = function removeUserFromConversationFromAllPodsDispatch(userId) {
    return dispatch((0,podsSlice/* removeUserFromConversationFromAllPods */.MD)({
      userId: userId
    }));
  };
  var _useState = (0,index_js_.useState)(chance.country({
      full: true
    })),
    _useState2 = ContactDetails_slicedToArray(_useState, 2),
    chatName = _useState2[0],
    setChatName = _useState2[1];
  var isOnline = activeConnections.includes(contact === null || contact === void 0 ? void 0 : contact.connectionId);
  var podWithPeer = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods.find(function (pod) {
      var _pod$blockchain$chain, _pod$blockchain, _pod$blockchain$stora, _pod$blockchain2, _compiledBlockchain$u;
      var podBlockchain = new Blockchain/* default */.A({
        chain: (_pod$blockchain$chain = pod === null || pod === void 0 || (_pod$blockchain = pod.blockchain) === null || _pod$blockchain === void 0 ? void 0 : _pod$blockchain.chain) !== null && _pod$blockchain$chain !== void 0 ? _pod$blockchain$chain : [],
        compiler: podChain/* compiler */.cx,
        storage: (_pod$blockchain$stora = pod === null || pod === void 0 || (_pod$blockchain2 = pod.blockchain) === null || _pod$blockchain2 === void 0 ? void 0 : _pod$blockchain2.storage) !== null && _pod$blockchain$stora !== void 0 ? _pod$blockchain$stora : {}
      });
      var compiledBlockchain = podBlockchain.compile();
      return (compiledBlockchain === null || compiledBlockchain === void 0 || (_compiledBlockchain$u = compiledBlockchain.users) === null || _compiledBlockchain$u === void 0 ? void 0 : _compiledBlockchain$u.length) === 2 && compiledBlockchain.users.includes(contactId);
    });
  });
  var storedPods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var _useBlockchain2 = (0,Blockchain/* useBlockchain */.o)({
      compiler: podChain/* compiler */.cx,
      blockchains: storedPods.map(function (pod) {
        return pod.blockchain;
      }),
      dispatch: addToBlockchainDispatch
    }),
    compiledPods = _useBlockchain2.compiledBlockchains;
  var anyPodWithPeer = (0,react_redux/* useSelector */.d4)(function (state) {
    return !!state.pods.find(function (pod) {
      var _pod$blockchain$chain2, _pod$blockchain3, _pod$blockchain$stora2, _pod$blockchain4;
      var podBlockchain = new Blockchain/* default */.A({
        chain: (_pod$blockchain$chain2 = pod === null || pod === void 0 || (_pod$blockchain3 = pod.blockchain) === null || _pod$blockchain3 === void 0 ? void 0 : _pod$blockchain3.chain) !== null && _pod$blockchain$chain2 !== void 0 ? _pod$blockchain$chain2 : [],
        compiler: podChain/* compiler */.cx,
        storage: (_pod$blockchain$stora2 = pod === null || pod === void 0 || (_pod$blockchain4 = pod.blockchain) === null || _pod$blockchain4 === void 0 ? void 0 : _pod$blockchain4.storage) !== null && _pod$blockchain$stora2 !== void 0 ? _pod$blockchain$stora2 : {}
      });
      var compiledBlockchain = podBlockchain.compile();
      return compiledBlockchain.users.includes(contactId);
    });
  });
  var handleAddPeerToGroup = function handleAddPeerToGroup(contact, pod) {
    var _storedPods$find$bloc, _storedPods$find;
    console.log({
      contact: contact,
      pod: pod
    });
    var addNewUserBlocks = (0,podChain/* blockBuilders */.e3)().addMember({
      userId: contact.connectionId
    });
    var pendingUpdate = pod.addBlocks(addNewUserBlocks);
    var newPod = ContactDetails_objectSpread(ContactDetails_objectSpread({}, pendingUpdate), pod);
    var podBlockchain = (_storedPods$find$bloc = (_storedPods$find = storedPods.find(function (storedPod) {
      return storedPod.id === pod.id;
    })) === null || _storedPods$find === void 0 ? void 0 : _storedPods$find.blockchain) !== null && _storedPods$find$bloc !== void 0 ? _storedPods$find$bloc : [];
    sendMessage({
      type: "addToBlockchain",
      payload: newPod
    });
    sendMessage({
      type: "addNewPod",
      payload: {
        id: pod.id,
        pendingBlocks: [].concat(ContactDetails_toConsumableArray(podBlockchain.chain), ContactDetails_toConsumableArray(pendingUpdate.pendingBlocks)),
        pendingStorage: ContactDetails_objectSpread(ContactDetails_objectSpread({}, podBlockchain.storage), pendingUpdate.pendingStorage)
      },
      recipients: [contact.connectionId]
    });
    // .then(() => {
    //     navigate(`/pod/${newPod.id}`);
    // });
  };
  var numberOfPod = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods.length;
  });
  var _React$useState = index_js_default().useState(false),
    _React$useState2 = ContactDetails_slicedToArray(_React$useState, 2),
    expanded = _React$useState2[0],
    setExpanded = _React$useState2[1];
  var handleChange = function handleChange(panel) {
    return function (event, isExpanded) {
      setExpanded(isExpanded ? panel : false);
    };
  };
  var handleConnectToPeer = function handleConnectToPeer() {
    connectToPeer(contactId);
  };
  var handleCreateNewPod = function handleCreateNewPod() {
    var podBlockchain = new Blockchain/* default */.A({
      chain: [],
      compiler: podChain/* compiler */.cx,
      storage: {}
    });
    var newPodDetails = {
      id: Math.random().toString(36).slice(2),
      members: [contactId, userProfileId],
      name: chatName,
      avatar: "",
      from: userProfileId
    };
    var newPodBlocks = (0,podChain/* blockBuilders */.e3)().createPod(newPodDetails);
    podBlockchain.addBlocks(newPodBlocks);
    var pendingUpdate = podBlockchain.getUpdate();
    var newPod = ContactDetails_objectSpread(ContactDetails_objectSpread({}, pendingUpdate), newPodDetails);
    createNewPodDispatch(newPod);
    sendMessage({
      type: "addNewPod",
      payload: newPod
    }).then(function () {
      navigate("/pod/".concat(newPod.id));
    });
  };
  var handleRegisterNewDevice = function handleRegisterNewDevice() {
    if (anyPodWithPeer) {
      compiledPods.forEach(function (pod) {
        console.log({
          pod: pod
        });
        handleAddPeerToGroup(contact, pod);
      });
    } else {
      var podBlockchain = new Blockchain/* default */.A({
        chain: [],
        compiler: podChain/* compiler */.cx,
        storage: {}
      });
      var newPodDetails = {
        id: Math.random().toString(36).slice(2),
        members: [contactId, userProfileId],
        name: chatName,
        avatar: "",
        from: userProfileId,
        clone: true
      };
      var newPodBlocks = (0,podChain/* blockBuilders */.e3)().createPod(newPodDetails);
      podBlockchain.addBlocks(newPodBlocks);
      var pendingUpdate = podBlockchain.getUpdate();
      var newPod = ContactDetails_objectSpread(ContactDetails_objectSpread({}, pendingUpdate), newPodDetails);
      console.log({
        compiledPods: compiledPods
      });

      // compiledPods.forEach((pod) => {
      //     console.log({ pod })
      //     handleAddPeerToGroup(contact, pod);
      // });

      sendMessage({
        type: "addNewPod",
        payload: newPod
      }).then(function (_ref) {
        var canCreateClone = _ref.canCreateClone;
        if (!canCreateClone) return;
        console.log({
          canCreateClone: canCreateClone
        });
        if (!anyPodWithPeer) createNewPodDispatch(newPod);
        return navigate("/pod/".concat(newPod.id));
      });
    }
  };
  (0,index_js_.useEffect)(function () {
    if (!contact) {
      handleConnectToPeer();
    }
    if (userProfileId === contactId) {
      navigate(-1);
      navigate("/profile");
    }
  }, [contact]);
  var handleUpdateContactDisplayName = function handleUpdateContactDisplayName(e) {
    e.preventDefault();
    updateContactDisplayNameDispatch(e.target.value);
  };
  var _useState3 = (0,index_js_.useState)(null),
    _useState4 = ContactDetails_slicedToArray(_useState3, 2),
    activatedNumber = _useState4[0],
    setActivateNumber = _useState4[1];
  var NextButton = /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return setActivateNumber(activatedNumber + 1);
    }
  }, "Next");
  var PrevButton = /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      return setActivateNumber(activatedNumber - 1);
    }
  }, "Prev");
  var ref1 = (0,index_js_.useRef)(null);
  var ref2 = (0,index_js_.useRef)(null);
  var ref3 = (0,index_js_.useRef)(null);
  var coachList = [{
    activate: true,
    component: /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
      style: {
        color: "black"
      }
    }, "Change the display name of the peers. it will be updated throughout the app. ", /*#__PURE__*/index_js_default().createElement("br", null), NextButton, " "),
    reference: ref1,
    tooltip: {
      position: "top"
    }
  }, {
    activate: true,
    component: /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
      style: {
        color: "black"
      }
    }, "Create a new Pod with the peer", /*#__PURE__*/index_js_default().createElement("br", null), PrevButton, NextButton, " "),
    reference: ref2,
    tooltip: {
      position: "top"
    }
  }, {
    activate: true,
    component: /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
      style: {
        color: "black"
      }
    }, "More technical details and configuration for the peer.", /*#__PURE__*/index_js_default().createElement("br", null), PrevButton, NextButton, " "),
    reference: ref3,
    tooltip: {
      position: "top"
    }
  }];
  var coach = coachList[activatedNumber];
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: contact ? contact.displayName : "New Peer",
      backButton: "/contacts",
      avatarProps: {
        src: contact ? contact.avatar : "",
        alt: "",
        isOnline: isOnline
      },
      customButtons: [{
        icon: "help",
        onClick: function onClick() {
          return setActivateNumber(0);
        }
      }]
    }
  }, /*#__PURE__*/index_js_default().createElement(react_coach_mark_dist.CoachMark, coach), /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
    alt: contact ? contact.displayName : "requesting...",
    src: contact ? contact.avatar : "",
    style: {
      minHeight: "300px",
      minWidth: "300px",
      margin: "auto"
    }
  }), /*#__PURE__*/index_js_default().createElement("form", {
    noValidate: true,
    className: classes.form
  }, !contact && /*#__PURE__*/index_js_default().createElement(connect_to_peer_ConnectToPeer, {
    link: true
  }), !!contact && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    ref: ref1,
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "contactDisplayName",
    label: t("contactDetailsPage.contactDisplayName"),
    name: "contactDisplayName",
    defaultValue: contact ? contact.displayName : "",
    onChange: handleUpdateContactDisplayName
  }), podWithPeer && /*#__PURE__*/index_js_default().createElement(ListComponent, {
    list: [{
      id: contact.id,
      // name: `Go to pod with ${contact ? contact.displayName : ''}`,
      name: t("contactDetailsPage.goToPodWith", {
        displayName: contact ? contact.displayName : ""
      }),
      avatarUrl: contact ? contact.avatar : "",
      onClick: function onClick() {
        return navigate("/pod/".concat(podWithPeer.id));
      },
      isOnline: isOnline,
      unreadCount: (podWithPeer === null || podWithPeer === void 0 ? void 0 : podWithPeer.unreadCount) || 0
    }]
  }), !podWithPeer && /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    ref: ref2,
    expanded: expanded === "panel4",
    onChange: handleChange("panel4")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, t("contactDetailsPage.createNewPodWith", {
    displayName: contact ? contact.displayName : ""
  }))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    required: true,
    fullWidth: true,
    id: "chatName",
    label: t("contactDetailsPage.podName"),
    name: "chatName",
    value: chatName,
    onChange: function onChange(e) {
      return setChatName(e.target.value);
    },
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: function onClick() {
          return setChatName("".concat(chance.country({
            full: true
          })));
        },
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Refresh/* default */.A, null)))
    }
  }), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    className: classes.button,
    fullWidth: true,
    variant: "contained",
    color: "primary",
    disabled: !chatName,
    onClick: function onClick() {
      // removeContactDispatch(contact.id);
      // createNewPodDispatch();
      // navigate(-2);
      handleCreateNewPod();
    }
  }, t("contactDetailsPage.createPod")))), /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    ref: ref3,
    expanded: expanded === "advanced",
    onChange: handleChange("advanced")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, t("common.more"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, !anyPodWithPeer && /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: handleRegisterNewDevice
  }, t("contactDetailsPage.registerNewDevice")), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "peerId",
    label: t("contactDetailsPage.peerId"),
    name: "peerId",
    value: contact ? contact.id : "",
    InputProps: {
      readOnly: true
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: t("contactDetailsPage.connectionId"),
    name: "connectionId",
    value: contact ? contact.connectionId : "",
    InputProps: {
      readOnly: true
    }
  }),  false && /*#__PURE__*/0)))));
}
// EXTERNAL MODULE: ./node_modules/file-saver/dist/FileSaver.min.js
var FileSaver_min = __webpack_require__(4213);
var FileSaver_min_default = /*#__PURE__*/__webpack_require__.n(FileSaver_min);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Sync.js
var Sync = __webpack_require__(34606);
;// CONCATENATED MODULE: ./src/components/pages/profile/Profile.js
function Profile_toConsumableArray(arr) { return Profile_arrayWithoutHoles(arr) || Profile_iterableToArray(arr) || Profile_unsupportedIterableToArray(arr) || Profile_nonIterableSpread(); }
function Profile_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Profile_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Profile_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Profile_arrayLikeToArray(arr); }
function Profile_slicedToArray(arr, i) { return Profile_arrayWithHoles(arr) || Profile_iterableToArrayLimit(arr, i) || Profile_unsupportedIterableToArray(arr, i) || Profile_nonIterableRest(); }
function Profile_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Profile_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Profile_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Profile_arrayLikeToArray(o, minLen); }
function Profile_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Profile_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Profile_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

































var Profile_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    root: {
      flexGrow: 1
    },
    appBar: {
      height: theme.spacing(8)
    },
    form: {
      padding: theme.spacing(3)
    },
    title: {
      fontWeight: "bold",
      textAlign: "left",
      display: "flex",
      alignItems: "center",
      height: "100%",
      padding: "0 ".concat(theme.spacing(3))
    },
    img: {
      width: "100%"
    },
    hidden: {
      display: "none"
    }
  };
});
function Profile_Profile(_ref) {
  var _userProfile$settings, _userProfile$settings2;
  var qr = _ref.qr;
  var dispatch = (0,react_redux/* useDispatch */.wA)();
  var _useCryptography = (0,Cryptography.useCryptography)(),
    randomString = _useCryptography.randomString;
  var classes = Profile_useStyles();
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var qrcodeRef = (0,index_js_.useRef)(null);
  var inputRef = (0,index_js_.useRef)(null);
  var store = (0,react_redux/* useStore */.Pj)();
  // make it so the form submits and updates the username in redux and navigates to the conversations page
  // const [username, setUsername] = useState("");
  var _useState = (0,index_js_.useState)(""),
    _useState2 = Profile_slicedToArray(_useState, 2),
    contactNamePreset = _useState2[0],
    setContactNamePreset = _useState2[1];
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var _React$useState = index_js_default().useState([]),
    _React$useState2 = Profile_slicedToArray(_React$useState, 2),
    expanded = _React$useState2[0],
    setExpanded = _React$useState2[1];
  var handleChange = function handleChange(panel) {
    return function (event, isExpanded) {
      if (isExpanded) {
        setExpanded(function (prevExpanded) {
          return [].concat(Profile_toConsumableArray(prevExpanded), [panel]);
        });
      } else {
        setExpanded(function (prevExpanded) {
          return prevExpanded.filter(function (item) {
            return item !== panel;
          });
        });
      }
    };
  };
  (0,index_js_.useEffect)(function () {
    logToNLevelAnalytics("profilePageLoaded");
  }, []);
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var addToBlockchainDispatch = function addToBlockchainDispatch(_ref2) {
    var block = _ref2.block,
      blocks = _ref2.blocks,
      storage = _ref2.storage;
    return dispatch((0,userProfileSlice/* addToBlockchain */.XE)({
      block: block,
      blocks: blocks,
      storage: storage
    }));
  };
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain,
      dispatch: addToBlockchainDispatch
    }),
    userProfile = _useBlockchain.compiledBlockchain,
    addProfileBlocks = _useBlockchain.addBlocks;
  var storedConnectionId = userProfile.connectionId;
  var storedUsername = userProfile.displayName;
  var storeInAppNotication = userProfile === null || userProfile === void 0 || (_userProfile$settings = userProfile.settings) === null || _userProfile$settings === void 0 ? void 0 : _userProfile$settings.inAppNotification;
  var storeBrowserNotication = userProfile === null || userProfile === void 0 || (_userProfile$settings2 = userProfile.settings) === null || _userProfile$settings2 === void 0 ? void 0 : _userProfile$settings2.browserNotification;
  var storedEncryptionSignature = userProfile.encryptionSignature;
  var storedAvatar = userProfile.avatar;

  // const storedUsername = useSelector((state) => state.userProfile.displayName);
  // const storedConnectionId = useSelector((state) => state.userProfile.id);
  // const storeInAppNotication = useSelector((state) => state.userProfile.inAppNotification)
  // const storeBrowserNotication = useSelector((state) => state.userProfile.browserNotification)
  // const storedAvatar = useSelector((state) => state.userProfile.avatar);
  var updateUsernameDispatch = function updateUsernameDispatch(username) {
    return dispatch((0,userProfileSlice/* updateUsername */.kZ)(username));
  };
  var updateConnectionIdDispatch = function updateConnectionIdDispatch(connectionId) {
    return dispatch((0,userProfileSlice/* updatePeerId */.jX)(connectionId));
  };
  var updateAvatarDispatch = function updateAvatarDispatch(avatar) {
    return dispatch((0,userProfileSlice/* updateAvatar */.xG)(avatar));
  };
  // const setInAppNotificationDispatch = (inAppNotification) => dispatch(setInAppNotification(inAppNotification));
  // const setBrowserNotificationDispatch = (browserNotification) => dispatch(setBrowserNotification(browserNotification));
  // const setEncryptionSignatureDispatch = (encryptionSignature) => dispatch(setEncryptionSignature(encryptionSignature));

  var addInappNotificationBlock = function addInappNotificationBlock(e) {
    var block = (0,profileChain/* blockBuilders */.e)().updateInAppNotification({
      inAppNotification: e.target.checked
    });
    console.log({
      block: block
    });
    addProfileBlocks(block);
  };
  var addBrowserNotificationBlock = function addBrowserNotificationBlock(e) {
    var block = (0,profileChain/* blockBuilders */.e)().updateBrowserNotification({
      browserNotification: e.target.checked
    });
    addProfileBlocks(block);
  };
  var addEncryptionSignatureBlock = function addEncryptionSignatureBlock(newSignature) {
    var block = (0,profileChain/* blockBuilders */.e)().updateEncryptionSignature({
      encryptionSignature: newSignature
    });
    addProfileBlocks(block);
  };
  var logoutDispatch = function logoutDispatch() {
    return dispatch((0,userProfileSlice/* logout */.ri)());
  };

  // const handleUsernameChange = (event) => {
  //   setUsername(event.target.value);
  // };

  (0,index_js_.useEffect)(function () {
    if (qr && qrcodeRef.current) {
      qrcodeRef.current.scrollIntoView({
        behaviour: "smooth"
      });
    }
  }, [qr]);
  var handleUsernameChange = function handleUsernameChange(e) {
    updateUsernameDispatch(e.target.value);
  };
  var handleContactNamePresetChange = function handleContactNamePresetChange(e) {
    setContactNamePreset(e.target.value);
  };
  var handleConnectionIdChange = function handleConnectionIdChange(e) {
    updateConnectionIdDispatch(e.target.value);
  };
  var handleLogout = function handleLogout() {
    logoutDispatch();
  };
  var handleAvatar = function handleAvatar(_ref3) {
    var files = _ref3.target.files;
    var f = files[0];
    var img = new Image();
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    img.onload = function () {
      var width = img.width;
      var height = img.height;
      if (width > height) {
        if (width > 300) {
          height *= 300 / width;
          width = 300;
        }
      } else {
        if (height > 300) {
          width *= 300 / height;
          height = 300;
        }
      }
      canvas.width = width;
      canvas.height = height;
      ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);
      var base64String = canvas.toDataURL("image/jpeg", 1.0);
      updateAvatarDispatch(base64String);
    };
    img.src = URL.createObjectURL(f);
  };
  var handleCopyConnectionIdToClipboard = function handleCopyConnectionIdToClipboard() {
    navigator.clipboard.writeText("".concat(window.location.origin, "/#/login/").concat(storedConnectionId).concat(contactNamePreset ? "/".concat(contactNamePreset) : ""));
    // navigate(`/contacts/${storedConnectionId}`)
  };
  var inAppNotificationLocale = t("common.inAppNotification");
  var browserNotificationLocale = t("common.browserNotification");

  // const isSubmitDisabled = !username;
  var inAppNotifications = {
    fullWidth: true,
    inputProps: {
      "aria-label": "Allow in-app notification"
    },
    defaultChecked: storeInAppNotication,
    label: inAppNotificationLocale,
    onChange: addInappNotificationBlock
  };
  var browserNotification = {
    fullWidth: true,
    inputProps: {
      "aria-label": "Allow browser notification"
    },
    defaultChecked: storeBrowserNotication,
    label: browserNotificationLocale,
    onChange: addBrowserNotificationBlock
  };
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: t("profilePage.pageTitle"),
      backButton: "/pods",
      // avatarProps: {
      //   src: storedAvatar,
      //   alt: "random"
      // },
      menuProps: {
        icon: "more",
        items: [{
          text: t("profilePage.logout"),
          icon: "logout",
          onClick: handleLogout
        }]
      }
    }
  }, /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
    src: storedAvatar,
    style: {
      minHeight: "300px",
      minWidth: "300px",
      margin: "auto"
    }
  }), /*#__PURE__*/index_js_default().createElement("form", {
    noValidate: true,
    className: classes.form
  }, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: function onClick() {
      var _inputRef$current;
      return inputRef === null || inputRef === void 0 || (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.click();
    }
  }, t("profilePage.changeAvatar")), /*#__PURE__*/index_js_default().createElement("input", {
    type: "file",
    ref: inputRef,
    className: classes.hidden,
    name: "picture",
    accept: "image/*",
    onChange: handleAvatar
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    required: true,
    fullWidth: true,
    id: "displayName",
    label: t("profilePage.displayName"),
    name: "displayName",
    defaultValue: storedUsername,
    onChange: handleUsernameChange
  }), /*#__PURE__*/index_js_default().createElement(connect_to_peer_ConnectToPeer, {
    qr: qr
  }), /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    expanded: expanded.includes("admin"),
    onChange: handleChange("admin")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: qr ? undefined : /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, t("profilePage.more"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    required: true,
    fullWidth: true,
    id: "regenerateConnectionId",
    label: t("profilePage.regenerateConnectionId"),
    name: "regenerateConnectionId",
    value: storedConnectionId,
    onChange: handleConnectionIdChange,
    InputProps: {
      readOnly: true,
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: function onClick() {
          return handleConnectionIdChange({
            target: {
              value: randomString()
            }
          });
        },
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Sync/* default */.A, null)))
    }
  }), /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    expanded: expanded.includes("notifications"),
    onChange: handleChange("notifications")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, t("profilePage.preferences"))), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(FormGroup/* default */.A, null, /*#__PURE__*/index_js_default().createElement(FormControlLabel/* default */.A, {
    control: /*#__PURE__*/index_js_default().createElement(Switch/* default */.A, inAppNotifications),
    label: t("common.inAppNotification")
  }), /*#__PURE__*/index_js_default().createElement(FormControlLabel/* default */.A, {
    control: /*#__PURE__*/index_js_default().createElement(Switch/* default */.A, browserNotification),
    label: t("common.browserNotification")
  })))), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement(signatureCanvas_SignatureCanvas, {
    heading: t("components.cryptoSignature"),
    defaultValue: storedEncryptionSignature,
    onChange: addEncryptionSignatureBlock
  }), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: function onClick() {
      var zip = new (jszip_min_default())();
      zip.file("data.json", JSON.stringify(store.getState()));
      zip.generateAsync({
        type: "blob"
      }).then(function (content) {
        FileSaver_min_default().saveAs(content, "download.zip");
      });
    }
  }, t("profilePage.backupProfile"))))));
}
;// CONCATENATED MODULE: ./src/components/pages/files/Files.js
function Files_typeof(o) { "@babel/helpers - typeof"; return Files_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Files_typeof(o); }
function Files_slicedToArray(arr, i) { return Files_arrayWithHoles(arr) || Files_iterableToArrayLimit(arr, i) || Files_unsupportedIterableToArray(arr, i) || Files_nonIterableRest(); }
function Files_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Files_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Files_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Files_arrayLikeToArray(o, minLen); }
function Files_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Files_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Files_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

































var Files_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    appBar: {
      height: theme.spacing(8)
    },
    title: {
      fontWeight: "bold",
      textAlign: "left",
      display: "flex",
      alignItems: "center",
      height: "100%",
      padding: "0 ".concat(theme.spacing(3))
    },
    chevron: {
      justifyContent: "right"
    },
    fab: {
      position: "absolute !important",
      bottom: theme.spacing(2),
      right: theme.spacing(2)
    },
    hidden: {
      display: "none"
    },
    qrcodeReader: {
      width: "100vw",
      top: 0,
      left: 0,
      position: "absolute",
      zIndex: 10000
    },
    connect: {
      margin: "0 ".concat(theme.spacing(2))
    }
  };
});
function Files_ContactsListPage() {
  var _storedPods$find$bloc;
  var classes = Files_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var _useParams = (0,react_router_dist/* useParams */.g)(),
    podId = _useParams.podId;
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain
    }),
    userProfile = _useBlockchain.compiledBlockchain;
  var storedConnectionId = userProfile.connectionId;
  // const storedConnectionId = useSelector((state) => state.userProfile.connectionId);
  var storedPods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var _usePeer = (0,usePeer/* default */.A)([]),
    activeConnections = _usePeer.activeConnections;
  var _useState = (0,index_js_.useState)(false),
    _useState2 = Files_slicedToArray(_useState, 2),
    scanning = _useState2[0],
    setScanning = _useState2[1];
  var _useState3 = (0,index_js_.useState)("No result"),
    _useState4 = Files_slicedToArray(_useState3, 2),
    result = _useState4[0],
    setResult = _useState4[1];
  var filesForPod = (_storedPods$find$bloc = storedPods.find(function (pod) {
    return pod.id === podId;
  }).blockchain) === null || _storedPods$find$bloc === void 0 ? void 0 : _storedPods$find$bloc.storage;
  console.log({
    filesForPod: filesForPod
  });
  var fileList = Object.keys(filesForPod).filter(function (fileKey) {
    return Files_typeof(filesForPod[fileKey]) === "object";
  }).map(function (fileKey) {
    var file = filesForPod[fileKey];
    return {
      id: file.fileKey,
      name: file.name,
      avatarUrl: file.type === "image" ? file.data : "",
      onClick: function onClick() {
        return navigate("/pod/".concat(podId, "/file/").concat(fileKey));
      }
    };
  });
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: "Files",
      backButton: true
      // avatarProps: {
      //   src: "https://source.unsplash.com/random/400x200?login",
      //   alt: "random"
      // },
      // menuProps: {
      //   icon: 'account',
      //   items: [
      //     { text: 'Profile', icon: 'account', onClick: () => navigate('/profile') },
      //   ]
      // }
      // menuProps: {
      //     icon: 'more',
      //     items: [
      //       { text: 'Profile', icon: 'account', onClick: () => navigate('/profile') },
      //       { text: 'About', icon: 'info', onClick: () => window.location = 'https://positive-intentions.com' },
      //     ]
      //   }
    }
    // speedDialProps={{
    //     actions: [
    //         { icon: <CameraAltIcon />, name: 'Camera', onClick: () => setScanning(true) },
    //         { icon: <QrCode2Icon />, name: 'QR code', onClick: () => navigate(`/profile/qr`) },
    //         { icon: <LinkIcon />, name: 'share link', onClick: () => navigator.clipboard.writeText(`${window.location.origin}/login/${storedConnectionId}`)},
    //     ],
    // }}
    //   fabProps={{
    //     icon: "add",
    //     onClick: () => {
    //       console.log("add clicked");
    //     }
    //   }}
  }, /*#__PURE__*/index_js_default().createElement(ListComponent, {
    list: fileList
  }));
}
;// CONCATENATED MODULE: ./src/components/pages/file/File.js
function File_typeof(o) { "@babel/helpers - typeof"; return File_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, File_typeof(o); }
function File_toConsumableArray(arr) { return File_arrayWithoutHoles(arr) || File_iterableToArray(arr) || File_unsupportedIterableToArray(arr) || File_nonIterableSpread(); }
function File_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function File_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function File_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return File_arrayLikeToArray(arr); }
function File_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function File_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? File_ownKeys(Object(t), !0).forEach(function (r) { File_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : File_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function File_defineProperty(obj, key, value) { key = File_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function File_toPropertyKey(t) { var i = File_toPrimitive(t, "string"); return "symbol" == File_typeof(i) ? i : i + ""; }
function File_toPrimitive(t, r) { if ("object" != File_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != File_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function File_slicedToArray(arr, i) { return File_arrayWithHoles(arr) || File_iterableToArrayLimit(arr, i) || File_unsupportedIterableToArray(arr, i) || File_nonIterableRest(); }
function File_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function File_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return File_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return File_arrayLikeToArray(o, minLen); }
function File_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function File_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function File_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }







// import { updateUsername } from "../../redux/slices/userProfileSlice";














var File_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    root: {
      flexGrow: 1
    },
    appBar: {
      height: theme.spacing(8)
    },
    form: {
      padding: theme.spacing(3)
    },
    title: {
      fontWeight: "bold",
      textAlign: "left",
      display: "flex",
      alignItems: "center",
      height: "100%",
      padding: "0 ".concat(theme.spacing(3))
    },
    img: {
      width: "100%"
    }
  };
});
function File() {
  var classes = File_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var dispatch = (0,react_redux/* useDispatch */.wA)();
  var _useParams = (0,react_router_dist/* useParams */.g)(),
    podId = _useParams.podId,
    fileId = _useParams.fileId;
  var _React$useState = index_js_default().useState(null),
    _React$useState2 = File_slicedToArray(_React$useState, 2),
    anchorEl = _React$useState2[0],
    setAnchorEl = _React$useState2[1];
  var podDetails = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods.find(function (pod) {
      return pod.id === podId;
    });
  });
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  });
  var updatePodNameDispatch = function updatePodNameDispatch(podName) {
    return dispatch((0,podsSlice/* updatePodName */.AZ)(podName));
  };
  var addUserToPodDispatch = function addUserToPodDispatch(userId) {
    return dispatch((0,podsSlice/* addUserToPod */.zv)({
      podId: podId,
      userId: userId
    }));
  };
  var removeFileFromPodDispatch = function removeFileFromPodDispatch() {
    return dispatch((0,podsSlice/* removeFileFromPod */.E6)({
      podId: podId,
      fileId: fileId
    }));
  };
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain
    }),
    userProfile = _useBlockchain.compiledBlockchain;
  var storedConnectionId = userProfile.connectionId;
  // const storedConnectionId = useSelector((state) => state.userProfile.id);
  var _usePeer = (0,usePeer/* default */.A)((podDetails === null || podDetails === void 0 ? void 0 : podDetails.members) || []),
    sendMessage = _usePeer.sendMessage,
    connectToPeer = _usePeer.connectToPeer,
    activeConnections = _usePeer.activeConnections;
  var _React$useState3 = index_js_default().useState(false),
    _React$useState4 = File_slicedToArray(_React$useState3, 2),
    expanded = _React$useState4[0],
    setExpanded = _React$useState4[1];
  var handleChange = function handleChange(panel) {
    return function (event, isExpanded) {
      setExpanded(isExpanded ? panel : false);
    };
  };
  var handlePodNameChange = function handlePodNameChange(e) {
    updatePodNameDispatch({
      podId: podId,
      name: e.target.value
    });
  };
  var handleMenu = function handleMenu(event) {
    setAnchorEl(event.currentTarget);
  };
  var handleClose = function handleClose() {
    setAnchorEl(null);
  };
  var membersList = podDetails.members
  // filter out my connection id
  .filter(function (member) {
    return member !== storedConnectionId;
  }).map(function (member) {
    var contact = contacts.find(function (contact) {
      return contact.id === member;
    });
    if (!contact) connectToPeer(member);
    return contact ? {
      id: contact.id,
      name: contact.displayName,
      avatarUrl: contact.avatar,
      onClick: function onClick() {
        return navigate("/contact/".concat(contact.connectionId));
      },
      isOnline: activeConnections.includes(member)
    } : {
      id: member,
      name: "connecting...",
      avatarUrl: "https://source.unsplash.com/random/400x200?login",
      onClick: function onClick() {
        return navigate("/contact/".concat(member));
      }
    };
  });
  var contactsThatCanBeAdded = contacts.filter(function (contact) {
    return !podDetails.members.includes(contact.id);
  }).map(function (contact) {
    return {
      id: contact.id,
      name: contact.displayName,
      avatarUrl: contact.avatar,
      onClick: function onClick() {
        console.log("adding user to pod");
        sendMessage({
          type: "addNewPod",
          recipients: [contact.id],
          payload: File_objectSpread(File_objectSpread({}, podDetails), {}, {
            members: [].concat(File_toConsumableArray(podDetails.members), [contact.id])
          })
        }).then(function () {
          addUserToPodDispatch(contact.id);
        });
        sendMessage({
          type: "addUserToPod",
          recipients: podDetails.members,
          payload: {
            podId: podId,
            userId: contact.id
          }
        });
      }
    };
  });
  function calculateSize(sizeInBytes) {
    var suffixes = ["B", "KB", "MB", "GB"];
    var size = sizeInBytes;
    var suffixIndex = 0;
    while (size >= 1024 && suffixIndex < suffixes.length - 1) {
      size /= 1024;
      suffixIndex++;
    }
    return "".concat(size.toFixed(2), " ").concat(suffixes[suffixIndex]);
  }
  function calculateSizeFromBase64() {
    var base64String = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var paddingFactor = base64String.endsWith("==") ? 2 : base64String.endsWith("=") ? 1 : 0;
    var decodedSize = base64String.length / 4 * 3 - paddingFactor;
    var suffixes = ["B", "KB", "MB", "GB"];
    var size = decodedSize;
    var suffixIndex = 0;
    while (size >= 1024 && suffixIndex < suffixes.length - 1) {
      size /= 1024;
      suffixIndex++;
    }
    return "".concat(size.toFixed(2), " ").concat(suffixes[suffixIndex]);
  }
  var attachment = (0,react_redux/* useSelector */.d4)(function (state) {
    var _state$pods$find;
    return (_state$pods$find = state.pods.find(function (pod) {
      return pod.id === podId;
    })) === null || _state$pods$find === void 0 || (_state$pods$find = _state$pods$find.blockchain) === null || _state$pods$find === void 0 ? void 0 : _state$pods$find.storage[fileId];
  });
  if (!attachment) return "no file found";
  var santizedAttachmentSrc = function santizedAttachmentSrc(attachment) {
    var urlRegex = new RegExp("^(http|https)://[a-zA-Z0-9-.]+.[a-zA-Z]{2,3}(/S*)?$");
    var base64Regex = new RegExp("data:image/([a-zA-Z]*);base64,([a-zA-Z0-9+/=]*)");
    if (urlRegex.test(attachment)) {
      return attachment;
    } else if (base64Regex.test(attachment)) {
      return attachment;
    } else {
      return "";
    }
  };
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: attachment === null || attachment === void 0 ? void 0 : attachment.name,
      backButton: "/pod/".concat(podId),
      avatarProps: {
        src: (attachment === null || attachment === void 0 ? void 0 : attachment.type) === "image" ? attachment === null || attachment === void 0 ? void 0 : attachment.data : "",
        alt: "random"
      }
    }
  }, (attachment === null || attachment === void 0 ? void 0 : attachment.type) === "image" && /*#__PURE__*/index_js_default().createElement("img", {
    alt: "Remy Sharp",
    src: santizedAttachmentSrc(attachment === null || attachment === void 0 ? void 0 : attachment.data),
    style: {
      width: "100vw"
    }
  }), /*#__PURE__*/index_js_default().createElement("form", {
    noValidate: true,
    className: classes.form
  }, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    required: true,
    fullWidth: true,
    id: "fileName",
    label: "Filename",
    name: "fileName",
    value: attachment === null || attachment === void 0 ? void 0 : attachment.name,
    InputProps: {
      readOnly: true
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    required: true,
    fullWidth: true,
    id: "filseSize",
    label: "File size",
    name: "fileSize",
    value: calculateSizeFromBase64(attachment === null || attachment === void 0 ? void 0 : attachment.data),
    InputProps: {
      readOnly: true
    }
  }), /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    expanded: expanded === "advanced",
    onChange: handleChange("advanced")
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel4bh-content",
    id: "panel4bh-header"
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    sx: {
      flexShrink: 0
    }
  }, "Advanced")), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "sha",
    label: "File SHA",
    name: "sha",
    value: attachment === null || attachment === void 0 ? void 0 : attachment.sha,
    InputProps: {
      readOnly: true
    }
  }), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    color: "error",
    onClick: function onClick() {
      navigate("/pod/".concat(podId, "/files"));
      console.log("deleting file");
      removeFileFromPodDispatch();
      // updateUsernameDispatch("");
    }
  }, "Delete file"))), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    color: "primary",
    onClick: function onClick() {
      console.log("downloading file");
      var element = document.createElement("a");
      var isBase64 = attachment === null || attachment === void 0 ? void 0 : attachment.data.startsWith("data:");
      element.href = isBase64 && (attachment === null || attachment === void 0 ? void 0 : attachment.data); // URL.createObjectURL(file);
      element.download = attachment === null || attachment === void 0 ? void 0 : attachment.name;
      document.body.appendChild(element);
      element.click();
    }
  }, "Download")));
}
// EXTERNAL MODULE: ./src/components/atomic/molecules/thread/Thread.js + 3 modules
var Thread = __webpack_require__(48622);
;// CONCATENATED MODULE: ./src/components/utils/calculateMd5.js
function calculateMD5(str) {
  var rotateLeft = function rotateLeft(value, shift) {
    return value << shift | value >>> 32 - shift;
  };
  var addUnsigned = function addUnsigned(x, y) {
    var carry = 0;
    var sum = 0;
    var xWord = x & 0x7fffffff;
    var yWord = y & 0x7fffffff;
    for (var i = 0; i < 32; i++) {
      var bitX = xWord >> i & 1;
      var bitY = yWord >> i & 1;
      var sumBits = bitX + bitY + carry;
      var bitSum = sumBits & 1;
      carry = sumBits >= 2 ? 1 : 0;
      sum |= bitSum << i;
    }
    return sum;
  };
  var toHex = function toHex(value) {
    var hex = "";
    var charSet = "0123456789abcdef";
    for (var i = 0; i < 8; i++) {
      var _byte = value >>> i * 4 & 0x0f;
      hex += charSet.charAt(_byte);
    }
    return hex;
  };
  var utf8Encode = function utf8Encode(str) {
    var utf8Text = "";
    for (var i = 0; i < str.length; i++) {
      var charCode = str.charCodeAt(i);
      if (charCode < 0x80) {
        utf8Text += String.fromCharCode(charCode);
      } else if (charCode < 0x800) {
        utf8Text += String.fromCharCode(0xc0 | charCode >> 6);
        utf8Text += String.fromCharCode(0x80 | charCode & 0x3f);
      } else if (charCode < 0x10000) {
        utf8Text += String.fromCharCode(0xe0 | charCode >> 12);
        utf8Text += String.fromCharCode(0x80 | charCode >> 6 & 0x3f);
        utf8Text += String.fromCharCode(0x80 | charCode & 0x3f);
      } else {
        utf8Text += String.fromCharCode(0xf0 | charCode >> 18);
        utf8Text += String.fromCharCode(0x80 | charCode >> 12 & 0x3f);
        utf8Text += String.fromCharCode(0x80 | charCode >> 6 & 0x3f);
        utf8Text += String.fromCharCode(0x80 | charCode & 0x3f);
      }
    }
    return utf8Text;
  };
  var strToWords = function strToWords(str) {
    var wordCount = (str.length + 8 >> 6) + 1;
    var words = new Array(wordCount * 16).fill(0);
    var strLength = str.length;
    var i;
    for (i = 0; i < strLength; i++) {
      words[i >> 2] |= str.charCodeAt(i) << i % 4 * 8;
    }
    words[i >> 2] |= 0x80 << i % 4 * 8;
    words[wordCount * 16 - 2] = strLength * 8;
    return words;
  };
  var md5Calc = function md5Calc(input) {
    var constants = [];
    for (var i = 0; i < 64; i++) {
      constants[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 0x100000000);
    }
    var a = 0x67452301;
    var b = 0xefcdab89;
    var c = 0x98badcfe;
    var d = 0x10325476;
    var words = strToWords(input);
    var wordCount = words.length;
    for (var _i = 0; _i < wordCount; _i += 16) {
      var aa = a;
      var bb = b;
      var cc = c;
      var dd = d;
      for (var j = 0; j < 64; j++) {
        var f = void 0,
          g = void 0;
        if (j < 16) {
          f = b & c | ~b & d;
          g = j;
        } else if (j < 32) {
          f = d & b | ~d & c;
          g = (5 * j + 1) % 16;
        } else if (j < 48) {
          f = b ^ c ^ d;
          g = (3 * j + 5) % 16;
        } else {
          f = c ^ (b | ~d);
          g = 7 * j % 16;
        }
        var temp = d;
        d = c;
        c = b;
        b = addUnsigned(b, rotateLeft(a + f + constants[j] + words[_i + g], [7, 12, 17, 22][j % 4]));
        a = temp;
      }
      a = addUnsigned(a, aa);
      b = addUnsigned(b, bb);
      c = addUnsigned(c, cc);
      d = addUnsigned(d, dd);
    }
    return [a, b, c, d];
  };
  var hashWords = md5Calc(utf8Encode(str));
  var hashHex = "";
  for (var i = 0; i < 4; i++) {
    hashHex += toHex(hashWords[i]);
  }
  return hashHex;
}

//   const inputString = 'Hello, World!';
//   const md5Hash = calculateMD5(inputString);
//   console.log('MD5:', md5Hash);

/* harmony default export */ const calculateMd5 = (calculateMD5);
// EXTERNAL MODULE: ./node_modules/react-split-pane/dist/index.esm.js + 1 modules
var index_esm = __webpack_require__(46898);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/components/pages/feed/splitpanestyle.css
var splitpanestyle = __webpack_require__(23385);
;// CONCATENATED MODULE: ./src/components/pages/feed/splitpanestyle.css

      
      
      
      
      
      
      
      
      

var splitpanestyle_options = {};

splitpanestyle_options.styleTagTransform = (styleTagTransform_default());
splitpanestyle_options.setAttributes = (setAttributesWithoutAttributes_default());

      splitpanestyle_options.insert = insertBySelector_default().bind(null, "head");
    
splitpanestyle_options.domAPI = (styleDomAPI_default());
splitpanestyle_options.insertStyleElement = (insertStyleElement_default());

var splitpanestyle_update = injectStylesIntoStyleTag_default()(splitpanestyle/* default */.A, splitpanestyle_options);




       /* harmony default export */ const feed_splitpanestyle = (splitpanestyle/* default */.A && splitpanestyle/* default */.A.locals ? splitpanestyle/* default */.A.locals : undefined);

;// CONCATENATED MODULE: ./src/components/pages/feed/Feed.js
function Feed_typeof(o) { "@babel/helpers - typeof"; return Feed_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Feed_typeof(o); }
function Feed_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function Feed_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? Feed_ownKeys(Object(t), !0).forEach(function (r) { Feed_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : Feed_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function Feed_defineProperty(obj, key, value) { key = Feed_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Feed_toPropertyKey(t) { var i = Feed_toPrimitive(t, "string"); return "symbol" == Feed_typeof(i) ? i : i + ""; }
function Feed_toPrimitive(t, r) { if ("object" != Feed_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Feed_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Feed_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Feed_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Feed_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Feed_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function Feed_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function Feed_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Feed_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Feed_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function Feed_toConsumableArray(arr) { return Feed_arrayWithoutHoles(arr) || Feed_iterableToArray(arr) || Feed_unsupportedIterableToArray(arr) || Feed_nonIterableSpread(); }
function Feed_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Feed_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Feed_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Feed_arrayLikeToArray(arr); }
function Feed_slicedToArray(arr, i) { return Feed_arrayWithHoles(arr) || Feed_iterableToArrayLimit(arr, i) || Feed_unsupportedIterableToArray(arr, i) || Feed_nonIterableRest(); }
function Feed_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Feed_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Feed_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Feed_arrayLikeToArray(o, minLen); }
function Feed_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Feed_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Feed_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }




































var Feed_lightBackground = "/backgrounds/light-leaves.png";
var Feed_darkBackground = "/backgrounds/dark-leaves.png";
var Feed_calculateHash = calculateSha256/* default */.A;
var Feed_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    root: {
      flexGrow: 1,
      paddingBottom: theme.spacing(8)
    },
    appBar: {
      height: theme.spacing(8)
    },
    form: {
      padding: theme.spacing(3)
    },
    title: {
      fontWeight: "bold",
      textAlign: "left",
      display: "flex",
      alignItems: "center",
      height: "100%",
      padding: "0 ".concat(theme.spacing(3))
    },
    img: {
      width: "100%"
    },
    conversation: {
      paddingBottom: theme.spacing(8)
    },
    messageInput: {
      backgroundColor: theme.palette.mode === "dark" ? "#303030" : "#f0f8ff"
    }
  };
});
function Feed() {
  var _podBlockchain$users2, _replyMessage$timesta;
  var _useParams = (0,react_router_dist/* useParams */.g)(),
    podId = _useParams.podId;
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var classes = Feed_useStyles();
  var theme = (0,useTheme/* default */.A)();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var storedPods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var storedContacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  });
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var addToBlockchainDispatch = function addToBlockchainDispatch(_ref) {
    var block = _ref.block,
      blocks = _ref.blocks,
      storage = _ref.storage;
    return dispatch((0,podsSlice/* addToBlockchain */.XE)({
      podId: podId,
      block: block,
      blocks: blocks,
      storage: storage
    }));
  };
  var addToPodsBlockchainDispatch = function addToPodsBlockchainDispatch(update) {
    return dispatch((0,podsSlice/* addToBlockchain */.XE)(update));
  };
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain,
      dispatch: addToBlockchainDispatch
    }),
    userProfile = _useBlockchain.compiledBlockchain,
    addBlocksToProfile = _useBlockchain.addBlocks;
  var storedConnectionId = userProfile.connectionId;
  var storedUsername = userProfile.displayName;
  var storedAvatar = userProfile.avatar;

  // const storedConnectionId = useSelector((state) => state.userProfile.id);
  // const storedUsername = useSelector((state) => state.userProfile.displayName);
  // const storedAvatar = useSelector((state) => state.userProfile.avatar);
  var dispatch = (0,react_redux/* useDispatch */.wA)();
  var addMessageDispatch = function addMessageDispatch(message) {
    return dispatch((0,podsSlice/* addMessage */.tj)(message));
  };
  var setShouldHangupDispatch = function setShouldHangupDispatch() {
    return dispatch((0,podsSlice/* setShouldHangup */.d6)({
      podId: podId,
      shouldHangUp: false
    }));
  };
  var updatePodUnreadCountDispatch = function updatePodUnreadCountDispatch(podId, unreadCount) {
    return dispatch((0,podsSlice/* updatePodUnreadCount */.ZH)({
      podId: podId,
      unreadCount: unreadCount
    }));
  };
  var _useState = (0,index_js_.useState)(""),
    _useState2 = Feed_slicedToArray(_useState, 2),
    messageInputValue = _useState2[0],
    setMessageInputValue = _useState2[1];
  var _useState3 = (0,index_js_.useState)(null),
    _useState4 = Feed_slicedToArray(_useState3, 2),
    mediaStream = _useState4[0],
    setMediaStream = _useState4[1];
  var _useState5 = (0,index_js_.useState)(false),
    _useState6 = Feed_slicedToArray(_useState5, 2),
    callActive = _useState6[0],
    setCallActive = _useState6[1];
  var _useState7 = (0,index_js_.useState)(null),
    _useState8 = Feed_slicedToArray(_useState7, 2),
    imageAttachment = _useState8[0],
    setImageAttachment = _useState8[1];
  var _useState9 = (0,index_js_.useState)(null),
    _useState10 = Feed_slicedToArray(_useState9, 2),
    videoAttachment = _useState10[0],
    setVideoAttachment = _useState10[1];
  var _useState11 = (0,index_js_.useState)(null),
    _useState12 = Feed_slicedToArray(_useState11, 2),
    fileAttachment = _useState12[0],
    setFileAttachment = _useState12[1];
  var _useState13 = (0,index_js_.useState)(null),
    _useState14 = Feed_slicedToArray(_useState13, 2),
    linkAttachment = _useState14[0],
    setLinkAttachment = _useState14[1];
  var _useState15 = (0,index_js_.useState)(false),
    _useState16 = Feed_slicedToArray(_useState15, 2),
    isLoadingFile = _useState16[0],
    setIsLoadingFile = _useState16[1];
  var inputRef = (0,index_js_.useRef)(null);
  var fileInputRef = (0,index_js_.useRef)(null);
  // const filesForPod = []; // useSelector((state) => state.storage[podId]) || [];

  var addStorageItemDispatch = function addStorageItemDispatch(item) {
    return dispatch((0,storageSlice/* addStorageItem */.O7)({
      podId: podId,
      item: item
    }));
  };
  var conversation = storedPods.find(function (pod) {
    return pod.id === podId;
  });
  // const podBlockchain = useMemo(() => new Blockchain({
  //   chain: conversation?.blockchain?.chain || [],
  //   compiler: podCompiler,
  //   storage: conversation?.blockchain?.storage || [],
  // }), [conversation?.blockchain?.chain, conversation?.blockchain?.storage])

  // const compiedBlockchain = useMemo(() => podBlockchain.compile(), [podBlockchain]);

  var _useBlockchain2 = (0,Blockchain/* useBlockchain */.o)({
      compiler: podChain/* compiler */.cx,
      blockchain: conversation === null || conversation === void 0 ? void 0 : conversation.blockchain,
      dispatch: addToBlockchainDispatch
    }),
    podBlockchain = _useBlockchain2.compiledBlockchain,
    addBlocksToPod = _useBlockchain2.addBlocks;
  var _usePeer = (0,usePeer/* default */.A)((podBlockchain === null || podBlockchain === void 0 ? void 0 : podBlockchain.users) || []),
    sendMessage = _usePeer.sendMessage,
    makeCall = _usePeer.makeCall,
    endCall = _usePeer.endCall,
    calls = _usePeer.calls,
    callsHash = _usePeer.callsHash,
    activeConnections = _usePeer.activeConnections;
  var storedShouldHangup = conversation === null || conversation === void 0 ? void 0 : conversation.shouldHangup;
  var peerIsTyping = conversation === null || conversation === void 0 ? void 0 : conversation.peerIsTyping;
  // const filesForPod  = podBlockchain.meaa
  // const peersActivelyTyping = Object.keys(peerIsTyping ?? {}) || []
  // .filter(key => !!peerIsTyping[key])

  var _useState17 = (0,index_js_.useState)(Object.keys(peerIsTyping !== null && peerIsTyping !== void 0 ? peerIsTyping : {}) || [].filter(function (key) {
      return !!peerIsTyping[key];
    })),
    _useState18 = Feed_slicedToArray(_useState17, 2),
    peersActivelyTyping = _useState18[0],
    setPeersActivelyTyping = _useState18[1];
  (0,index_js_.useEffect)(function () {
    setPeersActivelyTyping(Object.keys(peerIsTyping !== null && peerIsTyping !== void 0 ? peerIsTyping : {}).filter(function (k) {
      return !!peerIsTyping[k];
    }));
  }, [peerIsTyping]);
  var handleEndCall = function handleEndCall() {
    endCall();
    sendMessage({
      type: "setShouldHangup",
      payload: {
        podId: podId,
        shouldHangup: true
      }
    }).then(setShouldHangupDispatch);
  };
  var activeCalls = (0,index_js_.useMemo)(function () {
    if (callActive) {
      setCallActive(false);
      return [];
    }
    return Feed_toConsumableArray(calls);
  }, [callsHash, calls]);
  (0,index_js_.useEffect)(function () {
    if (storedShouldHangup) {
      handleEndCall();
    }
  }, [storedShouldHangup]);
  var handleAttachFile = function handleAttachFile() {
    setIsLoadingFile(true);
    fileInputRef.current.click();
  };
  var handleAttachImage = function handleAttachImage() {
    // setIsLoadingFile(true);
    inputRef.current.click();
  };
  var attachImage = function attachImage(_ref2) {
    var files = _ref2.target.files;
    var f = files[0];
    var img = new Image();
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    img.onload = function () {
      var maxWidthHeight = 300;
      var width = img.width;
      var height = img.height;
      if (width > height) {
        if (width > maxWidthHeight) {
          height *= maxWidthHeight / width;
          width = maxWidthHeight;
        }
      } else {
        if (height > maxWidthHeight) {
          width *= maxWidthHeight / height;
          height = maxWidthHeight;
        }
      }
      canvas.width = width;
      canvas.height = height;
      ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);
      var base64String = canvas.toDataURL("image/jpeg", 1.0);
      var newAttachment = {
        name: f.name,
        type: "image",
        data: base64String,
        size: f.size,
        md5: calculateMd5(base64String),
        sha256: (0,calculateSha256/* default */.A)(base64String),
        sha: Feed_calculateHash(base64String)
      };
      setImageAttachment(newAttachment);
    };
    img.onerror = function (event) {
      console.error("An error occurred while reading the file:", img.error);
      setIsLoadingFile(false);
    };
    img.onabort = function (event) {
      console.log("File reading was aborted.");
      setIsLoadingFile(false);
    };
    img.src = URL.createObjectURL(f);
  };
  var attachFile = function attachFile(_ref3) {
    var files = _ref3.target.files;
    var f = files[0];
    var reader = new FileReader();
    reader.onload = function (e) {
      var base64String = e.target.result;
      console.log({
        base64String: base64String
      });
      var newAttachment = {
        name: f.name,
        type: "file",
        data: base64String,
        size: f.size,
        md5: calculateMd5(base64String),
        sha256: (0,calculateSha256/* default */.A)(base64String),
        sha: Feed_calculateHash(base64String)
      };
      setFileAttachment(newAttachment);

      // sendMessage({
      //   type: 'largeFile',
      //   payload: {
      //     ...newAttachment,
      //   }
      // }).then(() => {
      //   setIsLoadingFile(false);
      // })
      setIsLoadingFile(false);
    };
    reader.addEventListener("error", function (err) {
      console.error(err);
      setIsLoadingFile(false);
    });
    reader.addEventListener("abort", function (err) {
      console.error(err);
      setIsLoadingFile(false);
    });
    reader.readAsDataURL(f);
  };
  var handleUpvote = function handleUpvote(messageId) {
    var newBlocks = (0,podChain/* blockBuilders */.e3)().upvoteMessage({
      messageId: messageId,
      from: storedConnectionId
    });
    var pendingUpdate = addBlocksToPod(newBlocks);
    sendMessage({
      type: "addToBlockchain",
      payload: {
        id: podId,
        pendingBlocks: pendingUpdate.pendingBlocks,
        pendingStorage: pendingUpdate.pendingStorage
      }
    });
  };
  (0,index_js_.useEffect)(function () {
    if (imageAttachment !== null || fileAttachment !== null) {
      handleSendMessage();
    }
  }, [imageAttachment, fileAttachment]);
  (0,index_js_.useEffect)(function () {
    if (conversation !== null && conversation !== void 0 && conversation.unreadCount) {
      updatePodUnreadCountDispatch(podId, 0);
    }
  }, [conversation === null || conversation === void 0 ? void 0 : conversation.unreadCount]);
  var _useState19 = (0,index_js_.useState)(null),
    _useState20 = Feed_slicedToArray(_useState19, 2),
    replyMessage = _useState20[0],
    setReplyMessage = _useState20[1];
  var handleOnReply = function handleOnReply(message) {
    setReplyMessage(message);
  };
  var handleSendMessage = function handleSendMessage() {
    var messageObject = {
      from: storedConnectionId,
      content: messageInputValue ? (0,podChain/* encodeEmojisToUnicode */.It)(messageInputValue) : undefined,
      image: imageAttachment !== null && imageAttachment !== void 0 ? imageAttachment : undefined,
      video: videoAttachment !== null && videoAttachment !== void 0 ? videoAttachment : undefined,
      file: fileAttachment !== null && fileAttachment !== void 0 ? fileAttachment : undefined,
      link: linkAttachment !== null && linkAttachment !== void 0 ? linkAttachment : undefined,
      reply: replyMessage !== null && replyMessage !== void 0 ? replyMessage : undefined,
      timestampSent: new Date().valueOf(),
      timestampRecieved: null
    };
    var newMessageBlocks = (0,podChain/* blockBuilders */.e3)().sendMessage(messageObject);
    var pendingUpdate = addBlocksToPod(newMessageBlocks);
    // const pendingUpdate = podBlockchain.getUpdate();
    // addToBlockchainDispatch({
    //   blocks: pendingUpdate.pendingBlocks,
    //   storage: pendingUpdate.pendingStorage
    // })
    setImageAttachment(null);
    setFileAttachment(null);
    setReplyMessage(null);
    setIsLoadingFile(false);
    setMessageInputValue("");
    if (imageAttachment) addStorageItemDispatch(imageAttachment);
    if (fileAttachment) addStorageItemDispatch(fileAttachment);
    if (replyMessage) addStorageItemDispatch(replyMessage);
    sendMessage({
      type: "setPeerIsTyping",
      payload: {
        podId: podId,
        peerDisplayName: storedUsername,
        isTyping: false
      }
    });
    // pendingUpdate.pendingBlocks.forEach(block => addToBlockchainDispatch(block))

    sendMessage({
      type: "message",
      payload: {
        podId: podId,
        message: messageObject,
        podDetails: {
          // ...conversation,
          id: podId,
          messages: [messageObject]
        },
        blocks: pendingUpdate.pendingBlocks,
        storage: pendingUpdate.pendingStorage
      }
    }).then(function (response) {
      // addMessageDispatch({
      //   podId,
      //   message: { ...messageObject, attachment: imageAttachment?.md5 },
      // });
    });
  };
  var handleMessageChange = function handleMessageChange(event) {
    setMessageInputValue(event.target.value);
    sendMessage({
      type: "setPeerIsTyping",
      payload: {
        podId: podId,
        peerDisplayName: storedUsername,
        isTyping: !!event.target.value
      }
    });
  };

  // useEffect(() => {
  //   const interval = setInterval(() => console.log({calls: getCalls(), callsLength}), 5000)
  //   return () => clearInterval(interval);
  // }, [])

  var remoteStreamCount = calls.filter(function (call) {
    return call._remoteStream;
  }).length;
  (0,index_js_.useEffect)(function () {
    if (callActive && remoteStreamCount) {
      setCallActive(false);
      handleEndCall();
    }
    activeCalls.filter(function (call) {
      return call._remoteStream;
    }).map(function (call) {
      return {
        remote: call._remoteStream,
        local: call._localStream
      };
    }).forEach( /*#__PURE__*/function () {
      var _ref5 = Feed_asyncToGenerator( /*#__PURE__*/Feed_regeneratorRuntime().mark(function _callee(_ref4, index) {
        var remote, local;
        return Feed_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              remote = _ref4.remote, local = _ref4.local;
              if (!remote) {
                _context.next = 6;
                break;
              }
              document.getElementById("remote-video-".concat(index)).srcObject = remote;
              _context.next = 5;
              return document.getElementById("remote-video-".concat(index)).play();
            case 5:
              setCallActive(true);
            case 6:
              if (!local) {
                _context.next = 10;
                break;
              }
              document.getElementById("local-video-".concat(index)).srcObject = local;
              _context.next = 10;
              return document.getElementById("local-video-".concat(index)).play();
            case 10:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x, _x2) {
        return _ref5.apply(this, arguments);
      };
    }());
  }, [remoteStreamCount]);
  var handleAnswerCall = /*#__PURE__*/function () {
    var _ref6 = Feed_asyncToGenerator( /*#__PURE__*/Feed_regeneratorRuntime().mark(function _callee2(call) {
      var _call$_remoteStream;
      var hasVideo, newMediaStream;
      return Feed_regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            hasVideo = ((_call$_remoteStream = call._remoteStream) === null || _call$_remoteStream === void 0 ? void 0 : _call$_remoteStream.getVideoTracks().length) > 0;
            _context2.next = 3;
            return navigator.mediaDevices.getUserMedia({
              video: hasVideo ? true : true,
              audio: true
            });
          case 3:
            newMediaStream = _context2.sent;
            call.answer(newMediaStream);
            setMediaStream(newMediaStream);
          case 6:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function handleAnswerCall(_x3) {
      return _ref6.apply(this, arguments);
    };
  }();
  var contactDetails = storedContacts.find(function (contact) {
    var _podBlockchain$users;
    return contact.connectionId === (podBlockchain === null || podBlockchain === void 0 || (_podBlockchain$users = podBlockchain.users) === null || _podBlockchain$users === void 0 ? void 0 : _podBlockchain$users.filter(function (member) {
      return member !== storedConnectionId;
    })[0]);
  });
  var pageTitle = "Gram"; // podBlockchain?.users.length > 2 ? (podBlockchain?.name ?? 'Pod') : (contactDetails?.displayName ?? 'Contact');

  var isOnline = false; // podBlockchain.users
  // .filter(c => c !== storedConnectionId)
  // .every(c => activeConnections.includes(c));
  var isSomeOnline = false; // podBlockchain.users.filter(c => c !== storedConnectionId).some(user => activeConnections.includes(user));

  var headerActions = [{
    text: t("podPage.podDetails"),
    icon: "account",
    onClick: function onClick() {
      return navigate("/pod/".concat(podId, "/details"));
    }
  }];
  // if (filesForPod.length > 0) {
  headerActions.push({
    text: t("podPage.files"),
    icon: "folder",
    onClick: function onClick() {
      return navigate("/pod/".concat(podId, "/files"));
    }
  });
  // }

  // get boolean if on  if any mobile browser by user agent. like an android ios browser on mobile
  var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  var isGroup = (podBlockchain === null || podBlockchain === void 0 || (_podBlockchain$users2 = podBlockchain.users) === null || _podBlockchain$users2 === void 0 ? void 0 : _podBlockchain$users2.length) > 2;
  var handleItemDelete = function handleItemDelete(id) {
    console.log({
      id: id
    });
    var newMessageBlocks = (0,podChain/* blockBuilders */.e3)().deleteMessage({
      id: id
    });
    var pendingUpdate = addBlocksToPod(newMessageBlocks);
    sendMessage({
      type: "addToBlockchain",
      payload: {
        id: id,
        pendingBlocks: pendingUpdate.pendingBlocks,
        pendingStorage: pendingUpdate.pendingStorage
      }
    });
  };
  var customButtons = isOnline && !activeCalls.length ? [!isGroup && !isMobile && {
    text: t("podPage.screenshare"),
    icon: "screen",
    onClick: function onClick() {
      return makeCall({
        screen: true,
        video: true,
        audio: true
      });
    }
  }, !isGroup && {
    text: t("podPage.videoCall"),
    icon: "camera",
    onClick: function onClick() {
      return makeCall({
        video: true,
        audio: true
      });
    }
  }, !isGroup && {
    text: t("podPage.call"),
    icon: "call",
    onClick: function onClick() {
      return makeCall({
        audio: true
      });
    }
  }].filter(function (i) {
    return !!i;
  }) : [];
  headerActions.push.apply(headerActions, Feed_toConsumableArray(customButtons));

  // ============================================================

  (0,index_js_.useEffect)(function () {
    logToNLevelAnalytics("FeedPageLoaded");
  }, []);
  var _useBlockchain3 = (0,Blockchain/* useBlockchain */.o)({
      compiler: podChain/* compiler */.cx,
      blockchains: storedPods.map(function (pod) {
        return pod.blockchain;
      }),
      dispatch: addToPodsBlockchainDispatch
    }),
    compiledPods = _useBlockchain3.compiledBlockchains;
  var posts = compiledPods.map(function (pod) {
    return pod.messages.filter(function (m) {
      return m.payload.image.data;
    });
  }).flat();
  var allReplies = compiledPods.map(function (pod) {
    return pod.messages.filter(function (m) {
      var _m$payload$reply;
      return (_m$payload$reply = m.payload.reply) === null || _m$payload$reply === void 0 ? void 0 : _m$payload$reply.id;
    });
  }).flat();
  var fetchComments = function fetchComments(message) {
    var comments = allReplies.filter(function (reply) {
      var _reply$payload$reply;
      return ((_reply$payload$reply = reply.payload.reply) === null || _reply$payload$reply === void 0 ? void 0 : _reply$payload$reply.id) === message.id;
    });
    var newComments = resolveComments(comments);
    return Feed_objectSpread(Feed_objectSpread({}, message), {}, {
      comments: newComments
    });
  };
  var resolveComments = function resolveComments(posts) {
    return posts.map(function (post) {
      return fetchComments(post);
    });
  };
  var postWithComments = resolveComments(posts);
  console.log({
    compiledPods: compiledPods,
    posts: posts,
    postWithComments: postWithComments
  });
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    backgroundImage: theme.palette.mode === "dark" ? Feed_darkBackground : Feed_lightBackground,
    headerProps: {
      // title: pageTitle,
      title: /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
        variant: "h6",
        component: "div",
        sx: {
          flexGrow: 1
        }
      }, pageTitle), /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
        variant: "subtitle2",
        component: "div",
        sx: {
          flexGrow: 1
        }
      }, peersActivelyTyping.length > 0 && "".concat(peersActivelyTyping.join(", "), " is typing..."))),
      backButton: "/login",
      backCount: storedPods.filter(function (pod) {
        return pod.unreadCount > 0;
      }).length,
      // avatarProps: {
      //   src: isGroup ? conversation?.avatarUrl : contactDetails?.avatar,
      //   alt: pageTitle[0],
      //   isOnline,
      //   isSomeOnline
      // },
      menuProps: {
        icon: "more"
        // items: headerActions
      }
      // customButtons: (isOnline && !activeCalls.length) ? [
      //   !isGroup && !isMobile && { icon: 'screen', onClick: () => makeCall({ screen: true, video: true, audio: true }) },
      //   !isGroup && { icon: 'camera', onClick: () => makeCall({ video: true, audio: true }) },
      //   !isGroup && { icon: 'call', onClick: () => makeCall({ audio: true }) },
      // ].filter(i => !!i) : undefined
    },
    className: classes.conversation
  }, activeCalls.length === 0 && /*#__PURE__*/index_js_default().createElement(Thread/* default */.A, {
    className: classes.conversation,
    isGroup: isGroup,
    deleteItem: handleItemDelete,
    onReply: handleOnReply,
    onUpvote: handleUpvote,
    list: posts,
    loading: isLoadingFile
  }), activeCalls.length > 0 && [activeCalls[activeCalls.length - 1]]
  // .filter(call => call._remoteStream)
  .map(function (call, index) {
    var stream = call._remoteStream;
    var localStream = call._localStream;
    if (localStream && !callActive) handleAnswerCall(call);

    // on stream disconnect, cklosethe local tracks
    if (stream) {
      stream.oninactive = function () {
        [mediaStream, localStream, stream].map(function (stream) {
          var tracks = stream === null || stream === void 0 ? void 0 : stream.getTracks();
          if (tracks) {
            console.log({
              tracks: tracks
            });
            tracks.forEach(function (track) {
              return track.stop();
            });
            setMediaStream(null);
          }
        });
      };
    }
    return /*#__PURE__*/index_js_default().createElement("div", {
      className: classes.form
    }, stream && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement("video", {
      id: "remote-video-".concat(index),
      playsInline: true,
      style: {
        width: "100%"
      }
    }), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement("br", null)), localStream && (stream === null || stream === void 0 ? void 0 : stream.getVideoTracks().length) > 0 && /*#__PURE__*/index_js_default().createElement("video", {
      id: "local-video-".concat(index),
      muted: true,
      playsInline: true,
      style: {
        width: "20vw",
        position: "absolute",
        top: 90,
        left: 10
      }
    }), !localStream && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
      type: "button",
      sx: {
        mb: 2
      },
      variant: "contained",
      fullWidth: true,
      color: "success",
      onClick: function onClick() {
        return handleAnswerCall(call);
      }
    }, "answer call"), /*#__PURE__*/index_js_default().createElement("br", null)), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
      type: "button",
      variant: "contained",
      fullWidth: true,
      color: "error",
      onClick: handleEndCall
    }, "hang up"));
  }), /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      marginBottom: 50
    }
  }), /*#__PURE__*/index_js_default().createElement(AppBar/* default */.A, {
    position: "fixed",
    color: "primary",
    sx: {
      top: "auto",
      bottom: 0
    }
  }, /*#__PURE__*/index_js_default().createElement(Container/* default */.A, {
    maxWidth: "lg",
    disableGutters: true
  }, !!replyMessage && /*#__PURE__*/index_js_default().createElement(Container/* default */.A, {
    sx: {
      p: "10px 15px"
    }
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    variant: "subtitle2",
    component: "div",
    sx: {
      flexGrow: 1
    }
  }, t("podPage.replyingTo", {
    displayName: replyMessage.name
  })), /*#__PURE__*/index_js_default().createElement(Message/* default */.A, {
    type: replyMessage.type,
    payload: replyMessage.payload,
    message: replyMessage.content,
    attachmentSha: replyMessage.attachmentSha,
    attachment: replyMessage.attachment,
    imageAttachment: replyMessage.image,
    username: replyMessage.name,
    isOnline: isGroup && replyMessage.isOnline
    // parse date from something like `Date(item.timestampSent)` to `'10/23/2023 12:00:00 AM'`
    ,
    timestamp: (0,Thread/* formatDate */.Y)((_replyMessage$timesta = replyMessage.timestamp) === null || _replyMessage$timesta === void 0 ? void 0 : _replyMessage$timesta.created),
    avatar: replyMessage.avatar
  }), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    onClick: function onClick() {
      return setReplyMessage(null);
    }
  }, t("podPage.cancelReply"))))));
}
;// CONCATENATED MODULE: ./src/components/pages/maintainance/Maintainance.js






var Maintainance_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    padding: {
      padding: 10
    }
  };
});
function Maintainance() {
  var classes = Maintainance_useStyles();
  var navigate = useNavigate();
  var contacts = useSelector(function (state) {
    return state.contacts;
  }) || [];
  return /*#__PURE__*/React.createElement(PageContainer, {
    headerProps: {
      title: "Temporaily Unavailable",
      backButton: true,
      menuProps: {
        icon: "more",
        items: [{
          text: "Profile",
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }]
      }
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      textAlign: "center",
      padding: 20
    }
  }, /*#__PURE__*/React.createElement(Typography, {
    variant: "h5",
    gutterBottom: true
  }, "Temporaily Unavailable"), /*#__PURE__*/React.createElement(Typography, {
    variant: "body1",
    gutterBottom: true
  }, "This app is temporaily unavailable. Apologies for any inconvienience.")));
}
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/components/pages/hands/style.css
var style = __webpack_require__(33375);
;// CONCATENATED MODULE: ./src/components/pages/hands/style.css

      
      
      
      
      
      
      
      
      

var style_options = {};

style_options.styleTagTransform = (styleTagTransform_default());
style_options.setAttributes = (setAttributesWithoutAttributes_default());

      style_options.insert = insertBySelector_default().bind(null, "head");
    
style_options.domAPI = (styleDomAPI_default());
style_options.insertStyleElement = (insertStyleElement_default());

var style_update = injectStylesIntoStyleTag_default()(style/* default */.A, style_options);




       /* harmony default export */ const hands_style = (style/* default */.A && style/* default */.A.locals ? style/* default */.A.locals : undefined);

;// CONCATENATED MODULE: ./src/components/pages/hands/Hands.js





// import './handpose-estimation'

var Hands_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    padding: {
      padding: 10
    }
  };
});
function Hands_Maintainance() {
  var classes = Hands_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];

  // mount handpose after component is mounted
  (0,index_js_.useEffect)(function () {
    Promise.all(/* import() */[__webpack_require__.e(276), __webpack_require__.e(990)]).then(__webpack_require__.bind(__webpack_require__, 5573))["catch"](function (err) {
      console.error(err);
    });
  }, []);
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: "Hand",
      backButton: true,
      menuProps: {
        icon: "more",
        items: [{
          text: "Profile",
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }]
      }
    }
  }, /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      textAlign: "center",
      padding: 20
    }
  }, /*#__PURE__*/index_js_default().createElement("div", {
    id: "main"
  }, /*#__PURE__*/index_js_default().createElement("div", {
    "class": "container"
  }, /*#__PURE__*/index_js_default().createElement("div", {
    "class": "canvas-wrapper"
  }, /*#__PURE__*/index_js_default().createElement("canvas", {
    id: "output"
  }), /*#__PURE__*/index_js_default().createElement("video", {
    id: "video",
    playsinline: true
  })), /*#__PURE__*/index_js_default().createElement("div", {
    id: "stats"
  }), /*#__PURE__*/index_js_default().createElement("div", {
    "class": "scatter-container"
  }, /*#__PURE__*/index_js_default().createElement("div", {
    id: "scatter-gl-container-left"
  }), /*#__PURE__*/index_js_default().createElement("div", {
    id: "scatter-gl-container-right"
  }))))));
}
// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(5556);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);
// EXTERNAL MODULE: ./node_modules/react-swipeable-views/lib/index.js
var react_swipeable_views_lib = __webpack_require__(7400);
// EXTERNAL MODULE: ./node_modules/@mui/material/styles/useTheme.js
var styles_useTheme = __webpack_require__(44675);
// EXTERNAL MODULE: ./node_modules/@mui/material/Tabs/Tabs.js + 8 modules
var Tabs = __webpack_require__(81968);
// EXTERNAL MODULE: ./node_modules/@mui/material/Tab/Tab.js + 1 modules
var Tab = __webpack_require__(10423);
// EXTERNAL MODULE: ./node_modules/@mui/material/Box/Box.js + 2 modules
var Box = __webpack_require__(69067);
;// CONCATENATED MODULE: ./src/components/atomic/molecules/qr-text/QRText.js
function QRText_slicedToArray(arr, i) { return QRText_arrayWithHoles(arr) || QRText_iterableToArrayLimit(arr, i) || QRText_unsupportedIterableToArray(arr, i) || QRText_nonIterableRest(); }
function QRText_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function QRText_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return QRText_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QRText_arrayLikeToArray(o, minLen); }
function QRText_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function QRText_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function QRText_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }










var QRText_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    qrcodeReader: {
      // height: '100vh',
      width: "100%",
      // top: 0,
      // left: 0,
      // position: 'absolute',
      zIndex: 10000
    }
  };
});
var QRText = function QRText() {
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var classes = QRText_useStyles();
  var _useState = (0,index_js_.useState)(""),
    _useState2 = QRText_slicedToArray(_useState, 2),
    text = _useState2[0],
    setText = _useState2[1];
  var _useState3 = (0,index_js_.useState)(""),
    _useState4 = QRText_slicedToArray(_useState3, 2),
    contactNamePreset = _useState4[0],
    setContactNamePreset = _useState4[1];
  var storedConnectionId = (0,index_js_.useState)("");
  var _useState5 = (0,index_js_.useState)(false),
    _useState6 = QRText_slicedToArray(_useState5, 2),
    scanning = _useState6[0],
    setScanning = _useState6[1];
  var handleCopyConnectionIdToClipboard = function handleCopyConnectionIdToClipboard() {
    navigator.clipboard.writeText("".concat(window.location.origin, "/#/login/").concat(storedConnectionId).concat(contactNamePreset ? "/".concat(contactNamePreset) : ""));
  };
  var handleScan = function handleScan(data) {
    if (!(data !== null && data !== void 0 && data.text)) return;
    setText(data === null || data === void 0 ? void 0 : data.text);
  };
  var handleError = function handleError(err) {
    console.error(err);
  };
  return /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Text/Link",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(ContentCopy/* default */.A, null)))
    }
  }), /*#__PURE__*/index_js_default().createElement("br", null), !scanning && /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      background: 'white',
      padding: 20
    }
  }, /*#__PURE__*/index_js_default().createElement(react_qr_code_lib/* default */.Ay, {
    size: 256,
    style: {
      height: "auto",
      maxWidth: "100%",
      width: "100%"
    },
    value: text,
    viewBox: "0 0 256 256"
  })), scanning && /*#__PURE__*/index_js_default().createElement((react_qr_scanner_umd_default()), {
    id: "qrcode-reader-".concat(text),
    key: "qrcode-reader-".concat(text),
    delay: 300,
    className: classes.qrcodeReader,
    onError: handleError,
    onScan: handleScan,
    constraints: {
      video: {
        facingMode: "environment"
      }
    }
  }), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: function onClick() {
      return setScanning(!scanning);
    },
    color: scanning ? "error" : "primary"
  }, scanning ? t("components.connectToPeer.stopScanning") : 'Scan QR'));
};
/* harmony default export */ const qr_text_QRText = (QRText);
;// CONCATENATED MODULE: ./src/components/atomic/molecules/qr-file/QRFile.js
function QRFile_toConsumableArray(arr) { return QRFile_arrayWithoutHoles(arr) || QRFile_iterableToArray(arr) || QRFile_unsupportedIterableToArray(arr) || QRFile_nonIterableSpread(); }
function QRFile_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function QRFile_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function QRFile_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return QRFile_arrayLikeToArray(arr); }
function QRFile_slicedToArray(arr, i) { return QRFile_arrayWithHoles(arr) || QRFile_iterableToArrayLimit(arr, i) || QRFile_unsupportedIterableToArray(arr, i) || QRFile_nonIterableRest(); }
function QRFile_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function QRFile_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return QRFile_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return QRFile_arrayLikeToArray(o, minLen); }
function QRFile_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function QRFile_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function QRFile_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

















var QRFile_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    qrcodeReader: {
      // height: '100vh',
      width: "100%",
      // top: 0,
      // left: 0,
      // position: 'absolute',
      zIndex: 10000
    }
  };
});
function valuetext(value) {
  return "".concat(value, "\xB0C");
}
var QRFile = function QRFile() {
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var classes = QRFile_useStyles();
  var _useState = (0,index_js_.useState)(""),
    _useState2 = QRFile_slicedToArray(_useState, 2),
    text = _useState2[0],
    setText = _useState2[1];
  var _useState3 = (0,index_js_.useState)(""),
    _useState4 = QRFile_slicedToArray(_useState3, 2),
    contactNamePreset = _useState4[0],
    setContactNamePreset = _useState4[1];
  var storedConnectionId = (0,index_js_.useState)("");
  var _useState5 = (0,index_js_.useState)(false),
    _useState6 = QRFile_slicedToArray(_useState5, 2),
    scanning = _useState6[0],
    setScanning = _useState6[1];
  var _useState7 = (0,index_js_.useState)([]),
    _useState8 = QRFile_slicedToArray(_useState7, 2),
    fileParts = _useState8[0],
    setFileParts = _useState8[1];
  var _useState9 = (0,index_js_.useState)(0),
    _useState10 = QRFile_slicedToArray(_useState9, 2),
    selectedPart = _useState10[0],
    setSelectedPart = _useState10[1];
  var _useState11 = (0,index_js_.useState)(100),
    _useState12 = QRFile_slicedToArray(_useState11, 2),
    partDensity = _useState12[0],
    setPartDensity = _useState12[1];
  var _useState13 = (0,index_js_.useState)(false),
    _useState14 = QRFile_slicedToArray(_useState13, 2),
    isPlaying = _useState14[0],
    setIsPlaying = _useState14[1];
  var _useState15 = (0,index_js_.useState)(),
    _useState16 = QRFile_slicedToArray(_useState15, 2),
    timeoutInterval = _useState16[0],
    setTimeoutInterval = _useState16[1];
  var handleCopyConnectionIdToClipboard = function handleCopyConnectionIdToClipboard() {
    navigator.clipboard.writeText("".concat(window.location.origin, "/#/login/").concat(storedConnectionId).concat(contactNamePreset ? "/".concat(contactNamePreset) : ""));
  };
  var handleScan = function handleScan(data) {
    var scannedData = JSON.parse(data);
    var hasPartBeenScanned = fileParts.some(function (part) {
      return (part === null || part === void 0 ? void 0 : part.part) === (scannedData === null || scannedData === void 0 ? void 0 : scannedData.part);
    });
    if (hasPartBeenScanned) return;
    var newFileParts = [].concat(QRFile_toConsumableArray(fileParts), [scannedData]);
    console.log("newFileParts", newFileParts.length);
    setFileParts(newFileParts);
  };
  (0,index_js_.useEffect)(function () {
    var _fileParts$;
    var areAllPartsScanned = fileParts.length === ((_fileParts$ = fileParts[0]) === null || _fileParts$ === void 0 ? void 0 : _fileParts$.total);
    if (areAllPartsScanned && scanning) {
      var _fileParts$2;
      var file = fileParts.reduce(function (acc, part) {
        return acc + part.data;
      }, "");
      var filename = (_fileParts$2 = fileParts[0]) === null || _fileParts$2 === void 0 ? void 0 : _fileParts$2.filename;

      // const element = document.createElement("a");
      // element.href = attachment?.data; // URL.createObjectURL(file);
      // element.download = attachment?.name;
      // document.body.appendChild(element);
      // element.click();

      var element = document.createElement("a");
      element.href = "data:application/octet-stream;base64,".concat(file);
      element.download = filename;
      document.body.appendChild(element);
      element.click();
      setScanning(false);
      setFileParts([]);
    }
  }, [fileParts]);
  var handleError = function handleError(err) {
    console.error(err);
  };
  var handleFileSelect = function handleFileSelect(e) {
    var file = e.target.files[0];
    var reader = new FileReader();
    reader.onload = function (e) {
      // create base64 string

      var base64 = btoa(unescape(encodeURIComponent(e.target.result)));

      // create me the base64 string with like "data:image/png;base64,"
      // git generic for different filetypes automatically

      // const base64String = `data:image/png;base64,${base64}`;
      var base64String = "data:application/octet-stream;base64,".concat(base64);
      var base64BackToString = atob(base64);
      setText(JSON.stringify({
        name: file.name,
        data: base64
      }));

      // split base64 string into parts pf 100 characters
      var partSize = partDensity;
      var numberOfParts = Math.ceil(base64.length / partSize);
      var parts = [];
      for (var i = 0; i < base64.length; i += partSize) {
        var part = base64.substr(i, partSize);
        var partNumber = Math.ceil(i / partSize);
        var partData = {
          part: partNumber + 1,
          total: numberOfParts,
          filename: file.name,
          data: part
        };
        parts.push(partData);
      }
      setFileParts(parts);
    };
    reader.readAsText(file);
  };
  var handleDownloadFile = function handleDownloadFile() {
    var file = JSON.parse(text);
    var blob = new Blob([file.data], {
      type: "application/octet-stream"
    });
    var url = URL.createObjectURL(blob);
    var a = document.createElement("a");
    a.href = url;
    a.download = file.name;
    a.click();
  };
  var recalculateFileParts = function recalculateFileParts(newPartDensity) {
    // const partSize = newPartDensity;
    // const parts = [];
    // for (let i = 0; i < text.length; i += partSize) {
    //   parts.push(text.substr(i, partSize));
    // }
    // setFileParts(parts);
    // setSelectedPart(0);
  };
  (0,index_js_.useEffect)(function () {
    setTimeout(function () {
      if (isPlaying) {
        setSelectedPart(selectedPart + 1);
      }
    }, 1000);
  }, [isPlaying, selectedPart]);
  return /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    id: "load-file-button",
    variant: "contained",
    component: "label",
    fullWidth: true
  }, "Select File to share", /*#__PURE__*/index_js_default().createElement("input", {
    type: "file",
    hidden: true,
    onChange: handleFileSelect
  })), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement("br", null), !scanning && fileParts.length > 0 && /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      background: "white",
      padding: 20
    }
  }, /*#__PURE__*/index_js_default().createElement(react_qr_code_lib/* default */.Ay, {
    size: 256,
    style: {
      height: "auto",
      maxWidth: "100%",
      width: "100%"
    },
    value: JSON.stringify(fileParts === null || fileParts === void 0 ? void 0 : fileParts[selectedPart]) || "",
    viewBox: "0 0 256 256"
  })), scanning && /*#__PURE__*/index_js_default().createElement((react_qr_scanner_umd_default()), {
    id: "qrcode-reader-".concat(fileParts === null || fileParts === void 0 ? void 0 : fileParts.length),
    key: "qrcode-reader-".concat(fileParts === null || fileParts === void 0 ? void 0 : fileParts.length),
    className: classes.qrcodeReader,
    onError: handleError,
    onScan: function onScan(data) {
      data && handleScan(data.text);
    },
    constraints: {
      video: {
        facingMode: "environment"
      }
    }
  }), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    type: "button",
    fullWidth: true,
    variant: "contained",
    onClick: function onClick() {
      return setScanning(!scanning);
    },
    color: scanning ? "error" : "primary"
  }, scanning ? t("components.connectToPeer.stopScanning") : "Scan File QR"), /*#__PURE__*/index_js_default().createElement("br", null), /*#__PURE__*/index_js_default().createElement("br", null), !scanning && fileParts.length > 0 && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    gutterBottom: true
  }, "Seek File Part"), /*#__PURE__*/index_js_default().createElement(Slider/* default */.Ay, {
    "aria-label": "select part",
    defaultValue: 0,
    getAriaValueText: valuetext,
    step: 1,
    marks: true,
    min: 0,
    max: fileParts.length - 1,
    value: selectedPart,
    valueLabelDisplay: "auto",
    onChange: function onChange(e, value) {
      setIsPlaying(false);
      setSelectedPart(value);
    }
  }), /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
    "aria-label": "delete",
    size: "large",
    onClick: function onClick() {
      setIsPlaying(false);
      setSelectedPart(selectedPart - 1);
    }
  }, /*#__PURE__*/index_js_default().createElement(SkipPrevious/* default */.A, {
    fontSize: "inherit"
  })), /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
    "aria-label": "delete",
    size: "large"
    // primary
    ,
    color: "primary",
    onClick: function onClick() {
      return setIsPlaying(!isPlaying);
    }
  }, isPlaying ? /*#__PURE__*/index_js_default().createElement(Pause/* default */.A, {
    fontSize: "inherit"
  }) : /*#__PURE__*/index_js_default().createElement(PlayArrow/* default */.A, {
    fontSize: "inherit"
  })), /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
    "aria-label": "delete",
    size: "large",
    onClick: function onClick() {
      setIsPlaying(false);
      setSelectedPart(selectedPart + 1);
    }
  }, /*#__PURE__*/index_js_default().createElement(SkipNext/* default */.A, {
    fontSize: "inherit"
  }))));
};
/* harmony default export */ const qr_file_QRFile = (QRFile);
;// CONCATENATED MODULE: ./src/components/pages/shareQr/ShareQR.js
var _excluded = ["children", "value", "index"];
function ShareQR_slicedToArray(arr, i) { return ShareQR_arrayWithHoles(arr) || ShareQR_iterableToArrayLimit(arr, i) || ShareQR_unsupportedIterableToArray(arr, i) || ShareQR_nonIterableRest(); }
function ShareQR_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function ShareQR_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ShareQR_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ShareQR_arrayLikeToArray(o, minLen); }
function ShareQR_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ShareQR_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function ShareQR_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ShareQR_extends() { ShareQR_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return ShareQR_extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }















function TabPanel(props) {
  var children = props.children,
    value = props.value,
    index = props.index,
    other = _objectWithoutProperties(props, _excluded);
  return /*#__PURE__*/index_js_default().createElement("div", ShareQR_extends({
    role: "tabpanel",
    hidden: value !== index,
    id: "full-width-tabpanel-".concat(index),
    "aria-labelledby": "full-width-tab-".concat(index)
  }, other), value === index && /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      p: 3
    }
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, null, children)));
}
TabPanel.propTypes = {
  children: (prop_types_default()).node,
  index: (prop_types_default()).number.isRequired,
  value: (prop_types_default()).number.isRequired
};
function a11yProps(index) {
  return {
    id: "full-width-tab-".concat(index),
    'aria-controls': "full-width-tabpanel-".concat(index)
  };
}
var ShareQR_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    padding: {
      padding: 10
    }
  };
});
function ShareQR_Maintainance() {
  var classes = ShareQR_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];
  var theme = (0,styles_useTheme/* default */.A)();
  var _React$useState = index_js_default().useState(1),
    _React$useState2 = ShareQR_slicedToArray(_React$useState, 2),
    value = _React$useState2[0],
    setValue = _React$useState2[1];
  var handleChange = function handleChange(event, newValue) {
    setValue(newValue);
  };
  var handleChangeIndex = function handleChangeIndex(index) {
    setValue(index);
  };
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: "Share by QR",
      backButton: true,
      menuProps: {
        icon: "more",
        items: [{
          text: "Profile",
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }]
      }
    }
  }, /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      textAlign: "center",
      padding: 20
    }
  }, /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      bgcolor: 'background.paper'
    }
  }, /*#__PURE__*/index_js_default().createElement(AppBar/* default */.A, {
    position: "static"
  }, /*#__PURE__*/index_js_default().createElement(Tabs/* default */.A, {
    value: value,
    onChange: handleChange,
    indicatorColor: "primary",
    textColor: "inherit",
    variant: "fullWidth",
    "aria-label": "full width tabs example"
  }, /*#__PURE__*/index_js_default().createElement(Tab/* default */.A, ShareQR_extends({
    label: "Share Link/Text"
  }, a11yProps(0))), /*#__PURE__*/index_js_default().createElement(Tab/* default */.A, ShareQR_extends({
    label: "Share File"
  }, a11yProps(1))))), /*#__PURE__*/index_js_default().createElement(react_swipeable_views_lib/* default */.Ay, {
    axis: theme.direction === 'rtl' ? 'x-reverse' : 'x',
    index: value,
    onChangeIndex: handleChangeIndex
  }, /*#__PURE__*/index_js_default().createElement(TabPanel, {
    value: value,
    index: 0,
    dir: theme.direction
  }, /*#__PURE__*/index_js_default().createElement(qr_text_QRText, null)), /*#__PURE__*/index_js_default().createElement(TabPanel, {
    value: value,
    index: 1,
    dir: theme.direction
  }, /*#__PURE__*/index_js_default().createElement(qr_file_QRFile, null))))));
}
;// CONCATENATED MODULE: ./src/components/pages/encryption/RSA.js
function RSA_slicedToArray(arr, i) { return RSA_arrayWithHoles(arr) || RSA_iterableToArrayLimit(arr, i) || RSA_unsupportedIterableToArray(arr, i) || RSA_nonIterableRest(); }
function RSA_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function RSA_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return RSA_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return RSA_arrayLikeToArray(o, minLen); }
function RSA_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function RSA_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function RSA_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }












var RSA_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    qrcodeReader: {
      // height: '100vh',
      width: "100%",
      // top: 0,
      // left: 0,
      // position: 'absolute',
      zIndex: 10000
    }
  };
});
var RSA_QRText = function QRText() {
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var classes = RSA_useStyles();
  var _useState = (0,index_js_.useState)(""),
    _useState2 = RSA_slicedToArray(_useState, 2),
    text = _useState2[0],
    setText = _useState2[1];
  var _useState3 = (0,index_js_.useState)(""),
    _useState4 = RSA_slicedToArray(_useState3, 2),
    contactNamePreset = _useState4[0],
    setContactNamePreset = _useState4[1];
  var storedConnectionId = (0,index_js_.useState)("");
  var _useState5 = (0,index_js_.useState)(false),
    _useState6 = RSA_slicedToArray(_useState5, 2),
    scanning = _useState6[0],
    setScanning = _useState6[1];
  var handleCopyConnectionIdToClipboard = function handleCopyConnectionIdToClipboard() {
    navigator.clipboard.writeText("".concat(window.location.origin, "/#/login/").concat(storedConnectionId).concat(contactNamePreset ? "/".concat(contactNamePreset) : ""));
  };
  var handleScan = function handleScan(data) {
    if (!(data !== null && data !== void 0 && data.text)) return;
    setText(data === null || data === void 0 ? void 0 : data.text);
  };
  var handleError = function handleError(err) {
    console.error(err);
  };
  return /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: console.log,
    fullWidth: true
  }, "Generate key pair"), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Private Key (do not share)",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Your Public Key",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Remote Public Key",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Message to encrypt",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Encrypted message",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))))
    }
  }));
};
/* harmony default export */ const RSA = (RSA_QRText);
;// CONCATENATED MODULE: ./src/components/pages/encryption/Symmetric.js
function Symmetric_slicedToArray(arr, i) { return Symmetric_arrayWithHoles(arr) || Symmetric_iterableToArrayLimit(arr, i) || Symmetric_unsupportedIterableToArray(arr, i) || Symmetric_nonIterableRest(); }
function Symmetric_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Symmetric_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Symmetric_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Symmetric_arrayLikeToArray(o, minLen); }
function Symmetric_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Symmetric_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Symmetric_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }












var Symmetric_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    qrcodeReader: {
      // height: '100vh',
      width: "100%",
      // top: 0,
      // left: 0,
      // position: 'absolute',
      zIndex: 10000
    }
  };
});
var Symmetric_QRText = function QRText() {
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var classes = Symmetric_useStyles();
  var _useState = (0,index_js_.useState)(""),
    _useState2 = Symmetric_slicedToArray(_useState, 2),
    text = _useState2[0],
    setText = _useState2[1];
  var _useState3 = (0,index_js_.useState)(""),
    _useState4 = Symmetric_slicedToArray(_useState3, 2),
    contactNamePreset = _useState4[0],
    setContactNamePreset = _useState4[1];
  var storedConnectionId = (0,index_js_.useState)("");
  var _useState5 = (0,index_js_.useState)(false),
    _useState6 = Symmetric_slicedToArray(_useState5, 2),
    scanning = _useState6[0],
    setScanning = _useState6[1];
  var handleCopyConnectionIdToClipboard = function handleCopyConnectionIdToClipboard() {
    navigator.clipboard.writeText("".concat(window.location.origin, "/#/login/").concat(storedConnectionId).concat(contactNamePreset ? "/".concat(contactNamePreset) : ""));
  };
  var handleScan = function handleScan(data) {
    if (!(data !== null && data !== void 0 && data.text)) return;
    setText(data === null || data === void 0 ? void 0 : data.text);
  };
  var handleError = function handleError(err) {
    console.error(err);
  };
  return /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: console.log,
    fullWidth: true
  }, "Generate Symmetric key"), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Symmetric Key",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Message to encrypt",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))))
    }
  }), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: console.log,
    fullWidth: true
  }, "Encrypt file"), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Encrypted message",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))))
    }
  }), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    color: "primary",
    onClick: console.log,
    fullWidth: true
  }, "Decrypt file"));
};
/* harmony default export */ const Symmetric = (Symmetric_QRText);
;// CONCATENATED MODULE: ./src/components/pages/encryption/HashInputs.js
function HashInputs_slicedToArray(arr, i) { return HashInputs_arrayWithHoles(arr) || HashInputs_iterableToArrayLimit(arr, i) || HashInputs_unsupportedIterableToArray(arr, i) || HashInputs_nonIterableRest(); }
function HashInputs_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function HashInputs_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return HashInputs_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return HashInputs_arrayLikeToArray(o, minLen); }
function HashInputs_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function HashInputs_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function HashInputs_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }












var HashInputs_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    qrcodeReader: {
      // height: '100vh',
      width: "100%",
      // top: 0,
      // left: 0,
      // position: 'absolute',
      zIndex: 10000
    }
  };
});
var HashInputs_QRText = function QRText() {
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t;
  var classes = HashInputs_useStyles();
  var _useState = (0,index_js_.useState)(""),
    _useState2 = HashInputs_slicedToArray(_useState, 2),
    text = _useState2[0],
    setText = _useState2[1];
  var _useState3 = (0,index_js_.useState)(""),
    _useState4 = HashInputs_slicedToArray(_useState3, 2),
    contactNamePreset = _useState4[0],
    setContactNamePreset = _useState4[1];
  var storedConnectionId = (0,index_js_.useState)("");
  var _useState5 = (0,index_js_.useState)(false),
    _useState6 = HashInputs_slicedToArray(_useState5, 2),
    scanning = _useState6[0],
    setScanning = _useState6[1];
  var handleCopyConnectionIdToClipboard = function handleCopyConnectionIdToClipboard() {
    navigator.clipboard.writeText("".concat(window.location.origin, "/#/login/").concat(storedConnectionId).concat(contactNamePreset ? "/".concat(contactNamePreset) : ""));
  };
  var handleScan = function handleScan(data) {
    if (!(data !== null && data !== void 0 && data.text)) return;
    setText(data === null || data === void 0 ? void 0 : data.text);
  };
  var handleError = function handleError(err) {
    console.error(err);
  };
  return /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Hashed Value",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "Input",
    name: "Text",
    value: text,
    onChange: function onChange(e) {
      return setText(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCopyConnectionIdToClipboard,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))))
    }
  }));
};
/* harmony default export */ const HashInputs = (HashInputs_QRText);
;// CONCATENATED MODULE: ./src/components/pages/encryption/Hashing.js
var Hashing_excluded = ["children", "value", "index"];
function Hashing_slicedToArray(arr, i) { return Hashing_arrayWithHoles(arr) || Hashing_iterableToArrayLimit(arr, i) || Hashing_unsupportedIterableToArray(arr, i) || Hashing_nonIterableRest(); }
function Hashing_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Hashing_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Hashing_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Hashing_arrayLikeToArray(o, minLen); }
function Hashing_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Hashing_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Hashing_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Hashing_extends() { Hashing_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return Hashing_extends.apply(this, arguments); }
function Hashing_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Hashing_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function Hashing_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }





















function Hashing_TabPanel(props) {
  var children = props.children,
    value = props.value,
    index = props.index,
    other = Hashing_objectWithoutProperties(props, Hashing_excluded);
  return /*#__PURE__*/index_js_default().createElement("div", Hashing_extends({
    role: "tabpanel",
    hidden: value !== index,
    id: "full-width-tabpanel-".concat(index),
    "aria-labelledby": "full-width-tab-".concat(index)
  }, other), value === index && /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      p: 3
    }
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, null, children)));
}
Hashing_TabPanel.propTypes = {
  children: (prop_types_default()).node,
  index: (prop_types_default()).number.isRequired,
  value: (prop_types_default()).number.isRequired
};
function Hashing_a11yProps(index) {
  return {
    id: "full-width-tab-".concat(index),
    'aria-controls': "full-width-tabpanel-".concat(index)
  };
}
var Hashing_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    padding: {
      padding: 10
    }
  };
});
var Hashing_QRText = function QRText() {
  var classes = Hashing_useStyles();
  var theme = (0,styles_useTheme/* default */.A)();
  var _React$useState = index_js_default().useState(0),
    _React$useState2 = Hashing_slicedToArray(_React$useState, 2),
    value = _React$useState2[0],
    setValue = _React$useState2[1];
  var handleChange = function handleChange(event, newValue) {
    setValue(newValue);
  };
  var handleChangeIndex = function handleChangeIndex(index) {
    setValue(index);
  };
  return /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      bgcolor: 'background.paper'
    }
  }, /*#__PURE__*/index_js_default().createElement(AppBar/* default */.A, {
    position: "static"
  }, /*#__PURE__*/index_js_default().createElement(Tabs/* default */.A, {
    value: value,
    onChange: handleChange,
    indicatorColor: "primary",
    textColor: "inherit",
    variant: "fullWidth",
    "aria-label": "full width tabs example"
  }, /*#__PURE__*/index_js_default().createElement(Tab/* default */.A, Hashing_extends({
    label: "SHA-256"
  }, Hashing_a11yProps(0))), /*#__PURE__*/index_js_default().createElement(Tab/* default */.A, Hashing_extends({
    label: "SHA-512"
  }, Hashing_a11yProps(1))), /*#__PURE__*/index_js_default().createElement(Tab/* default */.A, Hashing_extends({
    label: "SHA3-512"
  }, Hashing_a11yProps(2))))), /*#__PURE__*/index_js_default().createElement(react_swipeable_views_lib/* default */.Ay, {
    axis: theme.direction === 'rtl' ? 'x-reverse' : 'x',
    index: value,
    onChangeIndex: handleChangeIndex
  }, /*#__PURE__*/index_js_default().createElement(Hashing_TabPanel, {
    value: value,
    index: 0,
    dir: theme.direction
  }, /*#__PURE__*/index_js_default().createElement(HashInputs, null)), /*#__PURE__*/index_js_default().createElement(Hashing_TabPanel, {
    value: value,
    index: 1,
    dir: theme.direction
  }, /*#__PURE__*/index_js_default().createElement(HashInputs, null)), /*#__PURE__*/index_js_default().createElement(Hashing_TabPanel, {
    value: value,
    index: 2,
    dir: theme.direction
  }, /*#__PURE__*/index_js_default().createElement(HashInputs, null)))));
};
/* harmony default export */ const Hashing = (Hashing_QRText);
;// CONCATENATED MODULE: ./src/components/pages/encryption/Encryption.js
var Encryption_excluded = ["children", "value", "index"];
function Encryption_slicedToArray(arr, i) { return Encryption_arrayWithHoles(arr) || Encryption_iterableToArrayLimit(arr, i) || Encryption_unsupportedIterableToArray(arr, i) || Encryption_nonIterableRest(); }
function Encryption_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Encryption_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Encryption_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Encryption_arrayLikeToArray(o, minLen); }
function Encryption_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Encryption_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Encryption_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Encryption_extends() { Encryption_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return Encryption_extends.apply(this, arguments); }
function Encryption_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Encryption_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function Encryption_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }


















function Encryption_TabPanel(props) {
  var children = props.children,
    value = props.value,
    index = props.index,
    other = Encryption_objectWithoutProperties(props, Encryption_excluded);
  return /*#__PURE__*/index_js_default().createElement("div", Encryption_extends({
    role: "tabpanel",
    hidden: value !== index,
    id: "full-width-tabpanel-".concat(index),
    "aria-labelledby": "full-width-tab-".concat(index)
  }, other), value === index && /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      p: 3
    }
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, null, children)));
}
Encryption_TabPanel.propTypes = {
  children: (prop_types_default()).node,
  index: (prop_types_default()).number.isRequired,
  value: (prop_types_default()).number.isRequired
};
function Encryption_a11yProps(index) {
  return {
    id: "full-width-tab-".concat(index),
    'aria-controls': "full-width-tabpanel-".concat(index)
  };
}
var Encryption_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    padding: {
      padding: 10
    }
  };
});
function Encryption_Maintainance() {
  var classes = Encryption_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];
  var theme = (0,styles_useTheme/* default */.A)();
  var _React$useState = index_js_default().useState(0),
    _React$useState2 = Encryption_slicedToArray(_React$useState, 2),
    value = _React$useState2[0],
    setValue = _React$useState2[1];
  var handleChange = function handleChange(event, newValue) {
    setValue(newValue);
  };
  var handleChangeIndex = function handleChangeIndex(index) {
    setValue(index);
  };
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: "Encrypt",
      backButton: true,
      menuProps: {
        icon: "more",
        items: [{
          text: "Profile",
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }]
      }
    }
  }, /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      textAlign: "center",
      padding: 20
    }
  }, /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      bgcolor: 'background.paper'
    }
  }, /*#__PURE__*/index_js_default().createElement(AppBar/* default */.A, {
    position: "static"
  }, /*#__PURE__*/index_js_default().createElement(Tabs/* default */.A, {
    value: value,
    onChange: handleChange,
    indicatorColor: "primary",
    textColor: "inherit",
    variant: "fullWidth",
    "aria-label": "full width tabs example"
  }, /*#__PURE__*/index_js_default().createElement(Tab/* default */.A, Encryption_extends({
    label: "RSA"
  }, Encryption_a11yProps(0))), /*#__PURE__*/index_js_default().createElement(Tab/* default */.A, Encryption_extends({
    label: "Symmetric"
  }, Encryption_a11yProps(1))), /*#__PURE__*/index_js_default().createElement(Tab/* default */.A, Encryption_extends({
    label: "Hashing"
  }, Encryption_a11yProps(2))))), /*#__PURE__*/index_js_default().createElement(react_swipeable_views_lib/* default */.Ay, {
    axis: theme.direction === 'rtl' ? 'x-reverse' : 'x',
    index: value,
    onChangeIndex: handleChangeIndex
  }, /*#__PURE__*/index_js_default().createElement(Encryption_TabPanel, {
    value: value,
    index: 0,
    dir: theme.direction
  }, /*#__PURE__*/index_js_default().createElement(RSA, null)), /*#__PURE__*/index_js_default().createElement(Encryption_TabPanel, {
    value: value,
    index: 1,
    dir: theme.direction
  }, /*#__PURE__*/index_js_default().createElement(Symmetric, null)), /*#__PURE__*/index_js_default().createElement(Encryption_TabPanel, {
    value: value,
    index: 2,
    dir: theme.direction
  }, /*#__PURE__*/index_js_default().createElement(Hashing, null))))));
}
;// CONCATENATED MODULE: ./src/components/pages/termsAndConditions/TermsAndConditions.js
function TermsAndConditions_slicedToArray(arr, i) { return TermsAndConditions_arrayWithHoles(arr) || TermsAndConditions_iterableToArrayLimit(arr, i) || TermsAndConditions_unsupportedIterableToArray(arr, i) || TermsAndConditions_nonIterableRest(); }
function TermsAndConditions_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function TermsAndConditions_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return TermsAndConditions_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TermsAndConditions_arrayLikeToArray(o, minLen); }
function TermsAndConditions_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function TermsAndConditions_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function TermsAndConditions_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// import React, { useState } from "react";

// import {
//     Avatar,
//     Conversation,
//     ConversationHeader,
//     ConversationList,
//     InfoButton,
//     MainContainer,
//     MessageList,
//     Search,
//     Sidebar,
//     TypingIndicator,
//     VideoCallButton,
//     VoiceCallButton,
//     Message,
//     MessageInput,
//     ChatContainer,
//     MessageSeparator,
//     ExpansionPanel
// } from "@chatscope/chat-ui-kit-react";
// import IconButton from '@mui/material/IconButton';
// import AddIcon from '@mui/icons-material/Add';

// // import contacts to be displayed at the end of this list of contacts
// import { useSelector, useDispatch } from 'react-redux'

// import lillyIco from './logo192.png'
// import joeIco from './logo192.png'
// import emilyIco from './logo192.png'
// import kaiIco from './logo192.png'
// import akaneIco from './logo192.png'
// import eliotIco from './logo192.png'
// import zoeIco from './logo192.png'
// import patrikIco from './logo192.png'
// import { useNavigate, useParams } from "react-router-dom";
// // import for the creation of a new conversation
// import { createConversation } from '../../redux/slices/podsSlice'

// export default () => {
//     const [messageInputValue, setMessageInputValue] = useState("");
//     const navigate = useNavigate();
//     const dispatch = useDispatch();
//     const contacts = useSelector((state) => state.contacts.contacts);

//     // get the conversationId from the url if it is there with react-router-dom
//     const { conversationId } = useParams();

//     // handle the creation of a new conversation
//     const handleCreateConversation = () => {
//         dispatch(createConversation({
//             name: 'New Conversation',
//             messages: [],
//             id: Math.floor(Math.random() * 1000000)
//         }))
//     }

//     return (
//         <div style={{
//             height: "100vh",
//             position: "relative",
//             overflow: "none"
//         }}>
//                 <Search key={'search'} placeholder="Search..." style={{ margin: '10px' }}/>
//                 <ConversationList scrollable>
//                     {contacts.map((contact) => (
//                         <Conversation name={contact.name} lastSenderName={contact.name} info="Yes i can do it for you" onClick={() => navigate(`/contacts/${contact.id}`)} active={conversationId === contact.id}>
//                             <Avatar src={patrikIco} name={contact.name} status="available" />
//                         </Conversation>
//                     ))}

//                     <div style={{
//                         // position: "fixed",
//                         // bottom: "0",
//                         // left: "0",
//                         // right: "0",
//                         textAlign: "center",
//                         padding: "10px",
//                     }}>
//                         <IconButton style={{ background: '#2b6a9b', color: '#fff', zIndex: 1, }} aria-label="add" size="large" onClick={() => navigate('/contacts/add')}>
//                             <AddIcon />
//                         </IconButton>
//                         <IconButton style={{ background: '#2b6a9b', color: '#fff', zIndex: 1, }} aria-label="add" size="large" onClick={handleCreateConversation}>
//                             <AddIcon />
//                         </IconButton>
//                     </div>

//                 </ConversationList>
//         </div>
//     )
// }
































var TermsAndConditions_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    padding: {
      padding: 10
    }
  };
});
function TermsAndConditions_ContactsListPage() {
  var _TermsAndConditions;
  var classes = TermsAndConditions_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain
    }),
    userProfile = _useBlockchain.compiledBlockchain;
  var storedConnectionId = userProfile.connectionId;

  // const storedConnectionId = useSelector((state) => state.userProfile.connectionId);
  var storedPods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var _usePeer = (0,usePeer/* default */.A)([]),
    activeConnections = _usePeer.activeConnections;
  var _useState = (0,index_js_.useState)(false),
    _useState2 = TermsAndConditions_slicedToArray(_useState, 2),
    scanning = _useState2[0],
    setScanning = _useState2[1];
  var _useState3 = (0,index_js_.useState)("No result"),
    _useState4 = TermsAndConditions_slicedToArray(_useState3, 2),
    result = _useState4[0],
    setResult = _useState4[1];
  // getlatest TermsAndConditions
  var LatestTermsAndConditions = (_TermsAndConditions = termsAndConditions[termsAndConditions.length - 1]) === null || _TermsAndConditions === void 0 ? void 0 : _TermsAndConditions.terms;
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: "Terms and Conditions",
      backButton: true,
      menuProps: {
        icon: "more",
        items: [{
          text: "Profile",
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }, {
          text: "About",
          icon: "info",
          onClick: function onClick() {
            return window.location = "https://positive-intentions.com";
          }
        }]
      }
    }
  }, /*#__PURE__*/index_js_default().createElement(LatestTermsAndConditions, {
    padding: 20
  }));
}
;// CONCATENATED MODULE: ./src/components/pages/privacyPolicy/PrivacyPolicy.js
function PrivacyPolicy_slicedToArray(arr, i) { return PrivacyPolicy_arrayWithHoles(arr) || PrivacyPolicy_iterableToArrayLimit(arr, i) || PrivacyPolicy_unsupportedIterableToArray(arr, i) || PrivacyPolicy_nonIterableRest(); }
function PrivacyPolicy_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function PrivacyPolicy_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return PrivacyPolicy_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return PrivacyPolicy_arrayLikeToArray(o, minLen); }
function PrivacyPolicy_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function PrivacyPolicy_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function PrivacyPolicy_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// import React, { useState } from "react";

// import {
//     Avatar,
//     Conversation,
//     ConversationHeader,
//     ConversationList,
//     InfoButton,
//     MainContainer,
//     MessageList,
//     Search,
//     Sidebar,
//     TypingIndicator,
//     VideoCallButton,
//     VoiceCallButton,
//     Message,
//     MessageInput,
//     ChatContainer,
//     MessageSeparator,
//     ExpansionPanel
// } from "@chatscope/chat-ui-kit-react";
// import IconButton from '@mui/material/IconButton';
// import AddIcon from '@mui/icons-material/Add';

// // import contacts to be displayed at the end of this list of contacts
// import { useSelector, useDispatch } from 'react-redux'

// import lillyIco from './logo192.png'
// import joeIco from './logo192.png'
// import emilyIco from './logo192.png'
// import kaiIco from './logo192.png'
// import akaneIco from './logo192.png'
// import eliotIco from './logo192.png'
// import zoeIco from './logo192.png'
// import patrikIco from './logo192.png'
// import { useNavigate, useParams } from "react-router-dom";
// // import for the creation of a new conversation
// import { createConversation } from '../../redux/slices/podsSlice'

// export default () => {
//     const [messageInputValue, setMessageInputValue] = useState("");
//     const navigate = useNavigate();
//     const dispatch = useDispatch();
//     const contacts = useSelector((state) => state.contacts.contacts);

//     // get the conversationId from the url if it is there with react-router-dom
//     const { conversationId } = useParams();

//     // handle the creation of a new conversation
//     const handleCreateConversation = () => {
//         dispatch(createConversation({
//             name: 'New Conversation',
//             messages: [],
//             id: Math.floor(Math.random() * 1000000)
//         }))
//     }

//     return (
//         <div style={{
//             height: "100vh",
//             position: "relative",
//             overflow: "none"
//         }}>
//                 <Search key={'search'} placeholder="Search..." style={{ margin: '10px' }}/>
//                 <ConversationList scrollable>
//                     {contacts.map((contact) => (
//                         <Conversation name={contact.name} lastSenderName={contact.name} info="Yes i can do it for you" onClick={() => navigate(`/contacts/${contact.id}`)} active={conversationId === contact.id}>
//                             <Avatar src={patrikIco} name={contact.name} status="available" />
//                         </Conversation>
//                     ))}

//                     <div style={{
//                         // position: "fixed",
//                         // bottom: "0",
//                         // left: "0",
//                         // right: "0",
//                         textAlign: "center",
//                         padding: "10px",
//                     }}>
//                         <IconButton style={{ background: '#2b6a9b', color: '#fff', zIndex: 1, }} aria-label="add" size="large" onClick={() => navigate('/contacts/add')}>
//                             <AddIcon />
//                         </IconButton>
//                         <IconButton style={{ background: '#2b6a9b', color: '#fff', zIndex: 1, }} aria-label="add" size="large" onClick={handleCreateConversation}>
//                             <AddIcon />
//                         </IconButton>
//                     </div>

//                 </ConversationList>
//         </div>
//     )
// }
































var PrivacyPolicy_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    padding: {
      padding: 10
    }
  };
});
function PrivacyPolicy_ContactsListPage() {
  var _TermsAndConditions;
  var classes = PrivacyPolicy_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain
    }),
    userProfile = _useBlockchain.compiledBlockchain;
  var storedConnectionId = userProfile.connectionId;

  // const storedConnectionId = useSelector((state) => state.userProfile.connectionId);
  var storedPods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var _usePeer = (0,usePeer/* default */.A)([]),
    activeConnections = _usePeer.activeConnections;
  var _useState = (0,index_js_.useState)(false),
    _useState2 = PrivacyPolicy_slicedToArray(_useState, 2),
    scanning = _useState2[0],
    setScanning = _useState2[1];
  var _useState3 = (0,index_js_.useState)("No result"),
    _useState4 = PrivacyPolicy_slicedToArray(_useState3, 2),
    result = _useState4[0],
    setResult = _useState4[1];
  // getlatest TermsAndConditions
  var LatestPrivacyPolicy = (_TermsAndConditions = termsAndConditions[termsAndConditions.length - 1]) === null || _TermsAndConditions === void 0 ? void 0 : _TermsAndConditions.privacyPolicy;
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: "Privacy Policy",
      backButton: true,
      menuProps: {
        icon: "more",
        items: [{
          text: "Profile",
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }, {
          text: "About",
          icon: "info",
          onClick: function onClick() {
            return window.location = "https://positive-intentions.com";
          }
        }]
      }
    }
  }, /*#__PURE__*/index_js_default().createElement(LatestPrivacyPolicy, {
    padding: 20
  }));
}
// EXTERNAL MODULE: ./node_modules/react-leaflet/lib/MapContainer.js
var MapContainer = __webpack_require__(66162);
// EXTERNAL MODULE: ./node_modules/react-leaflet/lib/TileLayer.js + 1 modules
var TileLayer = __webpack_require__(81344);
// EXTERNAL MODULE: ./node_modules/react-leaflet/lib/Marker.js
var Marker = __webpack_require__(14489);
// EXTERNAL MODULE: ./node_modules/react-leaflet/lib/Popup.js
var Popup = __webpack_require__(13489);
// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css
var leaflet = __webpack_require__(92274);
// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js
var leaflet_src = __webpack_require__(53481);
var leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);
// EXTERNAL MODULE: ./node_modules/leaflet/dist/images/marker-icon.png
var marker_icon = __webpack_require__(19927);
;// CONCATENATED MODULE: ./src/components/pages/map/Map.js
function Map_slicedToArray(arr, i) { return Map_arrayWithHoles(arr) || Map_iterableToArrayLimit(arr, i) || Map_unsupportedIterableToArray(arr, i) || Map_nonIterableRest(); }
function Map_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Map_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Map_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Map_arrayLikeToArray(o, minLen); }
function Map_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Map_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Map_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// import React, { useState } from "react";

// import {
//     Avatar,
//     Conversation,
//     ConversationHeader,
//     ConversationList,
//     InfoButton,
//     MainContainer,
//     MessageList,
//     Search,
//     Sidebar,
//     TypingIndicator,
//     VideoCallButton,
//     VoiceCallButton,
//     Message,
//     MessageInput,
//     ChatContainer,
//     MessageSeparator,
//     ExpansionPanel
// } from "@chatscope/chat-ui-kit-react";
// import IconButton from '@mui/material/IconButton';
// import AddIcon from '@mui/icons-material/Add';

// // import contacts to be displayed at the end of this list of contacts
// import { useSelector, useDispatch } from 'react-redux'

// import lillyIco from './logo192.png'
// import joeIco from './logo192.png'
// import emilyIco from './logo192.png'
// import kaiIco from './logo192.png'
// import akaneIco from './logo192.png'
// import eliotIco from './logo192.png'
// import zoeIco from './logo192.png'
// import patrikIco from './logo192.png'
// import { useNavigate, useParams } from "react-router-dom";
// // import for the creation of a new conversation
// import { createConversation } from '../../redux/slices/podsSlice'

// export default () => {
//     const [messageInputValue, setMessageInputValue] = useState("");
//     const navigate = useNavigate();
//     const dispatch = useDispatch();
//     const contacts = useSelector((state) => state.contacts.contacts);

//     // get the conversationId from the url if it is there with react-router-dom
//     const { conversationId } = useParams();

//     // handle the creation of a new conversation
//     const handleCreateConversation = () => {
//         dispatch(createConversation({
//             name: 'New Conversation',
//             messages: [],
//             id: Math.floor(Math.random() * 1000000)
//         }))
//     }

//     return (
//         <div style={{
//             height: "100vh",
//             position: "relative",
//             overflow: "none"
//         }}>
//                 <Search key={'search'} placeholder="Search..." style={{ margin: '10px' }}/>
//                 <ConversationList scrollable>
//                     {contacts.map((contact) => (
//                         <Conversation name={contact.name} lastSenderName={contact.name} info="Yes i can do it for you" onClick={() => navigate(`/contacts/${contact.id}`)} active={conversationId === contact.id}>
//                             <Avatar src={patrikIco} name={contact.name} status="available" />
//                         </Conversation>
//                     ))}

//                     <div style={{
//                         // position: "fixed",
//                         // bottom: "0",
//                         // left: "0",
//                         // right: "0",
//                         textAlign: "center",
//                         padding: "10px",
//                     }}>
//                         <IconButton style={{ background: '#2b6a9b', color: '#fff', zIndex: 1, }} aria-label="add" size="large" onClick={() => navigate('/contacts/add')}>
//                             <AddIcon />
//                         </IconButton>
//                         <IconButton style={{ background: '#2b6a9b', color: '#fff', zIndex: 1, }} aria-label="add" size="large" onClick={handleCreateConversation}>
//                             <AddIcon />
//                         </IconButton>
//                     </div>

//                 </ConversationList>
//         </div>
//     )
// }

































// maps styles and market icon



var Map_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    padding: {
      padding: 10
    }
  };
});
function Map() {
  var _TermsAndConditions;
  var classes = Map_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain
    }),
    userProfile = _useBlockchain.compiledBlockchain;
  var storedConnectionId = userProfile.connectionId;

  // const storedConnectionId = useSelector((state) => state.userProfile.connectionId);
  var storedPods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var _usePeer = (0,usePeer/* default */.A)([]),
    activeConnections = _usePeer.activeConnections;
  var _useState = (0,index_js_.useState)(false),
    _useState2 = Map_slicedToArray(_useState, 2),
    scanning = _useState2[0],
    setScanning = _useState2[1];
  var _useState3 = (0,index_js_.useState)("No result"),
    _useState4 = Map_slicedToArray(_useState3, 2),
    result = _useState4[0],
    setResult = _useState4[1];
  // getlatest TermsAndConditions
  var LatestTermsAndConditions = (_TermsAndConditions = termsAndConditions[termsAndConditions.length - 1]) === null || _TermsAndConditions === void 0 ? void 0 : _TermsAndConditions.terms;
  var initialPosition = [0, 0];
  var _useState5 = (0,index_js_.useState)(initialPosition),
    _useState6 = Map_slicedToArray(_useState5, 2),
    position = _useState6[0],
    setPosition = _useState6[1];

  // get gps position from device
  (0,index_js_.useEffect)(function () {
    var setLocation = function setLocation() {
      return navigator.geolocation.getCurrentPosition(function (position) {
        // alert(position.coords.longitude + " " + position.coords.latitude)
        setPosition([position.coords.latitude, position.coords.longitude]);
      }, function (error) {
        return alert(error.message);
      }, {
        enableHighAccuracy: true,
        timeout: 20000,
        maximumAge: 1000
      });
    };
    setLocation();

    // const interval = setInterval(() => {
    //     setLocation();
    // }, 5000);
    // return () => clearInterval(interval);
  }, []);

  // mapp component with position update
  var MapComponent = (0,index_js_.useMemo)(function () {
    return function () {
      return /*#__PURE__*/index_js_default().createElement(MapContainer/* MapContainer */.W, {
        center: position || initialPosition,
        zoom: 13,
        scrollWheelZoom: true,
        style: {
          height: "100vh"
        }
      }, /*#__PURE__*/index_js_default().createElement(TileLayer/* TileLayer */.e, {
        url: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
        attribution: "\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors"
      }), position && /*#__PURE__*/index_js_default().createElement(Marker/* Marker */.p, {
        position: position,
        icon: leaflet_src_default().icon({
          iconUrl: marker_icon,
          iconSize: [25, 41],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34],
          shadowSize: [41, 41]
        })
      }, /*#__PURE__*/index_js_default().createElement(Popup/* Popup */.z, null, "You are here")));
    };
  }, [position[0], position[1]]);
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: "Map",
      backButton: true,
      menuProps: {
        icon: "more",
        items: [{
          text: "Profile",
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }]
      }
    }
  }, /*#__PURE__*/index_js_default().createElement(MapComponent, null));
}
// EXTERNAL MODULE: ./node_modules/@mui/material/LinearProgress/LinearProgress.js + 1 modules
var LinearProgress = __webpack_require__(87458);
;// CONCATENATED MODULE: ./src/components/pages/ai/AI.js
function AI_extends() { AI_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return AI_extends.apply(this, arguments); }

// import List from "@mui/material/List";
// import ListItem from "@mui/material/ListItem";
// import ListItemText from "@mui/material/ListItemText";



// import AppBar from "@mui/material/AppBar";
// import Typography from "@mui/material/Typography";
// import ListItemAvatar from "@mui/material/ListItemAvatar";
// import Avatar from "@mui/material/Avatar";
// import ListItemIcon from '@mui/material/ListItemIcon';
// import ChevronRight from '@mui/icons-material/ChevronRight';
// import Fab from '@mui/material/Fab';
// import AddIcon from '@mui/icons-material/Add';
// import ListComponent from '../../atomic/molecules/list/List';





// import test from './get_started.ts'

var AI_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    padding: {
      padding: 10
    }
  };
});
function LinearProgressWithLabel(props) {
  return /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      display: "flex",
      alignItems: "center"
    }
  }, /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      width: "100%",
      mr: 1
    }
  }, /*#__PURE__*/index_js_default().createElement(LinearProgress/* default */.A, AI_extends({
    variant: "determinate"
  }, props))), /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      minWidth: 35
    }
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    variant: "body2",
    color: "text.secondary"
  }, "".concat(Math.round(props.value), "%"))));
}
function AI_Map() {
  var classes = AI_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];
  (0,index_js_.useEffect)(function () {
    setTimeout(function () {
      // test();
    }, 5000);
  }, []);

  // const userProfileBlockchain = useSelector((state) => state.userProfile.blockchain);
  // const {
  //     compiledBlockchain: userProfile,
  //   } = useBlockchain({
  //     compiler: profileCompiler,
  //     blockchain: userProfileBlockchain,
  //   });
  //   const storedConnectionId = userProfile.connectionId;

  // // const storedConnectionId = useSelector((state) => state.userProfile.connectionId);
  // const storedPods = useSelector((state) => state.pods);
  // const { activeConnections } = usePeer([])
  // const [scanning, setScanning] = useState(false)
  // const [result, setResult] = useState('No result')
  // // getlatest TermsAndConditions
  // const LatestTermsAndConditions = TermsAndConditions[TermsAndConditions.length - 1]?.terms;

  // const initialPosition = [0, 0];
  // const [position, setPosition] = useState(initialPosition);

  // // get gps position from device
  // useEffect(() => {
  //     const setLocation = () => navigator.geolocation.getCurrentPosition((position) => {
  //         // alert(position.coords.longitude + " " + position.coords.latitude)
  //         setPosition([position.coords.latitude, position.coords.longitude])
  //     },
  //     (error) => alert(error.message),
  //     { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }
  //     );

  //     setLocation();

  //     // const interval = setInterval(() => {
  //     //     setLocation();
  //     // }, 5000);
  //     // return () => clearInterval(interval);
  // }, [])

  // mapp component with position update
  // const MapComponent = useMemo(() => {
  //     return () => (
  //         <MapContainer center={position || initialPosition} zoom={13} scrollWheelZoom={true} style={{ height: '100vh' }} >
  //             <TileLayer
  //                 url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
  //                 attribution="&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors"
  //             />
  //             {position && <Marker position={position} icon={L.icon({
  //                 iconUrl: icon,
  //                 iconSize: [25, 41],
  //                 iconAnchor: [12, 41],
  //                 popupAnchor: [1, -34],
  //                 shadowSize: [41, 41]
  //             })}>
  //                 <Popup>
  //                     You are here
  //                 </Popup>
  //             </Marker>}
  //         </MapContainer>
  //     )
  // }, [position[0], position[1]])

  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: "AI",
      backButton: true,
      menuProps: {
        icon: "more",
        items: [{
          text: "Profile",
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }]
      }
    }
  }, /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      width: "100%",
      // vertically center
      alignItems: "center",
      // horizontally center
      justifyContent: "center",
      padding: 5
    }
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    variant: "h6",
    gutterBottom: true,
    component: "div"
  }, "Loading AI for offline..."), /*#__PURE__*/index_js_default().createElement(LinearProgressWithLabel, {
    value: 25
  })), /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      width: "100%",
      // vertically center
      alignItems: "center",
      // horizontally center
      justifyContent: "center",
      padding: 5
    }
  }, /*#__PURE__*/index_js_default().createElement(Typography_Typography/* default */.A, {
    variant: "h6",
    gutterBottom: true,
    component: "div"
  }, "Warming up..."), /*#__PURE__*/index_js_default().createElement(LinearProgressWithLabel, {
    value: 25
  })));
}
;// CONCATENATED MODULE: ./src/components/pages/webrtc/WebRTC.js
function WebRTC_typeof(o) { "@babel/helpers - typeof"; return WebRTC_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, WebRTC_typeof(o); }
function WebRTC_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ WebRTC_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == WebRTC_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(WebRTC_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function WebRTC_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function WebRTC_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { WebRTC_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { WebRTC_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function WebRTC_slicedToArray(arr, i) { return WebRTC_arrayWithHoles(arr) || WebRTC_iterableToArrayLimit(arr, i) || WebRTC_unsupportedIterableToArray(arr, i) || WebRTC_nonIterableRest(); }
function WebRTC_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function WebRTC_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return WebRTC_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return WebRTC_arrayLikeToArray(o, minLen); }
function WebRTC_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function WebRTC_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function WebRTC_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }















var WebRTC_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    padding: {
      padding: 10
    }
  };
});
function WebRTC_Maintainance() {
  var classes = WebRTC_useStyles();
  var navigate = (0,react_router_dist/* useNavigate */.Zp)();
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  }) || [];
  var _usePeer = (0,usePeer/* default */.A)(),
    peer = _usePeer.peer;
  var _useState = (0,index_js_.useState)(null),
    _useState2 = WebRTC_slicedToArray(_useState, 2),
    rtc = _useState2[0],
    setRtc = _useState2[1];
  var _useState3 = (0,index_js_.useState)(null),
    _useState4 = WebRTC_slicedToArray(_useState3, 2),
    dc = _useState4[0],
    setDc = _useState4[1];
  var _useState5 = (0,index_js_.useState)(null),
    _useState6 = WebRTC_slicedToArray(_useState5, 2),
    rtcIceCandidate = _useState6[0],
    setRtcIceCandidate = _useState6[1];
  var _useState7 = (0,index_js_.useState)(null),
    _useState8 = WebRTC_slicedToArray(_useState7, 2),
    rtcRemoteIceCandidate = _useState8[0],
    setRtcRemoteIceCandidate = _useState8[1];
  var _useState9 = (0,index_js_.useState)(null),
    _useState10 = WebRTC_slicedToArray(_useState9, 2),
    rtcOffer = _useState10[0],
    setRtcOffer = _useState10[1];
  var _useState11 = (0,index_js_.useState)(null),
    _useState12 = WebRTC_slicedToArray(_useState11, 2),
    rtcRemoteOffer = _useState12[0],
    setRtcRemoteOffer = _useState12[1];
  var _useState13 = (0,index_js_.useState)(null),
    _useState14 = WebRTC_slicedToArray(_useState13, 2),
    rtcAnswer = _useState14[0],
    setRtcAnswer = _useState14[1];
  var _useState15 = (0,index_js_.useState)(null),
    _useState16 = WebRTC_slicedToArray(_useState15, 2),
    rtcRemoteAnswer = _useState16[0],
    setRtcRemoteAnswer = _useState16[1];
  var _useState17 = (0,index_js_.useState)(null),
    _useState18 = WebRTC_slicedToArray(_useState17, 2),
    message = _useState18[0],
    setMessage = _useState18[1];
  (0,index_js_.useEffect)(function () {
    if (peer) {
      setRtc(peer.connect().peerConnection);
    }
  }, [peer]);
  (0,index_js_.useEffect)(function () {
    if (rtc) {
      rtc.onicecandidate = function (event) {
        if (event.candidate) {
          var serialisedIceCandidate = JSON.stringify(event.candidate);
          setRtcIceCandidate(serialisedIceCandidate);
        }
      };
      rtc.ondatachannel = function (event) {
        event.channel.onopen = function () {
          event.channel.send("hello from rtc1"); // Sending message from dc1
        };
        event.channel.onmessage = function (event) {
          console.info("rtc1: received message:", event.data);
        };
      };
      var _dc = rtc.createDataChannel("channel1");
      _dc.onopen = function () {
        _dc.send("hello from rtc2"); // Sending message from dc2
      };
      _dc.onmessage = function (event) {
        console.info("rtc2: received message:", event.data);
      };
      setDc(_dc);
    }
  }, [rtc]);
  var handleCreateOffer = /*#__PURE__*/function () {
    var _ref = WebRTC_asyncToGenerator( /*#__PURE__*/WebRTC_regeneratorRuntime().mark(function _callee() {
      var offer;
      return WebRTC_regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return rtc.createOffer();
          case 2:
            offer = _context.sent;
            _context.next = 5;
            return rtc.setLocalDescription(offer);
          case 5:
            setRtcOffer(JSON.stringify(offer));
          case 6:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function handleCreateOffer() {
      return _ref.apply(this, arguments);
    };
  }();
  var handleRemoteOffer = /*#__PURE__*/function () {
    var _ref2 = WebRTC_asyncToGenerator( /*#__PURE__*/WebRTC_regeneratorRuntime().mark(function _callee2(rtcRemoteOffer) {
      var offer, offerDescption;
      return WebRTC_regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            offer = JSON.parse(rtcRemoteOffer.replace(/(\r\n|\n|\r)/gm, "")); // RTCSessionDescriptionInit
            offerDescption = new RTCSessionDescription(offer);
            _context2.next = 4;
            return rtc.setRemoteDescription(offerDescption)["catch"](function (e) {
              console.error("rtc1: setRemoteDescription", e);
            });
          case 4:
            _context2.next = 6;
            return handleAnswer();
          case 6:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function handleRemoteOffer(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  (0,index_js_.useEffect)(function () {
    if (rtcRemoteOffer) {
      handleRemoteOffer(rtcRemoteOffer);
    }
  }, [rtcRemoteOffer]);
  var handleAnswer = /*#__PURE__*/function () {
    var _ref3 = WebRTC_asyncToGenerator( /*#__PURE__*/WebRTC_regeneratorRuntime().mark(function _callee3() {
      var answer;
      return WebRTC_regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return rtc.createAnswer();
          case 2:
            answer = _context3.sent;
            _context3.next = 5;
            return rtc.setLocalDescription(answer);
          case 5:
            setRtcAnswer(JSON.stringify(answer));
          case 6:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return function handleAnswer() {
      return _ref3.apply(this, arguments);
    };
  }();
  var handleRemoteAnswer = /*#__PURE__*/function () {
    var _ref4 = WebRTC_asyncToGenerator( /*#__PURE__*/WebRTC_regeneratorRuntime().mark(function _callee4(rtcRemoteAnswer) {
      var answer, answerDescption;
      return WebRTC_regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            answer = JSON.parse(rtcRemoteAnswer.replace(/(\r\n|\n|\r)/gm, "")); // RTCSessionDescriptionInit
            answerDescption = new RTCSessionDescription(answer);
            _context4.next = 4;
            return rtc.setRemoteDescription(answerDescption);
          case 4:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    return function handleRemoteAnswer(_x2) {
      return _ref4.apply(this, arguments);
    };
  }();
  (0,index_js_.useEffect)(function () {
    if (rtcRemoteAnswer) {
      handleRemoteAnswer(rtcRemoteAnswer);
    }
  }, [rtcRemoteAnswer]);
  var handleIceCandidate = /*#__PURE__*/function () {
    var _ref5 = WebRTC_asyncToGenerator( /*#__PURE__*/WebRTC_regeneratorRuntime().mark(function _callee5(rtcIceCandidate) {
      var iceCandidate;
      return WebRTC_regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            iceCandidate = JSON.parse(rtcIceCandidate.replace(/(\r\n|\n|\r)/gm, ""));
            _context5.next = 3;
            return rtc.addIceCandidate(iceCandidate);
          case 3:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    }));
    return function handleIceCandidate(_x3) {
      return _ref5.apply(this, arguments);
    };
  }();
  (0,index_js_.useEffect)(function () {
    if (rtcRemoteIceCandidate) {
      handleIceCandidate(rtcRemoteIceCandidate);
    }
  }, [rtcRemoteIceCandidate]);
  return /*#__PURE__*/index_js_default().createElement(page_container_PageContainer/* default */.A, {
    headerProps: {
      title: "WebRTC",
      backButton: true,
      menuProps: {
        icon: "more",
        items: [{
          text: "Profile",
          icon: "account",
          onClick: function onClick() {
            return navigate("/profile");
          }
        }]
      }
    }
  }, /*#__PURE__*/index_js_default().createElement("div", {
    style: {
      textAlign: "center",
      padding: 20
    }
  }, /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "WebRTC offer",
    name: "webRTC",
    value: rtcOffer,
    onChange: function onChange(e) {
      return setRtcOffer(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: console.log,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Upload/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: console.log,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Download/* default */.A, null))), /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCreateOffer,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Refresh/* default */.A, null))))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "WebRTC remote offer",
    name: "webRTC",
    value: rtcRemoteOffer,
    onChange: function onChange(e) {
      return setRtcRemoteOffer(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCreateOffer,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Refresh/* default */.A, null)))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "WebRTC answer",
    name: "webRTC",
    value: rtcAnswer,
    onChange: function onChange(e) {
      return setRtcAnswer(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleAnswer,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Refresh/* default */.A, null)))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "WebRTC remote answer",
    name: "webRTC",
    value: rtcRemoteAnswer,
    onChange: function onChange(e) {
      return setRtcRemoteAnswer(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleRemoteAnswer,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Refresh/* default */.A, null)))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "WebRTC ice candidate",
    name: "webRTC",
    value: rtcIceCandidate,
    onChange: function onChange(e) {
      return setRtcIceCandidate(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCreateOffer,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Refresh/* default */.A, null)))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "WebRTC remote ice candidate",
    name: "webRTC",
    value: rtcRemoteIceCandidate,
    onChange: function onChange(e) {
      return setRtcRemoteIceCandidate(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCreateOffer,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Refresh/* default */.A, null)))
    }
  }), /*#__PURE__*/index_js_default().createElement(TextField/* default */.A, {
    variant: "outlined",
    margin: "normal",
    fullWidth: true,
    id: "connectionId",
    label: "message",
    name: "webRTC",
    value: message,
    onChange: function onChange(e) {
      return setMessage(e.target.value || "");
    },
    autoComplete: "off",
    InputProps: {
      endAdornment: /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "toggle password visibility",
        onClick: handleCreateOffer,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Refresh/* default */.A, null)))
    }
  }), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    variant: "contained",
    component: "label",
    fullWidth: true,
    onClick: function onClick() {
      dc.send(message);
    }
  }, "send"),  true && /*#__PURE__*/index_js_default().createElement(QRInput, {
    defaultValue: "hello world"
  })));
}
;// CONCATENATED MODULE: ./src/components/pages/layout/Layout.js
function Layout_slicedToArray(arr, i) { return Layout_arrayWithHoles(arr) || Layout_iterableToArrayLimit(arr, i) || Layout_unsupportedIterableToArray(arr, i) || Layout_nonIterableRest(); }
function Layout_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Layout_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Layout_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Layout_arrayLikeToArray(o, minLen); }
function Layout_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Layout_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Layout_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Layout_extends() { Layout_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return Layout_extends.apply(this, arguments); }
























var Layout_Transition = /*#__PURE__*/index_js_default().forwardRef(function Transition(props, ref) {
  return /*#__PURE__*/index_js_default().createElement(Slide/* default */.A, Layout_extends({
    direction: "up",
    ref: ref
  }, props));
});
var FullScreenDialog = function FullScreenDialog() {
  var _useLocation = (0,react_router_dist/* useLocation */.zy)(),
    pathname = _useLocation.pathname;
  // const inPods = pathname === '/pods';
  var inContacts = pathname === '/contacts';
  var inContactDetails = pathname.includes('/contact/');
  var inPod = pathname.includes('/pod/');
  var inPodDetails = pathname.includes('/pod/') && pathname.includes('/details');
  var inPods = pathname === '/pods';
  var inProfile = pathname === '/profile';
  var _React$useState = index_js_default().useState(inContacts),
    _React$useState2 = Layout_slicedToArray(_React$useState, 2),
    isContacts = _React$useState2[0],
    setIsContacts = _React$useState2[1];
  var _React$useState3 = index_js_default().useState(inContactDetails),
    _React$useState4 = Layout_slicedToArray(_React$useState3, 2),
    isContactDetails = _React$useState4[0],
    setIsContactDetails = _React$useState4[1];
  var _React$useState5 = index_js_default().useState(inPod),
    _React$useState6 = Layout_slicedToArray(_React$useState5, 2),
    isPod = _React$useState6[0],
    setIsPod = _React$useState6[1];
  var _React$useState7 = index_js_default().useState(inProfile),
    _React$useState8 = Layout_slicedToArray(_React$useState7, 2),
    isProfile = _React$useState8[0],
    setIsProfile = _React$useState8[1];
  var _React$useState9 = index_js_default().useState(inPodDetails),
    _React$useState10 = Layout_slicedToArray(_React$useState9, 2),
    isPodDetails = _React$useState10[0],
    setIsPodDetails = _React$useState10[1];
  (0,index_js_.useEffect)(function () {
    if (inPods) {
      setIsContacts(false);
      setIsContactDetails(false);
      setIsPod(false);
      setIsProfile(false);
    }
  }, [inPods]);
  (0,index_js_.useEffect)(function () {
    if (inContacts || inContactDetails) return setIsContacts(true);
    return setIsContacts(false);
  }, [inContacts]);
  (0,index_js_.useEffect)(function () {
    if (inContactDetails) return setIsContactDetails(true);
    return setIsContactDetails(false);
  }, [inContactDetails]);
  (0,index_js_.useEffect)(function () {
    if (inPod || inPodDetails) return setIsPod(true);
    return setIsPod(false);
  }, [inPod]);
  (0,index_js_.useEffect)(function () {
    if (inPodDetails) return setIsPodDetails(true);
    return setIsPodDetails(false);
  }, [inPodDetails]);
  (0,index_js_.useEffect)(function () {
    if (inProfile) return setIsProfile(true);
    return setIsProfile(false);
  }, [inProfile]);

  // const inContacts = matchPath(pathname, {
  //   path: "/contacts",
  //   exact: true,
  // });

  // const inContactDetails = matchPath(pathname, {
  //   path: "/contact/:contactId",
  // });

  // const handleClickOpen = () => {
  //   setOpen(true);
  // };

  // const handleClose = () => {
  //   setOpen(false);
  // };

  return /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Pods, null), /*#__PURE__*/index_js_default().createElement(Dialog/* default */.A, {
    fullScreen: true,
    open: isContacts,
    TransitionComponent: Layout_Transition
  }, /*#__PURE__*/index_js_default().createElement(ContactsListPage, null)), /*#__PURE__*/index_js_default().createElement(Dialog/* default */.A, {
    fullScreen: true,
    open: isContactDetails,
    TransitionComponent: Layout_Transition
  }, /*#__PURE__*/index_js_default().createElement(ContactDetails_Profile, null)), /*#__PURE__*/index_js_default().createElement(Dialog/* default */.A, {
    fullScreen: true,
    open: isPod,
    TransitionComponent: Layout_Transition
  }, /*#__PURE__*/index_js_default().createElement(Pod, null)), /*#__PURE__*/index_js_default().createElement(Dialog/* default */.A, {
    fullScreen: true,
    open: isProfile,
    TransitionComponent: Layout_Transition
  }, /*#__PURE__*/index_js_default().createElement(Profile_Profile, {
    qr: pathname.includes('/profile/qr')
  })), /*#__PURE__*/index_js_default().createElement(Dialog/* default */.A, {
    fullScreen: true,
    open: isPodDetails,
    TransitionComponent: Layout_Transition
  }, /*#__PURE__*/index_js_default().createElement(Profile, null)));
};
function useViewport() {
  // State to store the current viewport category ('mobile', 'tablet', 'desktop')
  var _useState = (0,index_js_.useState)('desktop'),
    _useState2 = Layout_slicedToArray(_useState, 2),
    viewport = _useState2[0],
    setViewport = _useState2[1];
  (0,index_js_.useEffect)(function () {
    var determineViewport = function determineViewport() {
      var width = window.innerWidth;
      if (width < 600) {
        setViewport('mobile');
      } else if (width >= 600 && width < 1024) {
        setViewport('tablet');
      } else {
        setViewport('desktop');
      }
    };

    // Determine the viewport once on initial render
    determineViewport();

    // Add event listener for window resize
    window.addEventListener('resize', determineViewport);

    // Cleanup function to remove the event listener
    return function () {
      return window.removeEventListener('resize', determineViewport);
    };
  }, []); // Empty dependency array ensures this effect runs only on mount and unmount

  return viewport;
}
function Layout_Maintainance() {
  var viewport = useViewport();
  console.log({
    viewport: viewport
  });

  // return (
  //   <SplitPane split="vertical" minSize={200} defaultSize={viewport === 'mobile' ? '100%' :300}>
  //     <Pods />
  //     <SplitPane split="vertical" minSize={200} defaultSize={viewport === 'desktop' ? '50%' : '100%'}>
  //       <Contacts />
  //       {viewport === 'desktop' && <ContactDetails />}
  //     </SplitPane>
  //   </SplitPane>
  // );

  return /*#__PURE__*/index_js_default().createElement(FullScreenDialog, null);
}
;// CONCATENATED MODULE: ./src/components/router/Router.js
function Router_slicedToArray(arr, i) { return Router_arrayWithHoles(arr) || Router_iterableToArrayLimit(arr, i) || Router_unsupportedIterableToArray(arr, i) || Router_nonIterableRest(); }
function Router_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Router_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Router_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Router_arrayLikeToArray(o, minLen); }
function Router_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Router_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Router_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



// import App from "../pages/app/App";
// import Chat from "../pages/chat/Chat";
// import Conversations from "../pages/conversations/Conversations";
// import ConversationDetails from "../pages/conversationDetails/ConversationDetails";
// import Profile from "../pages/addContact/AddContact";














// import Verse from '../pages/verse/Verse'









var Verse = /*#__PURE__*/(0,index_js_.lazy)(function () {
  return Promise.all(/* import() */[__webpack_require__.e(373), __webpack_require__.e(450)]).then(__webpack_require__.bind(__webpack_require__, 74450));
});
/* harmony default export */ const Router = (function () {
  var _TermsAndConditions;
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain
    }),
    userProfile = _useBlockchain.compiledBlockchain;
  var storedUsername = userProfile.displayName;
  var agreedToTerms = userProfile.agreedToTerms;

  // const storedUsername = useSelector((state) => state.userProfile.displayName);
  // const agreedToTerms = useSelector((state) => state.userProfile.agreedToTerms);
  var _useState = (0,index_js_.useState)(null),
    _useState2 = Router_slicedToArray(_useState, 2),
    router = _useState2[0],
    setRouter = _useState2[1];
  var agreedToLatestTerms = (agreedToTerms !== null && agreedToTerms !== void 0 ? agreedToTerms : []).includes((_TermsAndConditions = termsAndConditions[termsAndConditions.length - 1]) === null || _TermsAndConditions === void 0 ? void 0 : _TermsAndConditions.version);

  // useEffect(() => {
  //   setRouter(
  //     createBrowserRouter([
  //       {
  //         path: "*",
  //         element: <Maintainance />,
  //       },
  //     ]),
  //   );
  // }, [storedUsername]);

  (0,index_js_.useEffect)(function () {
    if (!storedUsername || !agreedToLatestTerms) {
      setRouter((0,dist/* createHashRouter */.Ge)([{
        path: "*",
        element: /*#__PURE__*/index_js_default().createElement(react_router_dist/* Navigate */.C5, {
          to: "/login"
        })
      }, {
        path: "/terms",
        element: /*#__PURE__*/index_js_default().createElement(TermsAndConditions_ContactsListPage, null)
      }, {
        path: "/terms/privacy",
        element: /*#__PURE__*/index_js_default().createElement(PrivacyPolicy_ContactsListPage, null)
      }, {
        path: "/login",
        element: /*#__PURE__*/index_js_default().createElement(LoginPage, null)
      }, {
        path: "/login/:contactId",
        element: /*#__PURE__*/index_js_default().createElement(LoginPage, null)
      }, {
        path: "/login/:contactId/:contactName",
        element: /*#__PURE__*/index_js_default().createElement(LoginPage, null)
      }, {
        path: "/feed",
        element: /*#__PURE__*/index_js_default().createElement(Feed, null)
      }, {
        path: "/verse",
        element: /*#__PURE__*/index_js_default().createElement(index_js_.Suspense, {
          fallback: /*#__PURE__*/index_js_default().createElement("div", null, "Loading...")
        }, /*#__PURE__*/index_js_default().createElement(Verse, null))
      }, {
        path: "/map",
        element: /*#__PURE__*/index_js_default().createElement(Map, null)
      }, {
        path: "/ai",
        element: /*#__PURE__*/index_js_default().createElement(AI_Map, null)
      }, {
        path: "/qr",
        element: /*#__PURE__*/index_js_default().createElement(ShareQR_Maintainance, null)
      }, {
        path: "/webrtc",
        element: /*#__PURE__*/index_js_default().createElement(WebRTC_Maintainance, null)
      }, {
        path: "/layout",
        element: /*#__PURE__*/index_js_default().createElement(Layout_Maintainance, null)
      }, {
        path: "/hands",
        element: /*#__PURE__*/index_js_default().createElement(Hands_Maintainance, null)
      }, {
        path: "/encrypt",
        element: /*#__PURE__*/index_js_default().createElement(Encryption_Maintainance, null)
      }]));
    } else {
      setRouter((0,dist/* createHashRouter */.Ge)([{
        path: "*",
        element: /*#__PURE__*/index_js_default().createElement(react_router_dist/* Navigate */.C5, {
          to: "/pods"
        })
      }, {
        path: "/login",
        element: /*#__PURE__*/index_js_default().createElement(LoginPage, null)
      }, {
        path: "/login/:contactId",
        element: /*#__PURE__*/index_js_default().createElement(LoginPage, null)
      }, {
        path: "/terms",
        element: /*#__PURE__*/index_js_default().createElement(TermsAndConditions_ContactsListPage, null)
      }, {
        path: "/terms/privacy",
        element: /*#__PURE__*/index_js_default().createElement(PrivacyPolicy_ContactsListPage, null)
      }, {
        path: "/login/:contactId/:contactName",
        element: /*#__PURE__*/index_js_default().createElement(LoginPage, null)
      }, {
        path: "/contacts",
        element: /*#__PURE__*/index_js_default().createElement(Layout_Maintainance, null)
      }, {
        path: "/contact/:contactId",
        element: /*#__PURE__*/index_js_default().createElement(Layout_Maintainance, null)
      }, {
        path: "/pods",
        element: /*#__PURE__*/index_js_default().createElement(Layout_Maintainance, null)
      }, {
        path: "/pod/:podId",
        element: /*#__PURE__*/index_js_default().createElement(Layout_Maintainance, null)
      }, {
        path: "/pod/:podId/details",
        element: /*#__PURE__*/index_js_default().createElement(Layout_Maintainance, null)
      }, {
        path: "/pod/:podId/files",
        element: /*#__PURE__*/index_js_default().createElement(Files_ContactsListPage, null)
      }, {
        path: "/pod/:podId/file/:fileId",
        element: /*#__PURE__*/index_js_default().createElement(File, null)
      }, {
        path: "/pod/:podId/verse",
        element: /*#__PURE__*/index_js_default().createElement(index_js_.Suspense, {
          fallback: /*#__PURE__*/index_js_default().createElement("div", null, "Loading...")
        }, /*#__PURE__*/index_js_default().createElement(Verse, null))
      }, {
        path: "/profile",
        element: /*#__PURE__*/index_js_default().createElement(Layout_Maintainance, null)
      }, {
        path: "/profile/qr",
        element: /*#__PURE__*/index_js_default().createElement(Layout_Maintainance, null)
      }, {
        path: "/feed",
        element:
        /*#__PURE__*/
        // <SplitPane split="vertical" minSize={350}>
        //   <Pods />
        index_js_default().createElement(Feed, null)
        // </SplitPane>
      }, {
        path: "/verse",
        element: /*#__PURE__*/index_js_default().createElement(index_js_.Suspense, {
          fallback: /*#__PURE__*/index_js_default().createElement("div", null, "Loading...")
        }, /*#__PURE__*/index_js_default().createElement(Verse, null))
      }, {
        path: "/map",
        element: /*#__PURE__*/index_js_default().createElement(Map, null)
      }, {
        path: "/ai",
        element: /*#__PURE__*/index_js_default().createElement(AI_Map, null)
      }, {
        path: "/qr",
        element: /*#__PURE__*/index_js_default().createElement(ShareQR_Maintainance, null)
      }, {
        path: "/webrtc",
        element: /*#__PURE__*/index_js_default().createElement(WebRTC_Maintainance, null)
      }, {
        path: "/layout",
        element: /*#__PURE__*/index_js_default().createElement(Layout_Maintainance, null)
      }, {
        path: "/hands",
        element: /*#__PURE__*/index_js_default().createElement(Hands_Maintainance, null)
      }, {
        path: "/encrypt",
        element: /*#__PURE__*/index_js_default().createElement(Encryption_Maintainance, null)
      }]));
    }
  }, [storedUsername]);
  return (router === null || router === void 0 ? void 0 : router.state) && /*#__PURE__*/index_js_default().createElement(dist/* RouterProvider */.pg, {
    router: router
  });
});
// EXTERNAL MODULE: ./node_modules/redux-persist/es/integration/react.js
var react = __webpack_require__(68131);
// EXTERNAL MODULE: ./node_modules/redux/dist/redux.mjs
var redux = __webpack_require__(14644);
// EXTERNAL MODULE: ./node_modules/redux-persist/es/index.js + 7 modules
var redux_persist_es = __webpack_require__(70960);
// EXTERNAL MODULE: ./node_modules/redux-persist-indexeddb-storage/dist/index.js
var redux_persist_indexeddb_storage_dist = __webpack_require__(12863);
;// CONCATENATED MODULE: ./src/components/redux/store.js


// import storage from 'redux-persist/lib/storage';






var persistConfig = {
  key: "root",
  storage: (0,redux_persist_indexeddb_storage_dist/* default */.A)("positive-intentions")
};
var appReducer = (0,redux/* combineReducers */.HY)({
  userProfile: userProfileSlice/* default */.Ay,
  contacts: slices_contactsSlice,
  pods: podsSlice/* default */.Ay,
  encryption: slices_encryptionSlice,
  storage: storageSlice/* default */.Ay
});
var rootReducer = function rootReducer(state, action) {
  // When a user logs out, reset the state of all reducers
  if (action.type === "userProfile/logout") {
    state = undefined;
  }
  return appReducer(state, action);
};
var persistedReducer = (0,redux_persist_es/* persistReducer */.rL)(persistConfig, rootReducer);
/* harmony default export */ const store = (function () {
  var store = (0,redux_toolkit_modern/* configureStore */.U1)({
    reducer: persistedReducer
  });
  var persistor = (0,redux_persist_es/* persistStore */.GM)(store);
  return {
    store: store,
    persistor: persistor
  };
});

// export default configureStore({
//   reducer: {
//     userProfile: userProfileReducer,
//     contacts: contactsReducer,
//     conversations: conversationsReducer,
//   },
// })
;// CONCATENATED MODULE: ./src/components/redux/Redux.js




var _reduxPersistConfig = store(),
  Redux_store = _reduxPersistConfig.store,
  persistor = _reduxPersistConfig.persistor;
/* harmony default export */ const Redux = (function (_ref) {
  var children = _ref.children;
  return /*#__PURE__*/index_js_default().createElement(react_redux/* Provider */.Kq, {
    store: Redux_store
  }, /*#__PURE__*/index_js_default().createElement(react/* PersistGate */.Q, {
    loading: null,
    persistor: persistor
  }, children));
});
// EXTERNAL MODULE: ./src/components/p2p/PeerProvider.js
var PeerProvider = __webpack_require__(44188);
// EXTERNAL MODULE: ./src/components/encryption/Encryption.js
var Encryption = __webpack_require__(89091);
;// CONCATENATED MODULE: ./src/components/p2p/appi/encryptionMiddleware.js
function encryptionMiddleware_typeof(o) { "@babel/helpers - typeof"; return encryptionMiddleware_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, encryptionMiddleware_typeof(o); }
function encryptionMiddleware_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ encryptionMiddleware_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == encryptionMiddleware_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(encryptionMiddleware_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function encryptionMiddleware_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function encryptionMiddleware_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { encryptionMiddleware_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { encryptionMiddleware_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var createEncryptionMiddleware = function createEncryptionMiddleware(encryptionKeys) {
  return /*#__PURE__*/function () {
    var _ref = encryptionMiddleware_asyncToGenerator( /*#__PURE__*/encryptionMiddleware_regeneratorRuntime().mark(function _callee2(req, res, next) {
      var _encryptionKeys$req$s, privateKey, remotePublicKey, deserializedPrivateKey, deserializedRemotePublicKey, decryptedMessage;
      return encryptionMiddleware_regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _encryptionKeys$req$s = encryptionKeys[req.sender], privateKey = _encryptionKeys$req$s.privateKey, remotePublicKey = _encryptionKeys$req$s.remotePublicKey;
            _context2.next = 3;
            return window.crypto.subtle.importKey("jwk", privateKey, {
              name: "RSA-OAEP",
              hash: "SHA-256"
            }, true, ["decrypt"]);
          case 3:
            deserializedPrivateKey = _context2.sent;
            _context2.next = 6;
            return window.crypto.subtle.importKey("jwk", remotePublicKey, {
              name: "RSA-OAEP",
              hash: "SHA-256"
            }, true, ["encrypt"]);
          case 6:
            deserializedRemotePublicKey = _context2.sent;
            decryptedMessage = null;
            if (!req.payload) {
              _context2.next = 12;
              break;
            }
            _context2.next = 11;
            return (0,Encryption/* decrypt */.Yc)(req.payload, deserializedPrivateKey);
          case 11:
            decryptedMessage = _context2.sent;
          case 12:
            req.payload = JSON.parse(decryptedMessage);
            res.sendEncrypted = /*#__PURE__*/function () {
              var _ref2 = encryptionMiddleware_asyncToGenerator( /*#__PURE__*/encryptionMiddleware_regeneratorRuntime().mark(function _callee(type, payload) {
                var encryptedPayload;
                return encryptionMiddleware_regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      encryptedPayload = payload;
                      if (!payload) {
                        _context.next = 5;
                        break;
                      }
                      _context.next = 4;
                      return (0,Encryption/* encrypt */.w)(JSON.stringify(payload), deserializedRemotePublicKey);
                    case 4:
                      encryptedPayload = _context.sent;
                    case 5:
                      res.send(type, encryptedPayload);
                    case 6:
                    case "end":
                      return _context.stop();
                  }
                }, _callee);
              }));
              return function (_x4, _x5) {
                return _ref2.apply(this, arguments);
              };
            }();
            next();
          case 15:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();
};
/* harmony default export */ const appi_encryptionMiddleware = (createEncryptionMiddleware);
;// CONCATENATED MODULE: ./src/components/p2p/appi/handshakeEndpoints.js
function handshakeEndpoints_typeof(o) { "@babel/helpers - typeof"; return handshakeEndpoints_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, handshakeEndpoints_typeof(o); }
function handshakeEndpoints_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ handshakeEndpoints_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == handshakeEndpoints_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(handshakeEndpoints_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function handshakeEndpoints_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function handshakeEndpoints_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { handshakeEndpoints_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { handshakeEndpoints_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function handshakeEndpoints_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function handshakeEndpoints_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? handshakeEndpoints_ownKeys(Object(t), !0).forEach(function (r) { handshakeEndpoints_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : handshakeEndpoints_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function handshakeEndpoints_defineProperty(obj, key, value) { key = handshakeEndpoints_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function handshakeEndpoints_toPropertyKey(t) { var i = handshakeEndpoints_toPrimitive(t, "string"); return "symbol" == handshakeEndpoints_typeof(i) ? i : i + ""; }
function handshakeEndpoints_toPrimitive(t, r) { if ("object" != handshakeEndpoints_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != handshakeEndpoints_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }



// const createEncryptionMiddleware = (encryptionKeys) => async (req,res, next) => {
//     const { privateKey, remotePublicKey } = encryptionKeys[req.sender];
//     const deserializedPrivateKey = await window.crypto.subtle.importKey(
//         'jwk',
//         privateKey,
//         {
//             name: 'RSA-OAEP',
//             hash: 'SHA-256',
//         },
//         true,
//         ['decrypt']
//     );
//     const deserializedRemotePublicKey = await window.crypto.subtle.importKey(
//         'jwk',
//         remotePublicKey,
//         {
//             name: 'RSA-OAEP',
//             hash: 'SHA-256',
//         },
//         true,
//         ['encrypt']
//     );

//     console.log({ deserializedPrivateKey, deserializedRemotePublicKey })

//     let decryptedMessage = null
//     if(req.payload) {
//         decryptedMessage = await decrypt(req.payload, deserializedPrivateKey);
//     }
//     req.payload = JSON.parse(decryptedMessage);
//     res.sendEncrypted = async (type, payload) => {
//         let encryptedPayload = payload
//         if (payload) {
//             encryptedPayload = await encrypt(JSON.stringify(payload), deserializedRemotePublicKey);
//         }
//         res.send(type, encryptedPayload);
//     }

//     next();
// }

var handshakeEndpoints = function handshakeEndpoints(_ref, sendNotification) {
  var addContactDispatch = _ref.addContactDispatch,
    updateContactDispatch = _ref.updateContactDispatch,
    addEncryptionKeysDispatch = _ref.addEncryptionKeysDispatch,
    updateEncryptionKeysDispatch = _ref.updateEncryptionKeysDispatch,
    encryptionKeys = _ref.encryptionKeys;
  var encryptionMiddleware = appi_encryptionMiddleware(encryptionKeys);
  return {
    requestUserDetails: function requestUserDetails(state) {
      return [
      // encryptionMiddleware,
      function (request, response, next) {
        if (!state.contacts.find(function (contact) {
          return contact.id === request.sender;
        })) {
          addContactDispatch(handshakeEndpoints_objectSpread({}, request.payload));
          var message = "".concat(request.payload.displayName, " added to contacts");
          sendNotification(message, {
            variant: "success"
          });
        } else {
          updateContactDispatch(handshakeEndpoints_objectSpread(handshakeEndpoints_objectSpread({}, request.payload), {}, {
            id: request.sender
          }));
        }
        response.send(handshakeEndpoints_objectSpread({}, state.userProfile));
      }];
    },
    validateIdentity: function validateIdentity(state) {
      return [(
      /*#__PURE__*/
      // encryptionMiddleware,
      function () {
        var _ref2 = handshakeEndpoints_asyncToGenerator( /*#__PURE__*/handshakeEndpoints_regeneratorRuntime().mark(function _callee(request, response, next) {
          var _encryptionKeys$reque, privateKey, remotePublicKey, decryptedrsaMessage, encryptedMessage;
          return handshakeEndpoints_regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _encryptionKeys$reque = encryptionKeys[request.sender], privateKey = _encryptionKeys$reque.privateKey, remotePublicKey = _encryptionKeys$reque.remotePublicKey;
                _context.t0 = Encryption/* decrypt */.Yc;
                _context.t1 = request.payload;
                _context.next = 5;
                return (0,Encryption/* deserializePrivateKey */.eB)(privateKey);
              case 5:
                _context.t2 = _context.sent;
                _context.next = 8;
                return (0, _context.t0)(_context.t1, _context.t2);
              case 8:
                decryptedrsaMessage = _context.sent;
                _context.t3 = Encryption/* encrypt */.w;
                _context.t4 = decryptedrsaMessage;
                _context.next = 13;
                return (0,Encryption/* deserializePublicKey */.QT)(remotePublicKey);
              case 13:
                _context.t5 = _context.sent;
                _context.next = 16;
                return (0, _context.t3)(_context.t4, _context.t5);
              case 16:
                encryptedMessage = _context.sent;
                response.send({
                  data: encryptedMessage
                });
              case 18:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function (_x, _x2, _x3) {
          return _ref2.apply(this, arguments);
        };
      }())];
    },
    createEncryption: function createEncryption(state) {
      return [( /*#__PURE__*/function () {
        var _ref3 = handshakeEndpoints_asyncToGenerator( /*#__PURE__*/handshakeEndpoints_regeneratorRuntime().mark(function _callee2(request, response, next) {
          var _yield$generateKeyPai, publicKey, privateKey, symmetricKey, serializedPublicKey, serializedPrivateKey, serializedSymmetricKey;
          return handshakeEndpoints_regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (0,Encryption/* generateKeyPair */.TZ)();
              case 2:
                _yield$generateKeyPai = _context2.sent;
                publicKey = _yield$generateKeyPai.publicKey;
                privateKey = _yield$generateKeyPai.privateKey;
                _context2.next = 7;
                return (0,Encryption/* generateSymmetricKey */.yE)();
              case 7:
                symmetricKey = _context2.sent;
                _context2.next = 10;
                return window.crypto.subtle.exportKey("jwk", publicKey);
              case 10:
                serializedPublicKey = _context2.sent;
                _context2.next = 13;
                return window.crypto.subtle.exportKey("jwk", privateKey);
              case 13:
                serializedPrivateKey = _context2.sent;
                _context2.next = 16;
                return window.crypto.subtle.exportKey("jwk", symmetricKey);
              case 16:
                serializedSymmetricKey = _context2.sent;
                addEncryptionKeysDispatch({
                  userId: request.sender,
                  publicKey: serializedPublicKey,
                  privateKey: serializedPrivateKey,
                  remotePublicKey: request.payload.publicKey,
                  symmetricKey: serializedSymmetricKey,
                  established: true
                });
                response.send({
                  publicKey: serializedPublicKey,
                  symmetricKey: serializedSymmetricKey
                });
              case 19:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return function (_x4, _x5, _x6) {
          return _ref3.apply(this, arguments);
        };
      }())];
    }
  };
};
/* harmony default export */ const appi_handshakeEndpoints = (handshakeEndpoints);
;// CONCATENATED MODULE: ./src/components/p2p/appi/pingPingEndpoints.js
/* harmony default export */ const pingPingEndpoints = (function () {
  return {
    ping: function ping() {
      return [function (request, response, next) {
        console.log("user request", {
          payload: request.payload,
          sender: request.sender
        });
        next();
      }, function (request, response, next) {
        console.log("user response", {
          payload: response.payload,
          sender: response.sender
        });
        response.send("pong", {
          message: "pong"
        });
      }];
    },
    pong: function pong() {
      return [function (request, response, next) {
        response.send({
          message: "ping"
        });
      }];
    }
  };
});
;// CONCATENATED MODULE: ./src/components/p2p/appi/podEndpoints.js
function podEndpoints_typeof(o) { "@babel/helpers - typeof"; return podEndpoints_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, podEndpoints_typeof(o); }
function podEndpoints_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function podEndpoints_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? podEndpoints_ownKeys(Object(t), !0).forEach(function (r) { podEndpoints_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : podEndpoints_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function podEndpoints_defineProperty(obj, key, value) { key = podEndpoints_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function podEndpoints_toPropertyKey(t) { var i = podEndpoints_toPrimitive(t, "string"); return "symbol" == podEndpoints_typeof(i) ? i : i + ""; }
function podEndpoints_toPrimitive(t, r) { if ("object" != podEndpoints_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != podEndpoints_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }





var podEndpoints = function podEndpoints(_ref, sendNotification) {
  var createNewPodDispatch = _ref.createNewPodDispatch,
    addUserToPodDispatch = _ref.addUserToPodDispatch,
    addMessageToConversationDispatch = _ref.addMessageToConversationDispatch,
    encryptionKeys = _ref.encryptionKeys,
    updatePodUnreadCountDispatch = _ref.updatePodUnreadCountDispatch,
    setShouldHangupDispatch = _ref.setShouldHangupDispatch,
    setPeerIsTypingDispatch = _ref.setPeerIsTypingDispatch,
    setEphemeralStoreDispatch = _ref.setEphemeralStoreDispatch,
    addStorageItemDispatch = _ref.addStorageItemDispatch,
    addToBlockchainDispatch = _ref.addToBlockchainDispatch;
  var encryptionMiddleware = appi_encryptionMiddleware(encryptionKeys);
  return {
    requestPodDetails: function requestPodDetails(state) {
      return [
      // encryptionMiddleware,
      function (request, response, next) {
        console.log("recieving requestPodDetails", request.payload);

        // response.send('requestUserDetails');
        var pod = state.pods.find(function (pod) {
          return pod.id === request.payload.id;
        });
        response.send("recievePodDetails", podEndpoints_objectSpread(podEndpoints_objectSpread({}, pod), {}, {
          messages: []
        }));
      }];
    },
    recievePodDetails: function recievePodDetails(state) {
      return [
      // encryptionMiddleware,
      function (request, response, next) {
        console.log("recieving recievePodDetails", request.payload);
        if (!state.pods.find(function (pod) {
          return pod.id === request.payload.id;
        })) {
          console.log("recievePodDetails", request.payload);
          createNewPodDispatch(request.payload);
        }
      }];
    },
    addUserToPod: function addUserToPod(state) {
      return [
      // encryptionMiddleware,
      function (request, response, next) {
        console.log("recieving addNewPod", request.payload);
        addUserToPodDispatch(request.payload.podId, request.payload.userId);
        response.send();
      }];
    },
    addNewPod: function addNewPod(state) {
      return [
      // encryptionMiddleware,
      function (request, response, next) {
        console.log("recieving addNewPod", request.payload);
        if (!state.pods.find(function (pod) {
          return pod.id === request.payload.id;
        })) {
          var _blockchainInstance$c;
          console.log("addNewPod", request.payload);

          // const blockchainInstance = new Blockchain({
          //     compiler: podCompiler,
          //     chain: pod.blockchain?.chain ?? [],
          //     storage: pod.blockchain?.storage ?? {},
          // });
          // const compiledBlockchain = blockchainInstance?.compile?.();

          // const payLoadContainsClone = request.payload.pendingBlocks.find((block) => block.type === 'setClone');
          // const cloneAlreadyExists = state.pods.find((pod) => !!pod.clone);

          // find the value of "cloneAlreadyExists" and "payLoadContainsClone" in the console log below
          // you will have to get the compiles result from the blockchain
          var blockchainInstance = new Blockchain/* default */.A({
            compiler: podChain/* compiler */.cx,
            chain: request.payload.pendingBlocks,
            storage: request.payload.pendingStorage
          });
          var compiledBlockchain = blockchainInstance === null || blockchainInstance === void 0 || (_blockchainInstance$c = blockchainInstance.compile) === null || _blockchainInstance$c === void 0 ? void 0 : _blockchainInstance$c.call(blockchainInstance);
          var payLoadContainsClone = compiledBlockchain === null || compiledBlockchain === void 0 ? void 0 : compiledBlockchain.clone;
          var cloneAlreadyExists = !!state.pods.find(function (pod) {
            var _pod$blockchain$chain, _pod$blockchain, _pod$blockchain$stora, _pod$blockchain2, _blockchainInstance$c2;
            var blockchainInstance = new Blockchain/* default */.A({
              compiler: podChain/* compiler */.cx,
              chain: (_pod$blockchain$chain = (_pod$blockchain = pod.blockchain) === null || _pod$blockchain === void 0 ? void 0 : _pod$blockchain.chain) !== null && _pod$blockchain$chain !== void 0 ? _pod$blockchain$chain : [],
              storage: (_pod$blockchain$stora = (_pod$blockchain2 = pod.blockchain) === null || _pod$blockchain2 === void 0 ? void 0 : _pod$blockchain2.storage) !== null && _pod$blockchain$stora !== void 0 ? _pod$blockchain$stora : {}
            });
            var compiledBlockchain = blockchainInstance === null || blockchainInstance === void 0 || (_blockchainInstance$c2 = blockchainInstance.compile) === null || _blockchainInstance$c2 === void 0 ? void 0 : _blockchainInstance$c2.call(blockchainInstance);
            return compiledBlockchain === null || compiledBlockchain === void 0 ? void 0 : compiledBlockchain.clone;
          });
          console.log({
            payLoadContainsClone: payLoadContainsClone,
            cloneAlreadyExists: cloneAlreadyExists,
            payload: request.payload,
            state: state
          });
          if (payLoadContainsClone && cloneAlreadyExists) {
            console.log("clone already exists");
            return response.send({
              canCreateClone: false
            });
          }

          // cloning is only allowed when there are no existing pods
          if (state.pods.length !== 0 && payLoadContainsClone) {
            console.log("cloning is only allowed when there are no existing pods");
            return response.send({
              canCreateClone: false
            });
          }
          createNewPodDispatch(request.payload);
        } else {
          var newMember = request.payload.members[request.payload.members.length - 1];
          addUserToPodDispatch(request.payload.id, newMember);
        }
        response.send();
      }];
    },
    message: function message(state) {
      return [
      // encryptionMiddleware,
      function (request, response, next) {
        var _request$payload$mess;
        var isNotOnPodPage = window.location.pathname !== "/pod/".concat(request.payload.podId);
        var isNotOnPodsOverViewPage = window.location.pathname !== "/pods";
        console.log("in message handler");
        logToNLevelAnalytics("RecievingMessageSuccess");
        if (isNotOnPodPage || document.hidden) {
          var _state$pods$find;
          // create messahe for notification. something like:
          // "james: hello world"
          var contactName = state.contacts.find(function (contact) {
            return contact.connectionId === request.payload.message.from;
          }).displayName;
          var content = request.payload.message.content;
          var message = "\uD83D\uDCAC ".concat(contactName, ": ").concat(content);
          sendNotification(message, {
            variant: "success"
          });
          var storedUnreadCount = ((_state$pods$find = state.pods.find(function (pod) {
            return pod.id === request.payload.podId;
          })) === null || _state$pods$find === void 0 ? void 0 : _state$pods$find.unreadCount) || 0;
          var newUnreadCount = storedUnreadCount ? storedUnreadCount + 1 : 1;
          updatePodUnreadCountDispatch(request.payload.podId, newUnreadCount);
          // updatePodUnreadCountDispatch( request.payload.podId, 1);
        }
        if (!state.pods.find(function (pod) {
          return pod.id === request.payload.id;
        })) {
          createNewPodDispatch(request.payload.podDetails);
        }
        addToBlockchainDispatch(request.payload.podId, request.payload.blocks, request.payload.block, request.payload.storage);
        addMessageToConversationDispatch({
          podId: request.payload.podId,
          message: podEndpoints_objectSpread(podEndpoints_objectSpread({}, request.payload.message), {}, {
            attachment: (_request$payload$mess = request.payload.message) === null || _request$payload$mess === void 0 || (_request$payload$mess = _request$payload$mess.attachment) === null || _request$payload$mess === void 0 ? void 0 : _request$payload$mess.sha
          })
        });
        if (request.payload.message.attachment) addStorageItemDispatch(request.payload.podId, request.payload.message.attachment);
        response.send();
      }];
    },
    largeFile: function largeFile(state) {
      return [
      // encryptionMiddleware,
      function (request, response, next) {
        var _request$payload, _request$payload2;
        console.log("recieving largeFile", request.payload);
        // download the base64encoded file inrequest.payload.data
        // and save it to the file system
        sendNotification("Downloading file", {
          variant: "success",
          insist: true
        });
        // const file = request.payload.data;
        // const blob = new Blob([file], { type: "application/octet-stream" });
        // FileSaver.saveAs(blob, request.payload.name);

        var element = document.createElement("a");
        element.href = (_request$payload = request.payload) === null || _request$payload === void 0 ? void 0 : _request$payload.data; // URL.createObjectURL(file);
        element.download = (_request$payload2 = request.payload) === null || _request$payload2 === void 0 ? void 0 : _request$payload2.name;
        document.body.appendChild(element);
        element.click();
        response.send();
      }];
    },
    setShouldHangup: function setShouldHangup(state) {
      return [function (request, response, next) {
        console.log("recieving setShouldHangup", request.payload);
        setShouldHangupDispatch(request.payload.podId, request.payload.shouldHangup);
        response.send();
      }];
    },
    setPeerIsTyping: function setPeerIsTyping(state) {
      return [function (request, response, next) {
        console.log("recieving setPeerIsTyping", request.payload);
        setPeerIsTypingDispatch(request.payload.podId, request.payload.peerDisplayName, request.payload.isTyping);
        response.send();
      }];
    },
    updateEphemeralStorage: function updateEphemeralStorage(state) {
      return [function (request, response, next) {
        console.log("recieving updateEphemeralStorage", request.payload);
        setEphemeralStoreDispatch(request.payload.podId, request.payload.ephemeralStorage);
        response.send();
      }];
    },
    addToBlockchain: function addToBlockchain(state) {
      return [function (request, response, next) {
        console.log("recieving addToBlockchain", request.payload);
        addToBlockchainDispatch(request.payload.id, request.payload.pendingBlocks, request.payload.block, request.payload.pendingStorage);
        response.send();
      }];
    },
    syncPodBlockchains: function syncPodBlockchains(state) {
      return [function (request, response, next) {
        var pods = state.pods.filter(function (pod) {
          var _pod$blockchain$chain2, _pod$blockchain3, _pod$blockchain$stora2, _pod$blockchain4, _blockchainInstance$c3, _request$payload$user, _request$payload3;
          var blockchainInstance = new Blockchain/* default */.A({
            compiler: podChain/* compiler */.cx,
            chain: (_pod$blockchain$chain2 = (_pod$blockchain3 = pod.blockchain) === null || _pod$blockchain3 === void 0 ? void 0 : _pod$blockchain3.chain) !== null && _pod$blockchain$chain2 !== void 0 ? _pod$blockchain$chain2 : [],
            storage: (_pod$blockchain$stora2 = (_pod$blockchain4 = pod.blockchain) === null || _pod$blockchain4 === void 0 ? void 0 : _pod$blockchain4.storage) !== null && _pod$blockchain$stora2 !== void 0 ? _pod$blockchain$stora2 : {}
          });
          var compiledBlockchain = blockchainInstance === null || blockchainInstance === void 0 || (_blockchainInstance$c3 = blockchainInstance.compile) === null || _blockchainInstance$c3 === void 0 ? void 0 : _blockchainInstance$c3.call(blockchainInstance);
          console.log("sync blockchain compoled", {
            compiledBlockchain: compiledBlockchain,
            request: request
          });
          return compiledBlockchain === null || compiledBlockchain === void 0 ? void 0 : compiledBlockchain.users.includes((_request$payload$user = request === null || request === void 0 || (_request$payload3 = request.payload) === null || _request$payload3 === void 0 ? void 0 : _request$payload3.userId) !== null && _request$payload$user !== void 0 ? _request$payload$user : "");
        });
        console.log({
          pods: pods
        });
        response.send({
          pods: pods
        });
      }];
    }
  };
};
/* harmony default export */ const appi_podEndpoints = (podEndpoints);
;// CONCATENATED MODULE: ./src/components/p2p/appi/appiSchema.js
function appiSchema_typeof(o) { "@babel/helpers - typeof"; return appiSchema_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, appiSchema_typeof(o); }
function appiSchema_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function appiSchema_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? appiSchema_ownKeys(Object(t), !0).forEach(function (r) { appiSchema_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : appiSchema_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function appiSchema_defineProperty(obj, key, value) { key = appiSchema_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function appiSchema_toPropertyKey(t) { var i = appiSchema_toPrimitive(t, "string"); return "symbol" == appiSchema_typeof(i) ? i : i + ""; }
function appiSchema_toPrimitive(t, r) { if ("object" != appiSchema_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != appiSchema_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }



var appiSchema = function appiSchema(_ref, sendNotification) {
  var addContactDispatch = _ref.addContactDispatch,
    updateContactDispatch = _ref.updateContactDispatch,
    createNewPodDispatch = _ref.createNewPodDispatch,
    addUserToPodDispatch = _ref.addUserToPodDispatch,
    setShouldHangupDispatch = _ref.setShouldHangupDispatch,
    updatePodUnreadCountDispatch = _ref.updatePodUnreadCountDispatch,
    addMessageToConversationDispatch = _ref.addMessageToConversationDispatch,
    addEncryptionKeysDispatch = _ref.addEncryptionKeysDispatch,
    updateEncryptionKeysDispatch = _ref.updateEncryptionKeysDispatch,
    setPeerIsTypingDispatch = _ref.setPeerIsTypingDispatch,
    setEphemeralStoreDispatch = _ref.setEphemeralStoreDispatch,
    addStorageItemDispatch = _ref.addStorageItemDispatch,
    addToBlockchainDispatch = _ref.addToBlockchainDispatch,
    encryptionKeys = _ref.encryptionKeys;
  return appiSchema_objectSpread(appiSchema_objectSpread(appiSchema_objectSpread({}, pingPingEndpoints()), appi_handshakeEndpoints({
    addContactDispatch: addContactDispatch,
    updateContactDispatch: updateContactDispatch,
    addEncryptionKeysDispatch: addEncryptionKeysDispatch,
    updateEncryptionKeysDispatch: updateEncryptionKeysDispatch,
    encryptionKeys: encryptionKeys
  }, sendNotification)), appi_podEndpoints({
    createNewPodDispatch: createNewPodDispatch,
    addUserToPodDispatch: addUserToPodDispatch,
    addMessageToConversationDispatch: addMessageToConversationDispatch,
    encryptionKeys: encryptionKeys,
    updatePodUnreadCountDispatch: updatePodUnreadCountDispatch,
    setShouldHangupDispatch: setShouldHangupDispatch,
    setPeerIsTypingDispatch: setPeerIsTypingDispatch,
    setEphemeralStoreDispatch: setEphemeralStoreDispatch,
    addStorageItemDispatch: addStorageItemDispatch,
    addToBlockchainDispatch: addToBlockchainDispatch
  }, sendNotification));
};
/* harmony default export */ const appi_appiSchema = (appiSchema);
;// CONCATENATED MODULE: ./src/components/p2p/ReduxConnectedPeerProvider.js
function ReduxConnectedPeerProvider_typeof(o) { "@babel/helpers - typeof"; return ReduxConnectedPeerProvider_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ReduxConnectedPeerProvider_typeof(o); }
function ReduxConnectedPeerProvider_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function ReduxConnectedPeerProvider_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ReduxConnectedPeerProvider_ownKeys(Object(t), !0).forEach(function (r) { ReduxConnectedPeerProvider_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ReduxConnectedPeerProvider_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function ReduxConnectedPeerProvider_defineProperty(obj, key, value) { key = ReduxConnectedPeerProvider_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function ReduxConnectedPeerProvider_toPropertyKey(t) { var i = ReduxConnectedPeerProvider_toPrimitive(t, "string"); return "symbol" == ReduxConnectedPeerProvider_typeof(i) ? i : i + ""; }
function ReduxConnectedPeerProvider_toPrimitive(t, r) { if ("object" != ReduxConnectedPeerProvider_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != ReduxConnectedPeerProvider_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function ReduxConnectedPeerProvider_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ ReduxConnectedPeerProvider_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == ReduxConnectedPeerProvider_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(ReduxConnectedPeerProvider_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function ReduxConnectedPeerProvider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function ReduxConnectedPeerProvider_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { ReduxConnectedPeerProvider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { ReduxConnectedPeerProvider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }














/* harmony default export */ const ReduxConnectedPeerProvider = (function (_ref) {
  var children = _ref.children;
  var _useCryptography = (0,Cryptography.useCryptography)(),
    randomString = _useCryptography.randomString;
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var addToBlockchainDispatch = function addToBlockchainDispatch(podId, blocks, block, storage) {
    return dispatch((0,podsSlice/* addToBlockchain */.XE)({
      podId: podId,
      blocks: blocks,
      block: block,
      storage: storage,
      append: true
    }));
  };
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain,
      dispatch: addToBlockchainDispatch
    }),
    userProfile = _useBlockchain.compiledBlockchain,
    addBlocksToProfile = _useBlockchain.addBlocks;
  var contacts = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.contacts;
  });
  var pods = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.pods;
  });
  var encryptionKeys = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.encryption;
  });
  var dispatch = (0,react_redux/* useDispatch */.wA)();
  var addContactDispatch = function addContactDispatch(contact) {
    return dispatch(addContact(contact));
  };
  var updateContactDispatch = function updateContactDispatch(contact) {
    return dispatch(updateContact(contact));
  };
  var addMessageToConversationDispatch = function addMessageToConversationDispatch(message) {
    return dispatch((0,podsSlice/* addMessage */.tj)(message));
  };
  var createNewPodDispatch = function createNewPodDispatch(pod) {
    return dispatch((0,podsSlice/* createNewPod */.O)(pod));
  };
  var addEncryptionKeysDispatch = function addEncryptionKeysDispatch(keys) {
    return dispatch(addEncryptionKeys(keys));
  };
  var updateEncryptionKeysDispatch = function updateEncryptionKeysDispatch(keys) {
    return dispatch(updateEncryptionKeys(keys));
  };
  var addUserToPodDispatch = function addUserToPodDispatch(podId, userId) {
    return dispatch((0,podsSlice/* addUserToPod */.zv)({
      podId: podId,
      userId: userId
    }));
  };
  var updatePodUnreadCountDispatch = function updatePodUnreadCountDispatch(podId, unreadCount) {
    return dispatch((0,podsSlice/* updatePodUnreadCount */.ZH)({
      podId: podId,
      unreadCount: unreadCount
    }));
  };
  var setShouldHangupDispatch = function setShouldHangupDispatch(podId, shouldHangup) {
    return dispatch((0,podsSlice/* setShouldHangup */.d6)({
      podId: podId,
      shouldHangup: shouldHangup
    }));
  };
  var setPeerIsTypingDispatch = function setPeerIsTypingDispatch(podId, peerDisplayName, isTyping) {
    return dispatch((0,podsSlice/* setPeerIsTyping */.QT)({
      podId: podId,
      peerDisplayName: peerDisplayName,
      isTyping: isTyping
    }));
  };
  var setEphemeralStoreDispatch = function setEphemeralStoreDispatch(podId, ephemeralStorage) {
    return dispatch((0,podsSlice/* setEphemeralStorage */.dN)({
      podId: podId,
      ephemeralStorage: ephemeralStorage
    }));
  };
  var addStorageItemDispatch = function addStorageItemDispatch(podId, item) {
    return dispatch((0,storageSlice/* addStorageItem */.O7)({
      podId: podId,
      item: item
    }));
  };
  var sendNotification = (0,notificationManager/* useNotification */.hN)();
  var appiSchema = appi_appiSchema({
    addContactDispatch: addContactDispatch,
    updateContactDispatch: updateContactDispatch,
    createNewPodDispatch: createNewPodDispatch,
    addUserToPodDispatch: addUserToPodDispatch,
    setShouldHangupDispatch: setShouldHangupDispatch,
    updatePodUnreadCountDispatch: updatePodUnreadCountDispatch,
    addMessageToConversationDispatch: addMessageToConversationDispatch,
    addEncryptionKeysDispatch: addEncryptionKeysDispatch,
    updateEncryptionKeysDispatch: updateEncryptionKeysDispatch,
    setPeerIsTypingDispatch: setPeerIsTypingDispatch,
    setEphemeralStoreDispatch: setEphemeralStoreDispatch,
    addStorageItemDispatch: addStorageItemDispatch,
    addToBlockchainDispatch: addToBlockchainDispatch,
    encryptionKeys: encryptionKeys
  }, sendNotification);
  var onConnection = /*#__PURE__*/function () {
    var _ref2 = ReduxConnectedPeerProvider_asyncToGenerator( /*#__PURE__*/ReduxConnectedPeerProvider_regeneratorRuntime().mark(function _callee2(connection, sendMessage, managedState, activeConnections) {
      var contactDetails, _encryptionKeys$conta, _encryptionKeys$conta2, publicKey, privateKey, randomHash, encryptedRandomHash, response, _peerPods$pods, message, peerPods, myUserDetails, connectingMessage, userDetails, id, storedContact, _encryptionKeys$store, _publicKey, _randomHash, _encryptedRandomHash, _response, connectedMessage, _peerPods, _pods, _yield$generateKeyPai, _publicKey2, _privateKey, serializedPublicKey, serializedPrivateKey, _response2, _connectedMessage, _peerPods2;
      return ReduxConnectedPeerProvider_regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (false) {}
            contactDetails = managedState.contacts.find(function (contact) {
              return contact.connectionId === connection.peer;
            });
            if (!contactDetails) {
              _context2.next = 38;
              break;
            }
            publicKey = (_encryptionKeys$conta = encryptionKeys[contactDetails.id]) === null || _encryptionKeys$conta === void 0 ? void 0 : _encryptionKeys$conta.remotePublicKey;
            privateKey = (_encryptionKeys$conta2 = encryptionKeys[contactDetails.id]) === null || _encryptionKeys$conta2 === void 0 ? void 0 : _encryptionKeys$conta2.privateKey;
            randomHash = randomString();
            _context2.t0 = Encryption/* encrypt */.w;
            _context2.t1 = randomHash;
            _context2.next = 10;
            return (0,Encryption/* deserializePublicKey */.QT)(publicKey);
          case 10:
            _context2.t2 = _context2.sent;
            _context2.next = 13;
            return (0, _context2.t0)(_context2.t1, _context2.t2);
          case 13:
            encryptedRandomHash = _context2.sent;
            _context2.next = 16;
            return sendMessage(connection.peer, {
              type: "validateIdentity",
              payload: encryptedRandomHash
            }, connection);
          case 16:
            response = _context2.sent;
            _context2.t3 = randomHash;
            _context2.t4 = Encryption/* decrypt */.Yc;
            _context2.t5 = response.data;
            _context2.next = 22;
            return (0,Encryption/* deserializePrivateKey */.eB)(privateKey);
          case 22:
            _context2.t6 = _context2.sent;
            _context2.next = 25;
            return (0, _context2.t4)(_context2.t5, _context2.t6);
          case 25:
            _context2.t7 = _context2.sent;
            if (!(_context2.t3 === _context2.t7)) {
              _context2.next = 35;
              break;
            }
            message = "\u2705 ".concat(contactDetails.displayName, " connected");
            sendNotification(message, {
              variant: "success"
            });
            _context2.next = 31;
            return sendMessage(connection.peer, {
              type: "syncPodBlockchains"
            }, connection);
          case 31:
            peerPods = _context2.sent;
            peerPods === null || peerPods === void 0 || (_peerPods$pods = peerPods.pods) === null || _peerPods$pods === void 0 || _peerPods$pods.filter(function (ppod) {
              return !managedState.pods.find(function (pod) {
                return pod.id === ppod.id;
              });
            }).forEach( /*#__PURE__*/function () {
              var _ref3 = ReduxConnectedPeerProvider_asyncToGenerator( /*#__PURE__*/ReduxConnectedPeerProvider_regeneratorRuntime().mark(function _callee(ppod) {
                var id, name, members, unreadCount, shouldHangup, peerIsTyping, blockchain, storage, newPod;
                return ReduxConnectedPeerProvider_regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      id = ppod.id, name = ppod.name, members = ppod.members, unreadCount = ppod.unreadCount, shouldHangup = ppod.shouldHangup, peerIsTyping = ppod.peerIsTyping, blockchain = ppod.blockchain, storage = ppod.storage;
                      newPod = {
                        id: id,
                        pendingBlocks: blockchain.chain,
                        pendingStorage: blockchain.storage
                      };
                      createNewPodDispatch(newPod);
                    case 3:
                    case "end":
                      return _context.stop();
                  }
                }, _callee);
              }));
              return function (_x5) {
                return _ref3.apply(this, arguments);
              };
            }());
            _context2.next = 36;
            break;
          case 35:
            connection.close();
          case 36:
            _context2.next = 97;
            break;
          case 38:
            if (contactDetails) {
              _context2.next = 97;
              break;
            }
            myUserDetails = {
              connectionId: managedState.userProfile.connectionId,
              id: managedState.userProfile.id,
              displayName: managedState.userProfile.displayName,
              avatar: managedState.userProfile.avatar
            };
            connectingMessage = "\u231B Connecting to peer";
            sendNotification(connectingMessage, {
              variant: "info"
            });
            _context2.next = 44;
            return sendMessage(connection.peer, {
              type: "requestUserDetails",
              payload: myUserDetails
            }, connection);
          case 44:
            userDetails = _context2.sent;
            if (!userDetails) {
              _context2.next = 97;
              break;
            }
            id = userDetails.id;
            storedContact = managedState.contacts.find(function (contact) {
              return contact.id === id;
            });
            if (!storedContact) {
              _context2.next = 75;
              break;
            }
            _publicKey = (_encryptionKeys$store = encryptionKeys[storedContact.connectionId]) === null || _encryptionKeys$store === void 0 ? void 0 : _encryptionKeys$store.publicKey;
            _randomHash = randomString();
            _context2.t8 = Encryption/* encrypt */.w;
            _context2.t9 = _randomHash;
            _context2.next = 55;
            return (0,Encryption/* deserializePublicKey */.QT)(_publicKey);
          case 55:
            _context2.t10 = _context2.sent;
            _context2.next = 58;
            return (0, _context2.t8)(_context2.t9, _context2.t10);
          case 58:
            _encryptedRandomHash = _context2.sent;
            _context2.next = 61;
            return sendMessage(connection.peer, {
              type: "validateIdentity",
              payload: _encryptedRandomHash
            }, connection);
          case 61:
            _response = _context2.sent;
            if (!(_response.data === _randomHash)) {
              _context2.next = 72;
              break;
            }
            updateContactDispatch(userDetails);
            connectedMessage = "\u2705 ".concat(userDetails.displayName, " connection ID updated");
            sendNotification(connectedMessage, {
              variant: "success"
            });
            _context2.next = 68;
            return sendMessage(connection.peer, {
              type: "syncPodBlockchains"
            }, connection);
          case 68:
            _peerPods = _context2.sent;
            _pods = _peerPods.pods.map(function (pod) {
              var _pod$blockchain$chain, _pod$blockchain, _pod$blockchain$stora, _pod$blockchain2, _blockchainInstance$c;
              var blockchainInstance = new Blockchain/* default */.A({
                compiler: podChain/* compiler */.cx,
                chain: (_pod$blockchain$chain = (_pod$blockchain = pod.blockchain) === null || _pod$blockchain === void 0 ? void 0 : _pod$blockchain.chain) !== null && _pod$blockchain$chain !== void 0 ? _pod$blockchain$chain : [],
                storage: (_pod$blockchain$stora = (_pod$blockchain2 = pod.blockchain) === null || _pod$blockchain2 === void 0 ? void 0 : _pod$blockchain2.storage) !== null && _pod$blockchain$stora !== void 0 ? _pod$blockchain$stora : {}
              });
              var compiledBlockchain = blockchainInstance === null || blockchainInstance === void 0 || (_blockchainInstance$c = blockchainInstance.compile) === null || _blockchainInstance$c === void 0 ? void 0 : _blockchainInstance$c.call(blockchainInstance);
              return compiledBlockchain;
            });
            _context2.next = 73;
            break;
          case 72:
            connection.close();
          case 73:
            _context2.next = 97;
            break;
          case 75:
            addContactDispatch(ReduxConnectedPeerProvider_objectSpread({
              connectionId: connection.peer
            }, userDetails));
            _context2.next = 78;
            return (0,Encryption/* generateKeyPair */.TZ)();
          case 78:
            _yield$generateKeyPai = _context2.sent;
            _publicKey2 = _yield$generateKeyPai.publicKey;
            _privateKey = _yield$generateKeyPai.privateKey;
            _context2.next = 83;
            return window.crypto.subtle.exportKey("jwk", _publicKey2);
          case 83:
            serializedPublicKey = _context2.sent;
            _context2.next = 86;
            return window.crypto.subtle.exportKey("jwk", _privateKey);
          case 86:
            serializedPrivateKey = _context2.sent;
            _context2.next = 89;
            return sendMessage(connection.peer, {
              type: "createEncryption",
              payload: {
                publicKey: serializedPublicKey
              }
            }, connection);
          case 89:
            _response2 = _context2.sent;
            if (!_response2) {
              _context2.next = 97;
              break;
            }
            addEncryptionKeysDispatch({
              userId: id,
              publicKey: serializedPublicKey,
              privateKey: serializedPrivateKey,
              remotePublicKey: _response2.publicKey,
              symmetricKey: _response2.symmetricKey,
              established: true
            });
            _connectedMessage = "\u2705 ".concat(userDetails.displayName, " added to contacts");
            sendNotification(_connectedMessage, {
              variant: "success"
            });
            _context2.next = 96;
            return sendMessage(connection.peer, {
              type: "syncPodBlockchains"
            }, connection);
          case 96:
            _peerPods2 = _context2.sent;
          case 97:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function onConnection(_x, _x2, _x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
  var managedState = (0,index_js_.useMemo)(function () {
    return {
      userProfile: userProfile,
      contacts: contacts,
      pods: pods
    };
  }, [userProfile, contacts, pods]);
  return /*#__PURE__*/index_js_default().createElement(PeerProvider/* default */.A, {
    appiSchema: appiSchema,
    managedState: ReduxConnectedPeerProvider_objectSpread({}, managedState),
    onConnection: onConnection
  }, children);
});
;// CONCATENATED MODULE: ./src/components/cryptography/ReduxConnectedCryptography.js





var ReduxConnectedCryptography = function ReduxConnectedCryptography(_ref) {
  var children = _ref.children;
  var userProfileBlockchain = (0,react_redux/* useSelector */.d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,Blockchain/* useBlockchain */.o)({
      compiler: profileChain/* compiler */.c,
      blockchain: userProfileBlockchain
    }),
    userProfile = _useBlockchain.compiledBlockchain;
  return /*#__PURE__*/index_js_default().createElement(Cryptography.CryptographyProvider, {
    entropy: userProfile.encryptionSignature + (0,Cryptography.randomString)()
  }, children);
};
/* harmony default export */ const cryptography_ReduxConnectedCryptography = (ReduxConnectedCryptography);
// EXTERNAL MODULE: ./node_modules/@mui/material/styles/createTheme.js + 12 modules
var createTheme = __webpack_require__(29429);
// EXTERNAL MODULE: ./node_modules/@mui/material/styles/ThemeProvider.js + 2 modules
var ThemeProvider = __webpack_require__(80201);
// EXTERNAL MODULE: ./node_modules/@mui/styles/jssPreset/jssPreset.js + 15 modules
var jssPreset = __webpack_require__(83642);
// EXTERNAL MODULE: ./node_modules/@mui/styles/StylesProvider/StylesProvider.js + 1 modules
var StylesProvider = __webpack_require__(10117);
;// CONCATENATED MODULE: ./src/components/atomic/atom/errorBoundary/ErrorBoundary.js
function ErrorBoundary_slicedToArray(arr, i) { return ErrorBoundary_arrayWithHoles(arr) || ErrorBoundary_iterableToArrayLimit(arr, i) || ErrorBoundary_unsupportedIterableToArray(arr, i) || ErrorBoundary_nonIterableRest(); }
function ErrorBoundary_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function ErrorBoundary_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ErrorBoundary_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ErrorBoundary_arrayLikeToArray(o, minLen); }
function ErrorBoundary_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ErrorBoundary_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function ErrorBoundary_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }




function ErrorBoundary(props) {
  var dispatch = (0,react_redux/* useDispatch */.wA)();
  var _useState = (0,index_js_.useState)(false),
    _useState2 = ErrorBoundary_slicedToArray(_useState, 2),
    hasError = _useState2[0],
    setHasError = _useState2[1];
  var _useState3 = (0,index_js_.useState)(null),
    _useState4 = ErrorBoundary_slicedToArray(_useState3, 2),
    error = _useState4[0],
    setError = _useState4[1];
  var logoutDispatch = function logoutDispatch() {
    return dispatch((0,userProfileSlice/* logout */.ri)());
  };
  var handleLogout = function handleLogout() {
    logoutDispatch();
  };
  try {
    if (hasError) {
      // You can customize the error message and UI here
      return /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement("h1", null, "Something went wrong!"), /*#__PURE__*/index_js_default().createElement("p", null, error.toString()), /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
        type: "button",
        fullWidth: true,
        variant: "contained",
        onClick: handleLogout
      }, "reset data"));
    }

    // If no error occurred, render the children
    return props.children;
  } catch (error) {
    // Handle the error and set state accordingly
    console.error(error);
    setHasError(true);
    setError(error);
    return null;
  }
}
/* harmony default export */ const errorBoundary_ErrorBoundary = (ErrorBoundary);
// EXTERNAL MODULE: ./src/components/translations/i18n.js
var i18n = __webpack_require__(63141);
// EXTERNAL MODULE: ./node_modules/jss/dist/jss.esm.js
var jss_esm = __webpack_require__(73317);
// EXTERNAL MODULE: ./node_modules/jss-rtl/lib/main.js
var main = __webpack_require__(27571);
;// CONCATENATED MODULE: ./src/App.tsx
function App_slicedToArray(arr, i) { return App_arrayWithHoles(arr) || App_iterableToArrayLimit(arr, i) || App_unsupportedIterableToArray(arr, i) || App_nonIterableRest(); }
function App_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function App_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function App_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function App_toConsumableArray(arr) { return App_arrayWithoutHoles(arr) || App_iterableToArray(arr) || App_unsupportedIterableToArray(arr) || App_nonIterableSpread(); }
function App_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function App_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return App_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return App_arrayLikeToArray(o, minLen); }
function App_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function App_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return App_arrayLikeToArray(arr); }
function App_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }


// import './components/utils/bigIntPolyfill';
// import App from './components/pages/app/App';
// import Login from './components/pages/login/Login';
// import reportWebVitals from './reportWebVitals';

// import styles from "@chatscope/chat-ui-kit-styles/dist/default/styles.min.css";



















// import { PaletteMode } from "@mui/material";

var jss = (0,jss_esm/* create */.vt)({
  plugins: [].concat(App_toConsumableArray((0,jssPreset/* default */.A)().plugins), [(0,main/* default */.A)()])
});

// import * as Sentry from "@sentry/react";

// Sentry.init({
//   dsn: "https://2f7caacbd22c4f52a83ab1bcf0b5e3b2@o237943.ingest.sentry.io/4505097365159936",
//   integrations: [new Sentry.BrowserTracing(), new Sentry.Replay()],
//   // Performance Monitoring
//   tracesSampleRate: 1.0, // Capture 100% of the transactions, reduce in production!
//   // Session Replay
//   replaysSessionSampleRate: 0.1, // This sets the sample rate at 10%. You may want to change it to 100% while in development and then sample at a lower rate in production.
//   replaysOnErrorSampleRate: 1.0, // If you're not already sampling the entire session, change the sample rate to 100% when sampling sessions where errors occur.
// });

// i18n.then (() => console.log('translations loaded'))

// logToNLevelAnalytics();

var ColorModeContext = /*#__PURE__*/index_js_default().createContext({
  toggleColorMode: function toggleColorMode() {}
});
var App = function App() {
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    i18n = _useTranslation.i18n;

  // const theme = createTheme({
  //   palette: {
  //     // mode: 'dark',
  //   },
  // });

  // useEffect(() => () => {
  //   function requestFullScreen(element) {
  //     // Supports most browsers and their versions.
  //     var requestMethod = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen;

  //     if (requestMethod) { // Native full screen.
  //         requestMethod.call(element);
  //     } else if (typeof window.ActiveXObject !== "undefined") { // Older IE.
  //         var wscript = new window.ActiveXObject("WScript.Shell");
  //         if (wscript !== null) {
  //             wscript.SendKeys("{F11}");
  //         }
  //     }
  // }

  // var elem = document.body; // Make the body go full screen.
  // requestFullScreen(elem);
  // }, []);

  var userPreferredTheme = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  var _React$useState = index_js_default().useState(userPreferredTheme),
    _React$useState2 = App_slicedToArray(_React$useState, 2),
    mode = _React$useState2[0],
    setMode = _React$useState2[1];
  var colorMode = index_js_default().useMemo(function () {
    return {
      toggleColorMode: function toggleColorMode() {
        setMode(function (prevMode) {
          return prevMode === "light" ? "dark" : "light";
        });
      }
    };
  }, []);

  // const isRightToLeft = () => {
  //   return false; // i18n.dir() === 'rtl';
  // }

  // const [isRTL, setIsRTL] = React.useState(isRightToLeft());

  // useEffect(
  //   () => {
  //     const newTextDirection = isRightToLeft() ? 'rtl' : 'ltr';
  //     if (newTextDirection === 'ltr') {
  //       document.dir = 'ltr';
  //     } else {
  //       document.dir = 'rtl';
  //     }

  //     setIsRTL(newTextDirection);
  //   },
  //   [i18n.dir()],
  // ); // Only re-run the effect if props.language changes

  document.body.dir = i18n.dir();
  var theme = index_js_default().useMemo(function () {
    return (0,createTheme/* default */.A)({
      palette: {
        mode: mode
      }
      // direction: isRTL ? 'rtl' : 'ltr',
      // typography: {
      //   fontFamily: isRightToLeft() ? 'Arial' : 'Roboto',
      // },
    });
  }, [mode]);

  // return <div>hello world</div>;

  return /*#__PURE__*/index_js_default().createElement((index_js_default()).StrictMode, null, /*#__PURE__*/index_js_default().createElement(notificationManager/* SnackbarProvider */.n, null, /*#__PURE__*/index_js_default().createElement(Redux, null, /*#__PURE__*/index_js_default().createElement(cryptography_ReduxConnectedCryptography, null, /*#__PURE__*/index_js_default().createElement(es/* I18nextProvider */.xC, {
    i18n: i18n
  }, /*#__PURE__*/index_js_default().createElement(ReduxConnectedPeerProvider, null, /*#__PURE__*/index_js_default().createElement(ColorModeContext.Provider, {
    value: colorMode
  }, /*#__PURE__*/index_js_default().createElement(ThemeProvider/* default */.A, {
    theme: theme
  }, /*#__PURE__*/index_js_default().createElement(StylesProvider/* default */.Ay, {
    jss: jss
  }, /*#__PURE__*/index_js_default().createElement(errorBoundary_ErrorBoundary, null, /*#__PURE__*/index_js_default().createElement(Router, null)))))))))));
};
/* harmony default export */ const src_App = (App);

/***/ }),

/***/ 94097:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   App: () => (/* binding */ App)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50318);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_dom_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5338);
/* harmony import */ var _App_tsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(85756);
/* harmony import */ var _lcdp_offline_plugin_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(59918);




_lcdp_offline_plugin_runtime__WEBPACK_IMPORTED_MODULE_3__/* .install */ .ai();
var App = function App() {
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_App_tsx__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, null));
};
var container = document.getElementById("app");
var root = (0,react_dom_client__WEBPACK_IMPORTED_MODULE_1__/* .createRoot */ .H)(container); // createRoot(container!) if you use TypeScript
root.render( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(App, null));

// if ("serviceWorker" in navigator) {
//   window.addEventListener("load", () => {
//     navigator.serviceWorker
//       .register("/service-worker.js")
//       .then((registration) => {
//         console.log("SW registered: ", registration);
//       })
//       .catch((registrationError) => {
//         console.log("SW registration failed: ", registrationError);
//       });
//   });
// }

/***/ }),

/***/ 74283:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ms: () => (/* binding */ Dropdown),
  _2: () => (/* binding */ DropdownMenuItem),
  Zn: () => (/* binding */ DropdownNestedMenuItem)
});

// EXTERNAL MODULE: consume shared module (default) react@^18.3.1 (singleton) (fallback: ./node_modules/react/index.js)
var index_js_ = __webpack_require__(50318);
// EXTERNAL MODULE: ./node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js + 2 modules
var emotion_styled_browser_esm = __webpack_require__(71479);
// EXTERNAL MODULE: ./node_modules/@mui/material/Menu/Menu.js + 5 modules
var Menu = __webpack_require__(19741);
// EXTERNAL MODULE: ./node_modules/@mui/material/MenuItem/MenuItem.js + 1 modules
var MenuItem = __webpack_require__(73896);
;// CONCATENATED MODULE: ./src/components/atomic/atom/dropdown/NestedMenuItem.js
var _excluded = ["parentMenuOpen", "label", "rightIcon", "leftIcon", "keepOpen", "children", "customTheme", "className", "tabIndex", "ContainerProps", "rightAnchored"],
  _excluded2 = ["ref"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }





var NestedMenuItem = /*#__PURE__*/index_js_.forwardRef(function (props, ref) {
  var parentMenuOpen = props.parentMenuOpen,
    label = props.label,
    rightIcon = props.rightIcon,
    leftIcon = props.leftIcon,
    keepOpen = props.keepOpen,
    children = props.children,
    customTheme = props.customTheme,
    className = props.className,
    tabIndexProp = props.tabIndex,
    _props$ContainerProps = props.ContainerProps,
    ContainerPropsProp = _props$ContainerProps === void 0 ? {} : _props$ContainerProps,
    rightAnchored = props.rightAnchored,
    MenuItemProps = _objectWithoutProperties(props, _excluded);
  var containerRefProp = ContainerPropsProp.ref,
    ContainerProps = _objectWithoutProperties(ContainerPropsProp, _excluded2);
  var menuItemRef = index_js_.useRef(null);
  index_js_.useImperativeHandle(ref, function () {
    return menuItemRef.current;
  });
  var containerRef = index_js_.useRef(null);
  index_js_.useImperativeHandle(containerRefProp, function () {
    return containerRef.current;
  });
  var menuContainerRef = index_js_.useRef(null);
  var _React$useState = index_js_.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    isSubMenuOpen = _React$useState2[0],
    setIsSubMenuOpen = _React$useState2[1];
  var handleMouseEnter = function handleMouseEnter(event) {
    setIsSubMenuOpen(true);
    if (ContainerProps !== null && ContainerProps !== void 0 && ContainerProps.onMouseEnter) {
      ContainerProps.onMouseEnter(event);
    }
  };
  var handleMouseLeave = function handleMouseLeave(event) {
    setIsSubMenuOpen(false);
    if (ContainerProps !== null && ContainerProps !== void 0 && ContainerProps.onMouseLeave) {
      ContainerProps.onMouseLeave(event);
    }
  };
  var isSubmenuFocused = function isSubmenuFocused() {
    var _containerRef$current, _menuContainerRef$cur, _menuContainerRef$cur2;
    var active = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 || (_containerRef$current = _containerRef$current.ownerDocument) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.activeElement;
    var _iterator = _createForOfIteratorHelper((_menuContainerRef$cur = (_menuContainerRef$cur2 = menuContainerRef.current) === null || _menuContainerRef$cur2 === void 0 ? void 0 : _menuContainerRef$cur2.children) !== null && _menuContainerRef$cur !== void 0 ? _menuContainerRef$cur : []),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var child = _step.value;
        if (child === active) {
          return true;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return false;
  };
  var handleFocus = function handleFocus(event) {
    if (event.target === containerRef.current) {
      setIsSubMenuOpen(true);
    }
    if (ContainerProps !== null && ContainerProps !== void 0 && ContainerProps.onFocus) {
      ContainerProps.onFocus(event);
    }
  };
  var handleKeyDown = function handleKeyDown(event) {
    var _containerRef$current2;
    if (event.key === "Escape") {
      return;
    }
    if (isSubmenuFocused()) {
      event.stopPropagation();
    }
    var active = (_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 || (_containerRef$current2 = _containerRef$current2.ownerDocument) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.activeElement;
    if (event.key === "ArrowLeft" && isSubmenuFocused()) {
      var _containerRef$current3;
      (_containerRef$current3 = containerRef.current) === null || _containerRef$current3 === void 0 || _containerRef$current3.focus();
    }
    if (event.key === "ArrowRight" && event.target === containerRef.current && event.target === active) {
      var _menuContainerRef$cur3;
      var firstChild = (_menuContainerRef$cur3 = menuContainerRef.current) === null || _menuContainerRef$cur3 === void 0 ? void 0 : _menuContainerRef$cur3.children[0];
      firstChild === null || firstChild === void 0 || firstChild.focus();
    }
  };
  var open = isSubMenuOpen && parentMenuOpen;
  var tabIndex;
  if (!props.disabled) {
    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
  }
  return /*#__PURE__*/index_js_.createElement("div", _extends({}, ContainerProps, {
    ref: containerRef,
    onFocus: handleFocus,
    tabIndex: tabIndex,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onKeyDown: handleKeyDown
  }), /*#__PURE__*/index_js_.createElement(MenuItem/* default */.A, _extends({}, MenuItemProps, {
    "data-open": !!open || undefined,
    className: className,
    ref: menuItemRef,
    keepOpen: keepOpen
  }), leftIcon, label, /*#__PURE__*/index_js_.createElement("div", {
    style: {
      flexGrow: 1
    }
  }), rightIcon), /*#__PURE__*/index_js_.createElement(Menu/* default */.A, {
    hideBackdrop: true,
    style: {
      pointerEvents: "none"
    },
    anchorEl: menuItemRef.current,
    anchorOrigin: {
      vertical: "top",
      horizontal: rightAnchored ? "left" : "right"
    },
    transformOrigin: {
      vertical: "top",
      horizontal: rightAnchored ? "right" : "left"
    },
    css: customTheme,
    open: !!open,
    autoFocus: false,
    disableAutoFocus: true,
    disableEnforceFocus: true,
    disablePortal: true,
    onClose: function onClose() {
      setIsSubMenuOpen(false);
    }
  }, /*#__PURE__*/index_js_.createElement("div", {
    ref: menuContainerRef,
    style: {
      pointerEvents: "auto"
    }
  }, children)));
});
/* harmony default export */ const dropdown_NestedMenuItem = (NestedMenuItem);
;// CONCATENATED MODULE: ./src/components/atomic/atom/dropdown/Dropdown.js
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _templateObject, _templateObject2;
var Dropdown_excluded = ["keepOpen"];
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Dropdown_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = Dropdown_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function Dropdown_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }
function Dropdown_slicedToArray(arr, i) { return Dropdown_arrayWithHoles(arr) || Dropdown_iterableToArrayLimit(arr, i) || Dropdown_unsupportedIterableToArray(arr, i) || Dropdown_nonIterableRest(); }
function Dropdown_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Dropdown_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Dropdown_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Dropdown_arrayLikeToArray(o, minLen); }
function Dropdown_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Dropdown_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Dropdown_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }





var Dropdown = /*#__PURE__*/index_js_.forwardRef(function (_ref, ref) {
  var trigger = _ref.trigger,
    menu = _ref.menu,
    keepOpenGlobal = _ref.keepOpen,
    controlledIsOpen = _ref.isOpen,
    onControlledOpen = _ref.onOpen,
    minWidth = _ref.minWidth,
    floatLeft = _ref.floatLeft;
  var _React$useState = index_js_.useState(null),
    _React$useState2 = Dropdown_slicedToArray(_React$useState, 2),
    isInternalOpen = _React$useState2[0],
    setInternalOpen = _React$useState2[1];
  var isOpen = controlledIsOpen || isInternalOpen;
  var anchorRef = index_js_.useRef(null);
  if (ref) {
    anchorRef = ref;
  }
  var handleOpen = function handleOpen(event) {
    event.stopPropagation();
    if (menu.length) {
      onControlledOpen ? onControlledOpen(event.currentTarget) : setInternalOpen(event.currentTarget);
    }
  };
  var handleClose = function handleClose(event) {
    event.stopPropagation();
    if (anchorRef.current && anchorRef.current.contains(event.target)) {
      return;
    }
    handleForceClose();
  };
  var handleForceClose = function handleForceClose() {
    onControlledOpen ? onControlledOpen(null) : setInternalOpen(null);
  };
  var renderMenu = function renderMenu(menuItem, index) {
    if (!menuItem) return null;
    var _menuItem$props = menuItem.props,
      keepOpenLocal = _menuItem$props.keepOpen,
      props = Dropdown_objectWithoutProperties(_menuItem$props, Dropdown_excluded);
    var extraProps = {};
    if (props.menu) {
      extraProps = {
        parentMenuOpen: isOpen
      };
    }
    return /*#__PURE__*/index_js_.createElement(menuItem.type, _objectSpread(_objectSpread(_objectSpread({}, props), {}, {
      key: index
    }, extraProps), {}, {
      onClick: function onClick(event) {
        event.stopPropagation();
        if (!keepOpenGlobal && !keepOpenLocal) {
          handleClose(event);
        }
        if (menuItem.props.onClick) {
          menuItem.props.onClick(event);
        }
      },
      children: props.menu ? index_js_.Children.map(props.menu, renderMenu) : props.children
    }));
  };
  return /*#__PURE__*/index_js_.createElement(index_js_.Fragment, null, /*#__PURE__*/index_js_.cloneElement(trigger, {
    onClick: isOpen ? handleForceClose : handleOpen,
    ref: anchorRef
  }), /*#__PURE__*/index_js_.createElement(Menu/* default */.A, {
    PaperProps: {
      sx: {
        minWidth: minWidth !== null && minWidth !== void 0 ? minWidth : 0
      }
    },
    anchorEl: isOpen,
    open: !!isOpen,
    disablePortal: true,
    onClose: handleClose,
    anchorOrigin: floatLeft ? {
      vertical: "top",
      horizontal: "left" // Set the anchor origin to left
    } : {},
    transformOrigin: floatLeft ? {
      vertical: "top",
      horizontal: "right" // Set the transform origin to right
    } : {}
  }, index_js_.Children.map(menu, renderMenu)));
});
var DropdownMenuItem = (0,emotion_styled_browser_esm/* default */.A)(MenuItem/* default */.A)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between !important;\n\n  & > svg {\n    margin-left: 32px;\n  }\n"])));
var DropdownNestedMenuItem = (0,emotion_styled_browser_esm/* default */.A)(dropdown_NestedMenuItem)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between !important;\n\n  & > svg {\n    margin-left: 32px;\n  }\n"])));

/***/ }),

/***/ 69178:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ Message)
});

// EXTERNAL MODULE: consume shared module (default) react@^18.3.1 (singleton) (fallback: ./node_modules/react/index.js)
var index_js_ = __webpack_require__(50318);
var index_js_default = /*#__PURE__*/__webpack_require__.n(index_js_);
// EXTERNAL MODULE: ./node_modules/@mui/styles/makeStyles/makeStyles.js + 6 modules
var makeStyles = __webpack_require__(80284);
// EXTERNAL MODULE: ./node_modules/@mui/material/styles/styled.js
var styled = __webpack_require__(11848);
// EXTERNAL MODULE: ./node_modules/@mui/material/Typography/Typography.js + 1 modules
var Typography = __webpack_require__(14073);
// EXTERNAL MODULE: ./node_modules/@mui/material/Card/Card.js + 1 modules
var Card = __webpack_require__(14977);
// EXTERNAL MODULE: ./node_modules/@mui/material/CardContent/CardContent.js + 1 modules
var CardContent = __webpack_require__(37636);
// EXTERNAL MODULE: ./node_modules/@mui/material/CardHeader/CardHeader.js + 1 modules
var CardHeader = __webpack_require__(53650);
// EXTERNAL MODULE: ./node_modules/@mui/material/Avatar/Avatar.js + 2 modules
var Avatar = __webpack_require__(81385);
// EXTERNAL MODULE: ./node_modules/@mui/material/Badge/Badge.js + 3 modules
var Badge = __webpack_require__(93979);
// EXTERNAL MODULE: ./node_modules/react-redux/dist/react-redux.mjs
var react_redux = __webpack_require__(71468);
// EXTERNAL MODULE: ./node_modules/react-router/dist/index.js
var dist = __webpack_require__(47767);
// EXTERNAL MODULE: ./node_modules/@mui/material/Button/Button.js + 3 modules
var Button = __webpack_require__(86990);
;// CONCATENATED MODULE: ./src/components/atomic/atom/message/Attachment.js
// use selector to get attachment data by the sha. you can use the router podId to get the attachment by pod from the redux store.






// random image
/* harmony default export */ const Attachment = (function (_ref) {
  var sha = _ref.sha,
    data = _ref.data;
  if (typeof sha !== "string") return null;
  var navigate = (0,dist/* useNavigate */.Zp)();
  var _useParams = (0,dist/* useParams */.g)(),
    podId = _useParams.podId;
  var attachment = (0,react_redux/* useSelector */.d4)(function (state) {
    var _state$storage$podId;
    return (_state$storage$podId = state.storage[podId]) === null || _state$storage$podId === void 0 ? void 0 : _state$storage$podId.find(function (item) {
      return (item === null || item === void 0 ? void 0 : item.sha) === sha;
    });
  });
  return (!!data || attachment) && /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    onClick: function onClick() {
      return navigate("/pod/".concat(podId, "/file/").concat(attachment === null || attachment === void 0 ? void 0 : attachment.sha));
    }
  }, /*#__PURE__*/index_js_default().createElement("img", {
    style: {
      maxHeight: 300,
      maxWidth: 300
    },
    src: data !== null && data !== void 0 ? data : attachment === null || attachment === void 0 ? void 0 : attachment.data,
    alt: "random"
  }));
});
// EXTERNAL MODULE: ./src/components/atomic/molecules/conversation/Conversation.js + 1 modules
var Conversation = __webpack_require__(61545);
// EXTERNAL MODULE: ./node_modules/react-leaflet/lib/MapContainer.js
var MapContainer = __webpack_require__(66162);
// EXTERNAL MODULE: ./node_modules/react-leaflet/lib/TileLayer.js + 1 modules
var TileLayer = __webpack_require__(81344);
// EXTERNAL MODULE: ./node_modules/react-leaflet/lib/Marker.js
var Marker = __webpack_require__(14489);
// EXTERNAL MODULE: ./node_modules/react-leaflet/lib/Popup.js
var Popup = __webpack_require__(13489);
// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet.css
var leaflet = __webpack_require__(92274);
// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js
var leaflet_src = __webpack_require__(53481);
var leaflet_src_default = /*#__PURE__*/__webpack_require__.n(leaflet_src);
// EXTERNAL MODULE: ./node_modules/leaflet/dist/images/marker-icon.png
var marker_icon = __webpack_require__(19927);
;// CONCATENATED MODULE: ./src/components/atomic/atom/message/Location.js


// maps styles and market icon



var MapComponent = function MapComponent(_ref) {
  var _initialPosition$lati, _initialPosition$long;
  var initialPosition = _ref.position;
  var position = [(_initialPosition$lati = initialPosition === null || initialPosition === void 0 ? void 0 : initialPosition.latitude) !== null && _initialPosition$lati !== void 0 ? _initialPosition$lati : 0, (_initialPosition$long = initialPosition === null || initialPosition === void 0 ? void 0 : initialPosition.longitude) !== null && _initialPosition$long !== void 0 ? _initialPosition$long : 0];
  return /*#__PURE__*/index_js_default().createElement(MapContainer/* MapContainer */.W, {
    center: position || initialPosition,
    zoom: 13,
    scrollWheelZoom: false,
    style: {
      height: "300px",
      width: "300px"
    }
  }, /*#__PURE__*/index_js_default().createElement(TileLayer/* TileLayer */.e, {
    url: "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
    attribution: "\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors"
  }), position && /*#__PURE__*/index_js_default().createElement(Marker/* Marker */.p, {
    position: position,
    icon: leaflet_src_default().icon({
      iconUrl: marker_icon,
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    })
  }, /*#__PURE__*/index_js_default().createElement(Popup/* Popup */.z, null, "You are here")));
};
/* harmony default export */ const Location = (MapComponent);
;// CONCATENATED MODULE: ./src/components/atomic/atom/message/Payload.js
// use selector to get attachment data by the sha. you can use the router podId to get the attachment by pod from the redux store.









// random image
/* harmony default export */ const Payload = (function (_ref) {
  var _payload$image, _payload$audio, _payload$audio2, _payload$file, _payload$reply, _payload$reply2, _payload$file2, _payload$image2, _payload$reply3, _payload$content;
  var payload = _ref.payload,
    attachmentSha = _ref.attachmentSha;
  // if (typeof payload !== 'string') return null;
  var navigate = (0,dist/* useNavigate */.Zp)();
  var _useParams = (0,dist/* useParams */.g)(),
    podId = _useParams.podId;
  // const attachment = useSelector(state => state.storage[podId]?.find(item => item?.sha === sha));
  // console.log({ attachment, podId, sha })
  // return (!!data || attachment) && (
  //     <Button onClick={() => navigate(`/pod/${podId}/file/${attachment?.sha}`)}>
  //         <img style={{ maxHeight: 300, maxWidth: 300 }} src={data ?? attachment?.data} alt="random"/>
  //     </Button>
  // );

  return /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, ((_payload$image = payload.image) === null || _payload$image === void 0 ? void 0 : _payload$image.data) && /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    onClick: function onClick() {
      return navigate("/pod/".concat(podId, "/file/").concat(attachmentSha));
    }
  }, /*#__PURE__*/index_js_default().createElement("img", {
    style: {
      maxHeight: 300,
      maxWidth: 300
    },
    src: payload.image.data,
    alt: "random"
  })), ((_payload$audio = payload.audio) === null || _payload$audio === void 0 ? void 0 : _payload$audio.data) && /*#__PURE__*/index_js_default().createElement("audio", {
    src: (_payload$audio2 = payload.audio) === null || _payload$audio2 === void 0 ? void 0 : _payload$audio2.data,
    controls: true,
    style: {
      width: "100%"
    }
  }), !!((_payload$file = payload.file) !== null && _payload$file !== void 0 && _payload$file.name) && /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    onClick: function onClick() {
      return navigate("/pod/".concat(podId, "/file/").concat(attachmentSha));
    }
  }, "".concat(payload.file.name)), !!payload.location.latitude && !((_payload$reply = payload.reply) !== null && _payload$reply !== void 0 && _payload$reply.id) && /*#__PURE__*/index_js_default().createElement(Location, {
    position: payload.location
  }), !!((_payload$reply2 = payload.reply) !== null && _payload$reply2 !== void 0 && _payload$reply2.id) && /*#__PURE__*/index_js_default().createElement(Button/* default */.A, {
    onClick: function onClick() {
      var element = document.getElementById(payload.reply.id);
      if (element) {
        // Scroll to the element
        element.scrollIntoView({
          behavior: "smooth"
        });
      }
    }
  }, "Go to replied message"), (!!((_payload$file2 = payload.file) !== null && _payload$file2 !== void 0 && _payload$file2.name) || !!((_payload$image2 = payload.image) !== null && _payload$image2 !== void 0 && _payload$image2.data) || !!((_payload$reply3 = payload.reply) !== null && _payload$reply3 !== void 0 && _payload$reply3.id)) && /*#__PURE__*/index_js_default().createElement("br", null), (_payload$content = payload.content) !== null && _payload$content !== void 0 ? _payload$content : "");
});
;// CONCATENATED MODULE: ./src/components/atomic/atom/message/Message.js
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }











var useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    sentMessage: _defineProperty({
      // backgroundColor: theme.palette.primary.light,
      backgroundColor: theme.palette.type === "dark" ? "#004D00 !important" : "#0080ff !important",
      color: theme.palette.mode === "dark" ? theme.palette.primary.contrastText : theme.palette.primary.main,
      // marginBottom: theme.spacing(2),
      width: "fit-content",
      alignSelf: "flex-end"
    }, "backgroundColor", "#e6ffe6"),
    messageContent: {
      padding: theme.spacing(2)
      // color: theme.palette.primary.contrastText,
    },
    messageHeader: {
      padding: theme.spacing(1)
      // color: theme.palette.primary.contrastText,
    },
    greenBackground: {
      backgroundColor: theme.palette.mode === "dark" ? "#004D00 !important" : "#e6ffe6 !important",
      textAlign: "left"
    },
    blueBackground: {
      backgroundColor: theme.palette.mode === "dark" ? "#00005A !important" : "#e6f7ff !important",
      textAlign: "left"
    }
    // lightGreen: {
    //     backgroundColor: '#e6ffe6 !important',
    //     textAlign: "left",
    // },
    // lightBlue: {
    //     backgroundColor: '#e6f7ff !important',
    //     textAlign: "left",
    // },
    // darkGreen: {
    //     backgroundColor: '#b3ffb3 !important',
    //     textAlign: "left",
    // },
    // darkBlue: {
    //     backgroundColor: '#b3e6ff !important',
    //     textAlign: "left",
    // },
    // veryDarkGreen: {
    //     backgroundColor: '#00b300 !important',
    //     textAlign: "left",
    // },
    // veryDarkBlue: {
    //     backgroundColor: '#0080ff !important',
    //     textAlign: "left",
    // },
  };
});
var StyledBadge = (0,styled/* default */.Ay)(Badge/* default */.A)(function (_ref) {
  var theme = _ref.theme;
  return {
    "& .MuiBadge-badge": {
      backgroundColor: "#44b700",
      color: "#44b700",
      boxShadow: "0 0 0 2px ".concat(theme.palette.background.paper),
      "&::after": {
        position: "absolute",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        borderRadius: "50%",
        animation: "ripple 1.2s infinite ease-in-out",
        border: "1px solid currentColor",
        content: '""'
      }
    },
    "@keyframes ripple": {
      "0%": {
        transform: "scale(.8)",
        opacity: 1
      },
      "100%": {
        transform: "scale(2.4)",
        opacity: 0
      }
    }
  };
});
var formatDate = function formatDate(timestamp) {
  var date = new Date(timestamp);
  var month = ("0" + (date.getMonth() + 1)).slice(-2); // months are zero indexed
  var day = ("0" + date.getDate()).slice(-2);
  var year = date.getFullYear();
  var hours = date.getHours();
  var minutes = ("0" + date.getMinutes()).slice(-2);
  var seconds = ("0" + date.getSeconds()).slice(-2);
  var ampm = hours >= 12 ? "PM" : "AM";

  // convert from 24-hour to 12-hour format
  hours = hours % 12;
  // the hour '0' should be '12'
  hours = hours ? hours : 12;
  var formattedTime = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds + " " + ampm;
  return formattedTime;
};
function Message(_ref2) {
  var message = _ref2.message,
    username = _ref2.username,
    timestamp = _ref2.timestamp,
    type = _ref2.type,
    avatar = _ref2.avatar,
    isOnline = _ref2.isOnline,
    attachment = _ref2.attachment,
    imageAttachment = _ref2.imageAttachment,
    payload = _ref2.payload,
    attachmentSha = _ref2.attachmentSha,
    id = _ref2.id,
    votes = _ref2.votes,
    style = _ref2.style;
  var classes = useStyles();
  var cardClass = type === "sent" ? classes.greenBackground : classes.blueBackground;
  var upvotes = votes ? votes.upvotes.length : 0;
  return /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
    anchorOrigin: {
      vertical: "top",
      horizontal: "right"
    },
    badgeContent: "\u2764\uFE0F ".concat(upvotes),
    invisible: upvotes > 0 ? false : true
  }, /*#__PURE__*/index_js_default().createElement(Card/* default */.A, {
    id: id,
    className: [classes.sentMessage, cardClass],
    style: style
  }, /*#__PURE__*/index_js_default().createElement(CardHeader/* default */.A, {
    className: classes.messageHeader,
    title: username,
    subheader: timestamp,
    avatar: /*#__PURE__*/index_js_default().createElement(StyledBadge, {
      overlap: "circular",
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "right"
      },
      variant: "dot",
      invisible: type === "sent" || !isOnline
    }, /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
      src: avatar,
      alt: username
    }, username ? username[0] : "-"))
  }), /*#__PURE__*/index_js_default().createElement(CardContent/* default */.A, {
    className: classes.messageContent
  }, !!imageAttachment && /*#__PURE__*/index_js_default().createElement(Attachment, {
    sha: imageAttachment.sha,
    data: imageAttachment.data
  }), payload && /*#__PURE__*/index_js_default().createElement(Payload, {
    payload: payload,
    attachmentSha: attachmentSha
  }), /*#__PURE__*/index_js_default().createElement(Typography/* default */.A, {
    variant: "body1"
  }, message))));
}

/***/ }),

/***/ 61545:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ Conversation),
  Y: () => (/* binding */ formatDate)
});

// EXTERNAL MODULE: consume shared module (default) react@^18.3.1 (singleton) (fallback: ./node_modules/react/index.js)
var index_js_ = __webpack_require__(50318);
var index_js_default = /*#__PURE__*/__webpack_require__.n(index_js_);
// EXTERNAL MODULE: ./node_modules/@mui/material/List/List.js + 1 modules
var List = __webpack_require__(49799);
// EXTERNAL MODULE: ./node_modules/@mui/material/ListItem/ListItem.js + 4 modules
var ListItem = __webpack_require__(12794);
// EXTERNAL MODULE: ./node_modules/@mui/styles/makeStyles/makeStyles.js + 6 modules
var makeStyles = __webpack_require__(80284);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/KeyboardDoubleArrowDown.js
var KeyboardDoubleArrowDown = __webpack_require__(82964);
// EXTERNAL MODULE: ./src/components/atomic/atom/message/Message.js + 3 modules
var Message = __webpack_require__(69178);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Delete.js
var Delete = __webpack_require__(67034);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Reply.js
var Reply = __webpack_require__(13669);
// EXTERNAL MODULE: ./node_modules/@mui/material/CircularProgress/CircularProgress.js + 1 modules
var CircularProgress = __webpack_require__(73357);
// EXTERNAL MODULE: ./node_modules/@mui/material/Box/Box.js + 2 modules
var Box = __webpack_require__(69067);
// EXTERNAL MODULE: ./node_modules/@mui/material/Button/Button.js + 3 modules
var Button = __webpack_require__(86990);
// EXTERNAL MODULE: ./node_modules/@mui/material/Fab/Fab.js + 1 modules
var Fab = __webpack_require__(87992);
// EXTERNAL MODULE: ./node_modules/use-long-press/index.mjs
var use_long_press = __webpack_require__(54669);
// EXTERNAL MODULE: ./node_modules/@mui/material/Typography/Typography.js + 1 modules
var Typography = __webpack_require__(14073);
// EXTERNAL MODULE: ./node_modules/@sandstreamdev/react-swipeable-list/dist/react-swipeable-list.umd.js
var react_swipeable_list_umd = __webpack_require__(48440);
// EXTERNAL MODULE: ./node_modules/@sandstreamdev/react-swipeable-list/dist/styles.css
var styles = __webpack_require__(50647);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(85072);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(97825);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(77659);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(55056);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(10540);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(41113);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/components/atomic/molecules/conversation/style.css
var style = __webpack_require__(71077);
;// CONCATENATED MODULE: ./src/components/atomic/molecules/conversation/style.css

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(style/* default */.A, options);




       /* harmony default export */ const conversation_style = (style/* default */.A && style/* default */.A.locals ? style/* default */.A.locals : undefined);

;// CONCATENATED MODULE: ./src/components/atomic/molecules/conversation/Conversation.js
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }






















var useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    sentMessage: {
      justifyContent: "flex-end !important"
    },
    list: {
      paddingBottom: "".concat(theme.spacing(8), " !important")
    },
    swipeableListItem: {
      background: "transparent !important"
    },
    fab: {
      position: "fixed !important",
      bottom: theme.spacing(9),
      right: theme.spacing(2)
    }
  };
});
var formatDate = function formatDate(timestamp) {
  var date = new Date(timestamp);
  var month = ("0" + (date.getMonth() + 1)).slice(-2); // months are zero indexed
  var day = ("0" + date.getDate()).slice(-2);
  var year = date.getFullYear();
  var hours = date.getHours();
  var minutes = ("0" + date.getMinutes()).slice(-2);
  var seconds = ("0" + date.getSeconds()).slice(-2);
  var ampm = hours >= 12 ? "PM" : "AM";

  // convert from 24-hour to 12-hour format
  hours = hours % 12;
  // the hour '0' should be '12'
  hours = hours ? hours : 12;
  var formattedTime = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds + " " + ampm;
  return formattedTime;
};
function Conversation(_ref) {
  var list = _ref.list,
    isGroup = _ref.isGroup,
    deleteItem = _ref.deleteItem,
    loading = _ref.loading,
    onReply = _ref.onReply,
    onUpvote = _ref.onUpvote;
  var scrollRef = (0,index_js_.useRef)(null);
  var classes = useStyles();
  (0,index_js_.useEffect)(function () {
    if (scrollRef.current) {
      scrollRef.current.scrollIntoView({
        behaviour: "smooth"
      });
    }
    document.addEventListener("scroll", handleScroll);
    return function () {
      document.removeEventListener("scroll", handleScroll);
    };
  }, []);

  // calculate if the scroll is near the bottom of the scroll
  // and it should update the value as the users changes the scroll position

  var _React$useState = index_js_default().useState(true),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    isNearBottom = _React$useState2[0],
    setIsNearBottom = _React$useState2[1];
  var handleScroll = function handleScroll() {
    var distantFromBottom = document.documentElement.scrollHeight - document.documentElement.scrollTop - document.documentElement.clientHeight;
    setIsNearBottom(distantFromBottom > 400);
  };
  var handleScrollToBottom = function handleScrollToBottom() {
    // scrollRef.current.scrollIntoView({ behaviour: "smooth" });
    window.scrollTo({
      top: document.documentElement.scrollHeight,
      behavior: "smooth"
    });
  };
  var handleDelete = function handleDelete(id) {
    deleteItem(id);
  };
  var handleReply = function handleReply(message) {
    onReply(message);
  };
  var handleUpvote = function handleUpvote(e) {
    var messageId = e.target.parentNode.parentNode.parentNode.id;
    console.log("handleUpvote", messageId);
    onUpvote(messageId);
  };
  var bind = (0,use_long_press/* useLongPress */.HZ)(handleUpvote, {
    threshold: 500,
    cancelOnMovement: true,
    captureEvent: true
  });
  return /*#__PURE__*/index_js_default().createElement(List/* default */.A, {
    className: classes.list,
    onSc: true
  }, list.map(function (item) {
    var _item$timestamp;
    return /*#__PURE__*/index_js_default().createElement(react_swipeable_list_umd.SwipeableListItem, {
      className: "swipeableListItem",
      swipeLeft: {
        content: /*#__PURE__*/index_js_default().createElement(Delete/* default */.A, {
          color: "error",
          style: {
            height: "30px",
            marginRight: 20,
            color: ""
          }
        }),
        action: function action() {
          return handleDelete(item.id);
        }
      },
      swipeRight: {
        content: /*#__PURE__*/index_js_default().createElement(Reply/* default */.A, {
          color: "primary",
          style: {
            height: "30px",
            marginLeft: 20
          }
        }),
        action: function action() {
          return handleReply(item);
        }
      }
      // onSwipeProgress={setIsSwiping}
      // onSwipeStart={handleStartSwiping}
      // onSwipeEnd={handleEndSwipingWithClick}
    }, /*#__PURE__*/index_js_default().createElement(ListItem/* default */.Ay, {
      key: item.id,
      onClick: item.onClick,
      className: item.type === "sent" ? classes.sentMessage : ""
    }, /*#__PURE__*/index_js_default().createElement(Button/* default */.A, _extends({
      id: item.id,
      style: {
        textTransform: "none"
      }
    }, bind()), /*#__PURE__*/index_js_default().createElement(Message/* default */.A, {
      type: item.type,
      payload: item.payload,
      message: item.content,
      attachmentSha: item.attachmentSha,
      attachment: item.attachment,
      imageAttachment: item.image,
      username: item.name,
      isOnline: isGroup && item.isOnline
      // parse date from something like `Date(item.timestampSent)` to `'10/23/2023 12:00:00 AM'`
      ,
      timestamp: formatDate((_item$timestamp = item.timestamp) === null || _item$timestamp === void 0 ? void 0 : _item$timestamp.created),
      avatar: item.avatar,
      votes: item.votes
    }))));
  }), loading && /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Box/* default */.A, {
    sx: {
      display: "flex",
      justifyContent: "center",
      flexDirection: "column",
      alignItems: "center"
    }
  }, /*#__PURE__*/index_js_default().createElement(Typography/* default */.A, {
    component: "div",
    gutterBottom: true
  }, "Loading file into browser. Please wait."), /*#__PURE__*/index_js_default().createElement(CircularProgress/* default */.A, null))), /*#__PURE__*/index_js_default().createElement("li", {
    ref: scrollRef
  }), list.length > 10 && isNearBottom && /*#__PURE__*/index_js_default().createElement(Fab/* default */.A, {
    color: "primary",
    "aria-label": "scroll to bottom",
    className: classes.fab,
    onClick: handleScrollToBottom
  }, /*#__PURE__*/index_js_default().createElement(KeyboardDoubleArrowDown/* default */.A, null)));
}

/***/ }),

/***/ 48622:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ Thread),
  Y: () => (/* binding */ formatDate)
});

// EXTERNAL MODULE: consume shared module (default) react@^18.3.1 (singleton) (fallback: ./node_modules/react/index.js)
var index_js_ = __webpack_require__(50318);
var index_js_default = /*#__PURE__*/__webpack_require__.n(index_js_);
// EXTERNAL MODULE: ./node_modules/@mui/material/List/List.js + 1 modules
var List = __webpack_require__(49799);
// EXTERNAL MODULE: ./node_modules/@mui/styles/makeStyles/makeStyles.js + 6 modules
var makeStyles = __webpack_require__(80284);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/KeyboardDoubleArrowUp.js
var KeyboardDoubleArrowUp = __webpack_require__(86113);
// EXTERNAL MODULE: ./src/components/atomic/atom/message/Message.js + 3 modules
var Message = __webpack_require__(69178);
// EXTERNAL MODULE: ./node_modules/@mui/material/Fab/Fab.js + 1 modules
var Fab = __webpack_require__(87992);
// EXTERNAL MODULE: ./node_modules/use-long-press/index.mjs
var use_long_press = __webpack_require__(54669);
// EXTERNAL MODULE: ./node_modules/@sandstreamdev/react-swipeable-list/dist/react-swipeable-list.umd.js
var react_swipeable_list_umd = __webpack_require__(48440);
// EXTERNAL MODULE: ./node_modules/@sandstreamdev/react-swipeable-list/dist/styles.css
var styles = __webpack_require__(50647);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js
var injectStylesIntoStyleTag = __webpack_require__(85072);
var injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js
var styleDomAPI = __webpack_require__(97825);
var styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js
var insertBySelector = __webpack_require__(77659);
var insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js
var setAttributesWithoutAttributes = __webpack_require__(55056);
var setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js
var insertStyleElement = __webpack_require__(10540);
var insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);
// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js
var styleTagTransform = __webpack_require__(41113);
var styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);
// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/components/atomic/molecules/thread/style.css
var style = __webpack_require__(6716);
;// CONCATENATED MODULE: ./src/components/atomic/molecules/thread/style.css

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (styleTagTransform_default());
options.setAttributes = (setAttributesWithoutAttributes_default());

      options.insert = insertBySelector_default().bind(null, "head");
    
options.domAPI = (styleDomAPI_default());
options.insertStyleElement = (insertStyleElement_default());

var update = injectStylesIntoStyleTag_default()(style/* default */.A, options);




       /* harmony default export */ const thread_style = (style/* default */.A && style/* default */.A.locals ? style/* default */.A.locals : undefined);

// EXTERNAL MODULE: ./node_modules/@mui/material/Divider/Divider.js
var Divider = __webpack_require__(71543);
// EXTERNAL MODULE: ./node_modules/@mui/material/Chip/Chip.js + 2 modules
var Chip = __webpack_require__(82022);
// EXTERNAL MODULE: ./node_modules/@mui/material/styles/useTheme.js
var useTheme = __webpack_require__(44675);
// EXTERNAL MODULE: ./node_modules/@mui/material/Container/Container.js + 1 modules
var Container = __webpack_require__(97834);
// EXTERNAL MODULE: ./node_modules/react-router/dist/index.js
var dist = __webpack_require__(47767);
// EXTERNAL MODULE: remote cryptography/Cryptography
var Cryptography = __webpack_require__(79218);
// EXTERNAL MODULE: ./src/components/notifications/notificationManager.js
var notificationManager = __webpack_require__(34541);
// EXTERNAL MODULE: ./node_modules/@mui/material/colors/red.js
var red = __webpack_require__(41338);
// EXTERNAL MODULE: ./node_modules/@mui/material/Avatar/Avatar.js + 2 modules
var Avatar = __webpack_require__(81385);
// EXTERNAL MODULE: ./node_modules/@mui/material/Card/Card.js + 1 modules
var Card = __webpack_require__(14977);
// EXTERNAL MODULE: ./node_modules/@mui/material/CardHeader/CardHeader.js + 1 modules
var CardHeader = __webpack_require__(53650);
// EXTERNAL MODULE: ./node_modules/@mui/material/CardMedia/CardMedia.js + 1 modules
var CardMedia = __webpack_require__(87393);
// EXTERNAL MODULE: ./node_modules/@mui/material/IconButton/IconButton.js + 1 modules
var IconButton = __webpack_require__(11641);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/MoreVert.js
var MoreVert = __webpack_require__(1795);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Favorite.js
var Favorite = __webpack_require__(16869);
// EXTERNAL MODULE: ./node_modules/@mui/material/Typography/Typography.js + 1 modules
var Typography = __webpack_require__(14073);
// EXTERNAL MODULE: ./node_modules/@mui/material/ListItemText/ListItemText.js
var ListItemText = __webpack_require__(82241);
// EXTERNAL MODULE: ./node_modules/@mui/material/OutlinedInput/OutlinedInput.js + 2 modules
var OutlinedInput = __webpack_require__(6757);
// EXTERNAL MODULE: ./node_modules/@mui/material/InputAdornment/InputAdornment.js + 1 modules
var InputAdornment = __webpack_require__(25239);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Send.js
var Send = __webpack_require__(40443);
// EXTERNAL MODULE: ./node_modules/@mui/material/CardContent/CardContent.js + 1 modules
var CardContent = __webpack_require__(37636);
// EXTERNAL MODULE: ./src/components/atomic/atom/dropdown/Dropdown.js + 1 modules
var Dropdown = __webpack_require__(74283);
// EXTERNAL MODULE: ./node_modules/@mui/material/Accordion/Accordion.js + 3 modules
var Accordion = __webpack_require__(1710);
// EXTERNAL MODULE: ./node_modules/@mui/material/AccordionSummary/AccordionSummary.js + 1 modules
var AccordionSummary = __webpack_require__(48719);
// EXTERNAL MODULE: ./node_modules/@mui/material/AccordionDetails/AccordionDetails.js + 1 modules
var AccordionDetails = __webpack_require__(16576);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Comment.js
var Comment = __webpack_require__(15256);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ExpandMore.js
var ExpandMore = __webpack_require__(72048);
;// CONCATENATED MODULE: ./src/components/atomic/atom/customAccordion/CustomAccordion.js
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }










var useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    root: {
      maxWidth: 345
    },
    container: {
      borderLeft: "5px solid ".concat(theme.palette.mode === "dark" ? "#99CCFF" : theme.palette.primary.main)
      // marginRight: -16,
    },
    avatar: {
      backgroundColor: red/* default */.A[500],
      marginRight: 10
    }
  };
});
var CustomAccordion = function CustomAccordion(_ref) {
  var title = _ref.title,
    avatar = _ref.avatar,
    children = _ref.children,
    expanded = _ref.expanded,
    onChange = _ref.onChange,
    customButtons = _ref.customButtons,
    _ref$showExpandIcon = _ref.showExpandIcon,
    showExpandIcon = _ref$showExpandIcon === void 0 ? true : _ref$showExpandIcon;
  var classes = useStyles();
  var _useState = (0,index_js_.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    isExpanded = _useState2[0],
    setIsExpanded = _useState2[1];
  (0,index_js_.useEffect)(function () {
    if (expanded !== undefined) {
      setIsExpanded(expanded);
    }
  }, [expanded]);
  var handleChange = function handleChange() {
    if (expanded === undefined) {
      setIsExpanded(!isExpanded);
    } else {
      onChange();
    }
  };
  return /*#__PURE__*/index_js_default().createElement(Accordion/* default */.A, {
    className: avatar ? classes.container : undefined,
    expanded: expanded !== undefined ? expanded : isExpanded,
    onChange: handleChange
  }, /*#__PURE__*/index_js_default().createElement(AccordionSummary/* default */.A, {
    expandIcon: showExpandIcon && /*#__PURE__*/index_js_default().createElement(ExpandMore/* default */.A, null),
    "aria-controls": "panel1a-content",
    id: "panel1a-header"
  }, avatar ? /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
    className: classes.avatar,
    "aria-label": "recipe"
  }, avatar) : /*#__PURE__*/index_js_default().createElement(Comment/* default */.A, {
    style: {
      marginRight: 5
    }
  }), /*#__PURE__*/index_js_default().createElement(Typography/* default */.A, {
    variant: "body2",
    color: "text.secondary"
  }, title), customButtons), /*#__PURE__*/index_js_default().createElement(AccordionDetails/* default */.A, null, children));
};
/* harmony default export */ const customAccordion_CustomAccordion = (CustomAccordion);
;// CONCATENATED MODULE: ./src/components/atomic/atom/post/Post.js
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || Post_unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Post_arrayLikeToArray(arr); }
function Post_slicedToArray(arr, i) { return Post_arrayWithHoles(arr) || Post_iterableToArrayLimit(arr, i) || Post_unsupportedIterableToArray(arr, i) || Post_nonIterableRest(); }
function Post_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Post_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Post_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Post_arrayLikeToArray(o, minLen); }
function Post_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Post_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Post_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }










// import CardContent from '@mui/material/CardContent';
// import CardActions from '@mui/material/CardActions';









// import { useTheme } from '@mui/material/styles';
// import useMediaQuery from '@mui/material/useMediaQuery';







var Post_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    root: {
      maxWidth: 345
    },
    messageInputContainer: {
      backgroundColor: "#f0f8ff",
      padding: "0 10px",
      margin: "10px 0",
      width: "100%",
      height: 40,
      marginTop: "15px",
      borderRadius: "30px !important"
    },
    messageInput: {
      padding: 0,
      height: "100%",
      width: "100%",
      backgroundColor: theme.palette.mode === "dark" ? "#303030" : "#f0f8ff"
    }
  };
});
var Post = function Post(_ref) {
  var _postDetails$payload, _postDetails$payload2;
  var isDarkMode = _ref.isDarkMode,
    imageId = _ref.imageId,
    postDetails = _ref.postDetails;
  var _useCryptography = (0,Cryptography.useCryptography)(),
    chance = _useCryptography.chance;
  var navigate = (0,dist/* useNavigate */.Zp)();
  var _React$useState = index_js_default().useState(false),
    _React$useState2 = Post_slicedToArray(_React$useState, 2),
    dense = _React$useState2[0],
    setDense = _React$useState2[1];
  var _React$useState3 = index_js_default().useState(false),
    _React$useState4 = Post_slicedToArray(_React$useState3, 2),
    secondary = _React$useState4[0],
    setSecondary = _React$useState4[1];

  // pic a random number between  and including 1-9
  var num = Math.floor(Math.random() * 9) + 1;
  var randomNumber = (0,index_js_.useMemo)(function () {
    return Math.floor(Math.random() * 9) + 1;
  }, []);
  var randomAnimalName = (0,index_js_.useMemo)(function () {
    return chance.animal();
  }, []);
  var randomDate = (0,index_js_.useMemo)(function () {
    return chance.date({
      year: 2023,
      string: true
    });
  }, []);
  var randomLongSentence = (0,index_js_.useMemo)(function () {
    return chance.sentence({
      words: 30
    });
  }, []);
  var randomShortSentence = (0,index_js_.useMemo)(function () {
    return chance.sentence();
  }, []);
  var classes = Post_useStyles();
  var _React$useState5 = index_js_default().useState([]),
    _React$useState6 = Post_slicedToArray(_React$useState5, 2),
    expanded = _React$useState6[0],
    setExpanded = _React$useState6[1];
  var handleChange = function handleChange(panel) {
    return function (event, isExpanded) {
      console.log("handleChange", panel, isExpanded);
      if (isExpanded) {
        setExpanded(function (prevExpanded) {
          return [].concat(_toConsumableArray(prevExpanded), [panel]);
        });
      } else {
        setExpanded(function (prevExpanded) {
          return prevExpanded.filter(function (item) {
            return item !== panel;
          });
        });
      }
    };
  };
  var sendNotification = (0,notificationManager/* useNotification */.hN)();
  var defaultMenuItems = [{
    text: "Go to message",
    icon: "navigate",
    onClick: function onClick() {
      return navigate("/pods");
    }
  }, {
    text: "Go to file",
    icon: "navigate",
    onClick: function onClick() {
      return navigate("/pods");
    }
  }, {
    text: "Delete Post",
    icon: "navigate",
    subMenuItems: [{
      text: "Confirm delete",
      onClick: function onClick() {
        return sendNotification("Deleting post", {
          variant: "info"
        });
      }
    }]
  }];
  var InputComponent = function InputComponent() {
    return /*#__PURE__*/index_js_default().createElement(OutlinedInput/* default */.A, {
      className: classes.messageInputContainer,
      id: "outlined-adornment-weight",
      endAdornment: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(InputAdornment/* default */.A, {
        position: "end"
      }, /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        "aria-label": "send message"
        //   onClick={handleSendMessage}
        // icon is green when there is text in the input field
        //   color={messageInputValue || imageAttachment ? "primary" : "disabled"}
        //   disabled={(!messageInputValue && !imageAttachment) || !isOnline}
        ,
        edge: "end"
      }, /*#__PURE__*/index_js_default().createElement(Send/* default */.A, null)))),
      "aria-describedby": "outlined-weight-helper-text"
      //   onChange={handleMessageChange}
      // on Enter key press, send message
      // but on on shift Enter
      //   onKeyPress={(ev) => {
      //     if (ev.key === 'Enter' && !ev.shiftKey) {
      //       ev.preventDefault();
      //       if (!!messageInputValue) handleSendMessage();
      //     }
      //   }}
      //   value={messageInputValue}
      ,
      classes: {
        root: classes.messageInput
      },
      sx: {
        width: "100%"
      },
      autoComplete: "off"
      // lightblue background
      // style={{ backgroundColor: '#f0f8ff' }}
      ,
      multiline: true,
      placeholder: "Reply...",
      inputProps: {
        "aria-label": "weight"
      }
    });
  };
  return /*#__PURE__*/index_js_default().createElement(Card/* default */.A, {
    style: {
      margin: "20px 0"
    }
  }, /*#__PURE__*/index_js_default().createElement(CardHeader/* default */.A, {
    avatar: /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
      sx: {
        bgcolor: red/* default */.A[500]
      },
      "aria-label": "recipe",
      src: "/avatars/".concat(randomNumber, ".jpg")
    }, "R"),
    action: /*#__PURE__*/index_js_default().createElement(Dropdown/* Dropdown */.ms, {
      keepOpen: true,
      trigger: /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        size: "large",
        "aria-label": "account of current user",
        "aria-controls": "menu-appbar",
        "aria-haspopup": "true",
        color: "inherit"
      }, /*#__PURE__*/index_js_default().createElement(MoreVert/* default */.A, null)),
      menu: defaultMenuItems.map(function (item, index) {
        var _item$subMenuItems, _item$subMenuItems2;
        return !((item === null || item === void 0 || (_item$subMenuItems = item.subMenuItems) === null || _item$subMenuItems === void 0 ? void 0 : _item$subMenuItems.length) > 0) ? /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement(Dropdown/* DropdownMenuItem */._2, {
          onClick: item.onClick
        }, /*#__PURE__*/index_js_default().createElement(ListItemText/* default */.A, null, item.text))) : /*#__PURE__*/index_js_default().createElement(Dropdown/* DropdownNestedMenuItem */.Zn, {
          label: item.text,
          rightAnchored: true,
          menu: _toConsumableArray(((_item$subMenuItems2 = item.subMenuItems) !== null && _item$subMenuItems2 !== void 0 ? _item$subMenuItems2 : []).map(function (subItem, index) {
            return !!subItem && /*#__PURE__*/index_js_default().createElement(Dropdown/* DropdownMenuItem */._2, {
              onClick: subItem.onClick
            }, /*#__PURE__*/index_js_default().createElement(ListItemText/* default */.A, null, subItem.text));
          }))
        }, /*#__PURE__*/index_js_default().createElement(ListItemText/* default */.A, null, item.text));
      })
    }),
    title: randomAnimalName,
    subheader: randomDate
  }), /*#__PURE__*/index_js_default().createElement(CardMedia/* default */.A, {
    component: "img",
    image: imageId ? "/feed/".concat(isDarkMode ? "dark" : "light", "/").concat(imageId, ".jpg") : postDetails === null || postDetails === void 0 || (_postDetails$payload = postDetails.payload) === null || _postDetails$payload === void 0 || (_postDetails$payload = _postDetails$payload.image) === null || _postDetails$payload === void 0 ? void 0 : _postDetails$payload.data,
    alt: "Paella dish"
  }), /*#__PURE__*/index_js_default().createElement(CardContent/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Typography/* default */.A, {
    variant: "body2",
    color: "text.secondary"
  }, postDetails === null || postDetails === void 0 || (_postDetails$payload2 = postDetails.payload) === null || _postDetails$payload2 === void 0 ? void 0 : _postDetails$payload2.content)), /*#__PURE__*/index_js_default().createElement(customAccordion_CustomAccordion, {
    title: /*#__PURE__*/index_js_default().createElement(Typography/* default */.A, {
      variant: "body",
      color: "text.primary"
    }, "Comments"),
    customButtons: /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
      "aria-label": "add to favorites",
      style: {
        marginLeft: "auto",
        padding: 0
      },
      onClick: function onClick(e) {
        return e.stopPropagation();
      },
      disableRipple: true
    }, /*#__PURE__*/index_js_default().createElement(Favorite/* default */.A, null)),
    showExpandIcon: false
  }, /*#__PURE__*/index_js_default().createElement(customAccordion_CustomAccordion, {
    title: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(Typography/* default */.A, {
      variant: "body",
      color: "text.primary"
    }, randomAnimalName, " - ", randomDate), /*#__PURE__*/index_js_default().createElement(Typography/* default */.A, {
      variant: "body2",
      color: "text.secondary"
    }, randomShortSentence)),
    avatar: "R",
    customButtons: /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
      "aria-label": "add to favorites",
      style: {
        marginLeft: "auto",
        padding: 0
      },
      onClick: function onClick(e) {
        return e.stopPropagation();
      },
      disableRipple: true
    }, /*#__PURE__*/index_js_default().createElement(Favorite/* default */.A, null)),
    showExpandIcon: false
  }, /*#__PURE__*/index_js_default().createElement(Typography/* default */.A, {
    variant: "body2",
    color: "text.secondary"
  }, randomLongSentence), /*#__PURE__*/index_js_default().createElement(InputComponent, null)), /*#__PURE__*/index_js_default().createElement(InputComponent, null)));
};
/* harmony default export */ const post_Post = (Post);
;// CONCATENATED MODULE: ./src/components/atomic/molecules/thread/Thread.js
function Thread_toConsumableArray(arr) { return Thread_arrayWithoutHoles(arr) || Thread_iterableToArray(arr) || Thread_unsupportedIterableToArray(arr) || Thread_nonIterableSpread(); }
function Thread_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Thread_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Thread_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Thread_arrayLikeToArray(arr); }
function Thread_slicedToArray(arr, i) { return Thread_arrayWithHoles(arr) || Thread_iterableToArrayLimit(arr, i) || Thread_unsupportedIterableToArray(arr, i) || Thread_nonIterableRest(); }
function Thread_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Thread_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Thread_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Thread_arrayLikeToArray(o, minLen); }
function Thread_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Thread_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Thread_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



























var Thread_useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    sentMessage: {
      justifyContent: "flex-end !important"
    },
    list: {
      paddingBottom: "".concat(theme.spacing(8), " !important")
    },
    swipeableListItem: {
      background: "transparent !important"
    },
    fab: {
      position: "fixed !important",
      bottom: theme.spacing(2),
      right: theme.spacing(2)
    },
    messageInputContainer: {
      marginTop: "15px",
      borderRadius: "30px !important"
    },
    messageInput: {
      backgroundColor: theme.palette.mode === "dark" ? "#303030" : "#f0f8ff"
    }
  };
});
var formatDate = function formatDate(timestamp) {
  var date = new Date(timestamp);
  var month = ("0" + (date.getMonth() + 1)).slice(-2); // months are zero indexed
  var day = ("0" + date.getDate()).slice(-2);
  var year = date.getFullYear();
  var hours = date.getHours();
  var minutes = ("0" + date.getMinutes()).slice(-2);
  var seconds = ("0" + date.getSeconds()).slice(-2);
  var ampm = hours >= 12 ? "PM" : "AM";

  // convert from 24-hour to 12-hour format
  hours = hours % 12;
  // the hour '0' should be '12'
  hours = hours ? hours : 12;
  var formattedTime = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds + " " + ampm;
  return formattedTime;
};
function Thread(_ref) {
  var list = _ref.list,
    isGroup = _ref.isGroup,
    deleteItem = _ref.deleteItem,
    loading = _ref.loading,
    onReply = _ref.onReply,
    onUpvote = _ref.onUpvote;
  var scrollRef = (0,index_js_.useRef)(null);
  var theme = (0,useTheme/* default */.A)();
  var classes = Thread_useStyles();
  (0,index_js_.useEffect)(function () {
    // if (scrollRef.current) {
    //     scrollRef.current.scrollIntoView({ behaviour: "smooth" });
    // }

    document.addEventListener("scroll", handleScroll);
    return function () {
      document.removeEventListener("scroll", handleScroll);
    };
  }, []);

  // calculate if the scroll is near the bottom of the scroll
  // and it should update the value as the users changes the scroll position

  var _React$useState = index_js_default().useState(true),
    _React$useState2 = Thread_slicedToArray(_React$useState, 2),
    isNearTop = _React$useState2[0],
    setIsNearTop = _React$useState2[1];
  var handleScroll = function handleScroll() {
    var distantFromTop = document.documentElement.scrollTop;
    setIsNearTop(distantFromTop < 400);
  };
  var handleScrollToTop = function handleScrollToTop() {
    window.scrollTo({
      top: 0,
      behavior: "smooth"
    });
  };
  var handleDelete = function handleDelete(id) {
    deleteItem(id);
  };
  var handleReply = function handleReply(message) {
    onReply(message);
  };
  var handleUpvote = function handleUpvote(e) {
    var messageId = e.target.parentNode.parentNode.parentNode.id;
    console.log("handleUpvote", messageId);
    onUpvote(messageId);
  };
  var bind = (0,use_long_press/* useLongPress */.HZ)(handleUpvote, {
    threshold: 500,
    cancelOnMovement: true,
    captureEvent: true
  });
  var isDarkMode = theme.palette.mode === "dark";

  // create array with number 1 to 24. the numbers are in a randomised order
  var randomNumbers = (0,index_js_.useMemo)(function () {
    return Thread_toConsumableArray(Array(24).keys()).map(function (i) {
      return i + 1;
    }).sort(function () {
      return Math.random() - 0.5;
    });
  }, []);
  //   const randomNumbers = [...Array(24).keys()].map(i => (i+1)).sort(() => Math.random() - 0.5);

  return /*#__PURE__*/index_js_default().createElement(List/* default */.A, {
    className: classes.list
  }, /*#__PURE__*/index_js_default().createElement("li", {
    ref: scrollRef
  }), /*#__PURE__*/index_js_default().createElement(Container/* default */.A, null, list.map(function (item) {
    return /*#__PURE__*/index_js_default().createElement(post_Post, {
      isDarkMode: isDarkMode,
      postDetails: item
    });
  })), /*#__PURE__*/index_js_default().createElement(Divider/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Chip/* default */.A, {
    label: "Test data:"
  })), /*#__PURE__*/index_js_default().createElement(Container/* default */.A, null, randomNumbers.map(function (number) {
    return /*#__PURE__*/index_js_default().createElement(post_Post, {
      isDarkMode: isDarkMode,
      imageId: number
    });
  })), !isNearTop && /*#__PURE__*/index_js_default().createElement(Fab/* default */.A, {
    color: "primary",
    "aria-label": "scroll to bottom",
    className: classes.fab,
    onClick: handleScrollToTop
  }, /*#__PURE__*/index_js_default().createElement(KeyboardDoubleArrowUp/* default */.A, null)));
}

/***/ }),

/***/ 20181:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ PageContainer)
});

// EXTERNAL MODULE: consume shared module (default) react@^18.3.1 (singleton) (fallback: ./node_modules/react/index.js)
var index_js_ = __webpack_require__(50318);
var index_js_default = /*#__PURE__*/__webpack_require__.n(index_js_);
// EXTERNAL MODULE: ./node_modules/prop-types/index.js
var prop_types = __webpack_require__(5556);
var prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);
// EXTERNAL MODULE: ./node_modules/@mui/material/Toolbar/Toolbar.js + 1 modules
var Toolbar = __webpack_require__(8532);
// EXTERNAL MODULE: ./node_modules/@mui/material/CssBaseline/CssBaseline.js
var CssBaseline = __webpack_require__(14519);
// EXTERNAL MODULE: ./node_modules/@mui/material/useScrollTrigger/useScrollTrigger.js
var useScrollTrigger = __webpack_require__(59729);
// EXTERNAL MODULE: ./node_modules/@mui/material/Box/Box.js + 2 modules
var Box = __webpack_require__(69067);
// EXTERNAL MODULE: ./node_modules/@mui/material/Container/Container.js + 1 modules
var Container = __webpack_require__(97834);
// EXTERNAL MODULE: ./node_modules/@mui/material/Slide/Slide.js
var Slide = __webpack_require__(48875);
// EXTERNAL MODULE: ./node_modules/@mui/material/AppBar/AppBar.js + 1 modules
var AppBar = __webpack_require__(89828);
// EXTERNAL MODULE: ./node_modules/@mui/material/Typography/Typography.js + 1 modules
var Typography = __webpack_require__(14073);
// EXTERNAL MODULE: ./node_modules/@mui/material/IconButton/IconButton.js + 1 modules
var IconButton = __webpack_require__(11641);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/AccountCircle.js
var AccountCircle = __webpack_require__(50790);
// EXTERNAL MODULE: ./node_modules/@mui/material/Badge/Badge.js + 3 modules
var Badge = __webpack_require__(93979);
// EXTERNAL MODULE: ./node_modules/@mui/material/styles/styled.js
var styled = __webpack_require__(11848);
// EXTERNAL MODULE: ./node_modules/@mui/material/Avatar/Avatar.js + 2 modules
var Avatar = __webpack_require__(81385);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ArrowBack.js
var ArrowBack = __webpack_require__(92659);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Videocam.js
var Videocam = __webpack_require__(26347);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/QrCode2.js
var QrCode2 = __webpack_require__(3445);
// EXTERNAL MODULE: ./node_modules/react-router/dist/index.js
var dist = __webpack_require__(47767);
// EXTERNAL MODULE: ./node_modules/@mui/material/ListItemIcon/ListItemIcon.js
var ListItemIcon = __webpack_require__(57873);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Settings.js
var Settings = __webpack_require__(20448);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Logout.js
var Logout = __webpack_require__(45423);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Info.js
var Info = __webpack_require__(75897);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ScreenShare.js
var ScreenShare = __webpack_require__(54978);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Translate.js
var Translate = __webpack_require__(41867);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Call.js
var Call = __webpack_require__(66573);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Fullscreen.js
var Fullscreen = __webpack_require__(99520);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/FullscreenExit.js
var FullscreenExit = __webpack_require__(64992);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/LightMode.js
var LightMode = __webpack_require__(97706);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/DarkMode.js
var DarkMode = __webpack_require__(92866);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/InstallMobile.js
var InstallMobile = __webpack_require__(86100);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/MoreVert.js
var MoreVert = __webpack_require__(1795);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/AssistantDirection.js
var AssistantDirection = __webpack_require__(65812);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Delete.js
var Delete = __webpack_require__(67034);
// EXTERNAL MODULE: ./node_modules/@mui/material/ListItemText/ListItemText.js
var ListItemText = __webpack_require__(82241);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/PermMedia.js
var PermMedia = __webpack_require__(82867);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Support.js
var Support = __webpack_require__(79606);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Description.js
var Description = __webpack_require__(58071);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Key.js
var Key = __webpack_require__(53246);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Science.js
var Science = __webpack_require__(51411);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/GitHub.js
var GitHub = __webpack_require__(43294);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/MenuBook.js
var MenuBook = __webpack_require__(98179);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Reddit.js
var Reddit = __webpack_require__(75025);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Collections.js
var Collections = __webpack_require__(46628);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ViewInAr.js
var ViewInAr = __webpack_require__(68636);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/YouTube.js
var YouTube = __webpack_require__(81952);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/LiveTv.js
var LiveTv = __webpack_require__(43981);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ContactPhone.js
var ContactPhone = __webpack_require__(59273);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/DownloadForOffline.js
var DownloadForOffline = __webpack_require__(50447);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/DataSaverOff.js
var DataSaverOff = __webpack_require__(43239);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/VolunteerActivism.js
var VolunteerActivism = __webpack_require__(16677);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Coffee.js
var Coffee = __webpack_require__(21701);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/LocalParking.js
var LocalParking = __webpack_require__(51348);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Navigation.js
var Navigation = __webpack_require__(50739);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/PrivacyTip.js
var PrivacyTip = __webpack_require__(76348);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/WavingHand.js
var WavingHand = __webpack_require__(94370);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/QuestionMark.js
var QuestionMark = __webpack_require__(20772);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/ConnectWithoutContact.js
var ConnectWithoutContact = __webpack_require__(50027);
// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/index.js + 15 modules
var es = __webpack_require__(32389);
// EXTERNAL MODULE: ./src/App.tsx + 70 modules
var App = __webpack_require__(85756);
// EXTERNAL MODULE: ./node_modules/@mui/material/styles/useTheme.js
var useTheme = __webpack_require__(44675);
// EXTERNAL MODULE: ./src/components/notifications/notificationManager.js
var notificationManager = __webpack_require__(34541);
// EXTERNAL MODULE: ./src/components/translations/i18n.js
var translations_i18n = __webpack_require__(63141);
// EXTERNAL MODULE: ./src/components/atomic/atom/dropdown/Dropdown.js + 1 modules
var Dropdown = __webpack_require__(74283);
;// CONCATENATED MODULE: ./src/components/atomic/molecules/app-header/AppHeader.js
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }







































































var StyledBadge = (0,styled/* default */.Ay)(Badge/* default */.A)(function (_ref) {
  var theme = _ref.theme;
  return {
    "& .MuiBadge-badge": {
      boxShadow: "0 0 0 2px ".concat(theme.palette.background.paper),
      "&::after": {
        position: "absolute",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        borderRadius: "50%",
        animation: "ripple 1.2s infinite ease-in-out",
        border: "1px solid currentColor",
        content: '""'
      }
    },
    "&.green .MuiBadge-badge": {
      backgroundColor: "#44b700",
      color: "#44b700"
    },
    "&.amber .MuiBadge-badge": {
      backgroundColor: "#FFA500",
      color: "#FFA500"
    },
    "@keyframes ripple": {
      "0%": {
        transform: "scale(.8)",
        opacity: 1
      },
      "100%": {
        transform: "scale(2.4)",
        opacity: 0
      }
    }
  };
});
var OpenCollectiveIcon = function OpenCollectiveIcon() {
  return /*#__PURE__*/index_js_default().createElement(DataSaverOff/* default */.A, {
    style: {
      transform: "rotate(30deg)"
    }
  });
};
var presetIcons = {
  account: /*#__PURE__*/index_js_default().createElement(AccountCircle/* default */.A, null),
  arrowBack: /*#__PURE__*/index_js_default().createElement(ArrowBack/* default */.A, null),
  camera: /*#__PURE__*/index_js_default().createElement(Videocam/* default */.A, null),
  settings: /*#__PURE__*/index_js_default().createElement(Settings/* default */.A, null),
  more: /*#__PURE__*/index_js_default().createElement(MoreVert/* default */.A, null),
  logout: /*#__PURE__*/index_js_default().createElement(Logout/* default */.A, null),
  info: /*#__PURE__*/index_js_default().createElement(Info/* default */.A, null),
  folder: /*#__PURE__*/index_js_default().createElement(PermMedia/* default */.A, null),
  document: /*#__PURE__*/index_js_default().createElement(Description/* default */.A, null),
  screen: /*#__PURE__*/index_js_default().createElement(ScreenShare/* default */.A, null),
  call: /*#__PURE__*/index_js_default().createElement(Call/* default */.A, null),
  fullscreen: /*#__PURE__*/index_js_default().createElement(Fullscreen/* default */.A, null),
  fullscreenExit: /*#__PURE__*/index_js_default().createElement(FullscreenExit/* default */.A, null),
  lightMode: /*#__PURE__*/index_js_default().createElement(LightMode/* default */.A, null),
  darkMode: /*#__PURE__*/index_js_default().createElement(DarkMode/* default */.A, null),
  translate: /*#__PURE__*/index_js_default().createElement(Translate/* default */.A, null),
  install: /*#__PURE__*/index_js_default().createElement(InstallMobile/* default */.A, null),
  docs: /*#__PURE__*/index_js_default().createElement(MenuBook/* default */.A, null),
  github: /*#__PURE__*/index_js_default().createElement(GitHub/* default */.A, null),
  reddit: /*#__PURE__*/index_js_default().createElement(Reddit/* default */.A, null),
  youtube: /*#__PURE__*/index_js_default().createElement(YouTube/* default */.A, null),
  navigate: /*#__PURE__*/index_js_default().createElement(AssistantDirection/* default */.A, null),
  "delete": /*#__PURE__*/index_js_default().createElement(Delete/* default */.A, null),
  labs: /*#__PURE__*/index_js_default().createElement(Science/* default */.A, null),
  gram: /*#__PURE__*/index_js_default().createElement(Collections/* default */.A, null),
  verse: /*#__PURE__*/index_js_default().createElement(ViewInAr/* default */.A, null),
  callContact: /*#__PURE__*/index_js_default().createElement(ContactPhone/* default */.A, null),
  help: /*#__PURE__*/index_js_default().createElement(QuestionMark/* default */.A, null),
  privacy: /*#__PURE__*/index_js_default().createElement(PrivacyTip/* default */.A, null),
  support: /*#__PURE__*/index_js_default().createElement(Support/* default */.A, null),
  download: /*#__PURE__*/index_js_default().createElement(DownloadForOffline/* default */.A, null),
  cast: /*#__PURE__*/index_js_default().createElement(LiveTv/* default */.A, null),
  qr: /*#__PURE__*/index_js_default().createElement(QrCode2/* default */.A, null),
  connect: /*#__PURE__*/index_js_default().createElement(ConnectWithoutContact/* default */.A, null),
  hand: /*#__PURE__*/index_js_default().createElement(WavingHand/* default */.A, null),
  map: /*#__PURE__*/index_js_default().createElement(Navigation/* default */.A, null),
  donate: /*#__PURE__*/index_js_default().createElement(VolunteerActivism/* default */.A, null),
  key: /*#__PURE__*/index_js_default().createElement(Key/* default */.A, null),
  coffee: /*#__PURE__*/index_js_default().createElement(Coffee/* default */.A, null),
  openCollective: /*#__PURE__*/index_js_default().createElement(OpenCollectiveIcon, null),
  patreon: /*#__PURE__*/index_js_default().createElement(LocalParking/* default */.A, null)
};
function HideOnScroll(props) {
  var children = props.children,
    window = props.window;
  // Note that you normally won't need to set the window ref as useScrollTrigger
  // will default to window.
  // This is only being set here because the demo is in an iframe.
  var trigger = (0,useScrollTrigger/* default */.A)({
    target: window ? window() : undefined
  });
  return /*#__PURE__*/index_js_default().createElement(Slide/* default */.A, {
    appear: false,
    direction: "down",
    "in": !trigger
  }, children);
}
var CustomDropdown = function CustomDropdown(_ref2) {
  var _menuItems$icon, _menuItems$items;
  var menuItems = _ref2.menuItems;
  var _useTranslation = (0,es/* useTranslation */.Bd)(),
    t = _useTranslation.t,
    i18n = _useTranslation.i18n;
  var theme = (0,useTheme/* default */.A)();
  var _useState = (0,index_js_.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    isFullScreen = _useState2[0],
    setIsFullScreen = _useState2[1];
  var colorMode = index_js_default().useContext(App/* ColorModeContext */.I);
  var sendNotification = (0,notificationManager/* useNotification */.hN)();
  var navigate = (0,dist/* useNavigate */.Zp)();
  var isInstalledPwa = (0,index_js_.useMemo)(function () {
    return window.matchMedia("(display-mode: standalone)").matches || window.navigator.standalone || document.referrer.includes("android-app://");
  }, []);
  (0,index_js_.useEffect)(function () {
    var handleFullscreenChange = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var isInFullscreen;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              isInFullscreen = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement;
              if (!(!isInFullscreen && isFullScreen && document.documentElement.requestFullscreen)) {
                _context.next = 12;
                break;
              }
              _context.prev = 2;
              _context.next = 5;
              return document.documentElement.requestFullscreen();
            case 5:
              _context.next = 10;
              break;
            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](2);
              console.log(_context.t0);
            case 10:
              _context.next = 21;
              break;
            case 12:
              if (!(isInFullscreen && !isFullScreen && document.exitFullscreen)) {
                _context.next = 21;
                break;
              }
              _context.prev = 13;
              _context.next = 16;
              return document.exitFullscreen();
            case 16:
              _context.next = 21;
              break;
            case 18:
              _context.prev = 18;
              _context.t1 = _context["catch"](13);
              console.log(_context.t1);
            case 21:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[2, 7], [13, 18]]);
      }));
      return function handleFullscreenChange() {
        return _ref3.apply(this, arguments);
      };
    }();
    handleFullscreenChange();
  }, [isFullScreen]);
  var _useState3 = (0,index_js_.useState)(null),
    _useState4 = _slicedToArray(_useState3, 2),
    deferredPrompt = _useState4[0],
    setDeferredPrompt = _useState4[1];
  (0,index_js_.useEffect)(function () {
    var handleBeforeInstallPromptEvent = function handleBeforeInstallPromptEvent(e) {
      e.preventDefault();
      setDeferredPrompt(e);
    };
    window.addEventListener("beforeinstallprompt", handleBeforeInstallPromptEvent);
    var bipEvent = new Event("beforeinstallprompt");

    // Define the prompt method on the event object
    bipEvent.prompt = function () {
      return new Promise(function (resolve) {
        // Simulate user accepting the prompt
        resolve({
          outcome: "accepted"
        }); // or 'dismissed' to simulate user dismissing the prompt
      });
    };

    // Dispatch the custom event to trigger your event handler
    window.dispatchEvent(bipEvent);
    return function () {
      window.removeEventListener("beforeinstallprompt", handleBeforeInstallPromptEvent);
    };
  }, []);
  var defaultMenuItems = [{
    text: t("components.menuItems.labs"),
    icon: "labs",
    subMenuItems: [{
      text: t("podsPage.gram"),
      icon: "gram",
      onClick: function onClick() {
        return navigate("/feed");
      }
    }, {
      text: t("podsPage.verse"),
      icon: "verse",
      onClick: function onClick() {
        return navigate("/verse");
      }
    }, {
      text: t("podsPage.map"),
      icon: "map",
      onClick: function onClick() {
        return navigate("/map");
      }
    }, {
      text: t("podsPage.qr"),
      icon: "qr",
      onClick: function onClick() {
        return navigate("/qr");
      }
    }, {
      text: t("podsPage.webrtc"),
      icon: "connect",
      onClick: function onClick() {
        return navigate("/webrtc");
      }
    }, {
      text: t("podsPage.hands"),
      icon: "hand",
      onClick: function onClick() {
        return navigate("/hands");
      }
    }, {
      text: t("podsPage.encrypt"),
      icon: "key",
      onClick: function onClick() {
        return navigate("/encrypt");
      }
    }]
  }, {
    text: t("components.menuItems.about"),
    icon: "info",
    subMenuItems: [{
      text: t("components.menuItems.terms"),
      icon: "document",
      onClick: function onClick() {
        return navigate("/terms");
      }
    }, {
      text: t("components.menuItems.privacy"),
      icon: "privacy",
      onClick: function onClick() {
        return navigate("/terms/privacy");
      }
    }, {
      text: t("components.menuItems.docs"),
      icon: "docs",
      onClick: function onClick() {
        return window.open("https://positive-intentions.com/docs/intro");
      }
    }, {
      text: t("components.menuItems.github"),
      icon: "github",
      onClick: function onClick() {
        return window.open("https://github.com/positive-intentions");
      }
    }, {
      text: t("components.menuItems.reddit"),
      icon: "reddit",
      onClick: function onClick() {
        return window.open("https://www.reddit.com/r/positive_intentions/");
      }
    }, {
      text: t("components.menuItems.youtube"),
      icon: "youtube",
      onClick: function onClick() {
        return window.open("https://www.youtube.com/@positive_intentions");
      }
    }, {
      text: t("components.menuItems.contact"),
      icon: "support",
      onClick: function onClick() {
        return window.open("https://www.reddit.com/user/Accurate-Screen8774");
      }
    }]
  }, {
    text: t("components.menuItems.options"),
    icon: "settings",
    subMenuItems: [{
      text: theme.palette.mode === "dark" ? t("components.menuItems.lightMode") : t("components.menuItems.darkMode"),
      icon: theme.palette.mode === "dark" ? "lightMode" : "darkMode",
      onClick: colorMode.toggleColorMode
    }, !isInstalledPwa ? {
      text: isFullScreen ? t("components.menuItems.exitFullscreen") : t("components.menuItems.fullscreen"),
      icon: isFullScreen ? "fullscreenExit" : "fullscreen",
      onClick: function onClick() {
        return setIsFullScreen(!isFullScreen);
      }
    } : null, !isInstalledPwa ? {
      text: t("components.menuItems.install"),
      icon: "install",
      onClick: function onClick() {
        sendNotification === null || sendNotification === void 0 || sendNotification(t("components.menuItems.requestingToInstall"), {
          variant: "info"
        });
        if (deferredPrompt) {
          deferredPrompt === null || deferredPrompt === void 0 || deferredPrompt.prompt().then(function (result) {
            if (result.outcome === "accepted") {
              console.log("Installation accepted");
              sendNotification === null || sendNotification === void 0 || sendNotification(t("components.menuItems.installPossible"), {
                variant: "success"
              });
            } else {
              console.log("Installation dismissed");
              sendNotification === null || sendNotification === void 0 || sendNotification(t("components.menuItems.installDismissed"), {
                variant: "warning"
              });
            }
          })["catch"](function (error) {
            console.error("Installation prompt error:", error);
            sendNotification === null || sendNotification === void 0 || sendNotification(t("components.menuItems.installFailed"), {
              variant: "warning"
            });
          });
        } else {
          console.error("The beforeinstallprompt event has not been fired.");
          sendNotification === null || sendNotification === void 0 || sendNotification(t("components.menuItems.installNotSupported"), {
            variant: "warning"
          });
        }
      }
    } : null, {
      text: t("components.menuItems.downloadZip"),
      icon: "download",
      onClick: function onClick() {
        return window.open("/positive-intentions.zip");
      }
    }]
  }, {
    text: t("components.menuItems.language"),
    icon: "translate",
    subMenuItems: _toConsumableArray(translations_i18n/* languages */.e.map(function (language) {
      return {
        text: language.name,
        onClick: function onClick() {
          return i18n.changeLanguage(language.id);
        }
      };
    }))
  }, {
    text: t("components.menuItems.sponsor"),
    icon: "donate",
    subMenuItems: [{
      text: t("components.menuItems.github"),
      icon: "github",
      onClick: function onClick() {
        return window.open("https://github.com/sponsors/positive-intentions");
      }
    }, {
      text: t("components.menuItems.kofi"),
      icon: "coffee",
      onClick: function onClick() {
        return window.open("https://ko-fi.com/positive_intentions");
      }
    }, {
      text: t("components.menuItems.openCollective"),
      icon: "openCollective",
      onClick: function onClick() {
        return window.open("https://opencollective.com/positive-intentions");
      }
    }, {
      text: t("components.menuItems.patreon"),
      icon: "patreon",
      onClick: function onClick() {
        return window.open("https://www.patreon.com/positive_intentions");
      }
    }]
  }];
  return /*#__PURE__*/index_js_default().createElement(Dropdown/* Dropdown */.ms, {
    keepOpen: true,
    trigger: /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
      ref: menuItems.ref,
      size: "large",
      "aria-label": "account of current user",
      "aria-controls": "menu-appbar",
      "aria-haspopup": "true",
      color: "inherit"
    }, presetIcons[(_menuItems$icon = menuItems.icon) !== null && _menuItems$icon !== void 0 ? _menuItems$icon : "more"]),
    menu: _toConsumableArray(((_menuItems$items = menuItems === null || menuItems === void 0 ? void 0 : menuItems.items) !== null && _menuItems$items !== void 0 ? _menuItems$items : []).concat(defaultMenuItems).filter(function (i) {
      return !!i;
    }).map(function (item, index) {
      var _item$subMenuItems, _item$subMenuItems2;
      return !((item === null || item === void 0 || (_item$subMenuItems = item.subMenuItems) === null || _item$subMenuItems === void 0 ? void 0 : _item$subMenuItems.length) > 0) ? /*#__PURE__*/index_js_default().createElement("div", null, /*#__PURE__*/index_js_default().createElement(Dropdown/* DropdownMenuItem */._2, {
        onClick: item.onClick
      }, /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, null, presetIcons[item.icon]), /*#__PURE__*/index_js_default().createElement(ListItemText/* default */.A, null, item.text))) : /*#__PURE__*/index_js_default().createElement(Dropdown/* DropdownNestedMenuItem */.Zn, {
        label: item.text,
        leftIcon: /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, null, presetIcons[item.icon]),
        rightAnchored: true,
        menu: _toConsumableArray(((_item$subMenuItems2 = item.subMenuItems) !== null && _item$subMenuItems2 !== void 0 ? _item$subMenuItems2 : []).map(function (subItem, index) {
          return !!subItem && /*#__PURE__*/index_js_default().createElement(Dropdown/* DropdownMenuItem */._2, {
            onClick: subItem.onClick
          }, subItem.icon && /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, null, presetIcons[subItem.icon]), /*#__PURE__*/index_js_default().createElement(ListItemText/* default */.A, null, subItem.text));
        }))
      }, /*#__PURE__*/index_js_default().createElement(ListItemIcon/* default */.A, null, presetIcons[item.icon]), /*#__PURE__*/index_js_default().createElement(ListItemText/* default */.A, null, item.text));
    }))
  });
};
function AppHeader(_ref4) {
  var disabled = _ref4.disabled,
    title = _ref4.title,
    leftIcon = _ref4.leftIcon,
    rightIcon = _ref4.rightIcon,
    backButton = _ref4.backButton,
    backCount = _ref4.backCount,
    _ref4$avatarProps = _ref4.avatarProps,
    avatarProps = _ref4$avatarProps === void 0 ? {} : _ref4$avatarProps,
    _ref4$menuProps = _ref4.menuProps,
    menuProps = _ref4$menuProps === void 0 ? {} : _ref4$menuProps,
    _ref4$customButtons = _ref4.customButtons,
    customButtons = _ref4$customButtons === void 0 ? [] : _ref4$customButtons,
    hideOnScroll = _ref4.hideOnScroll;
  if (disabled) return null;
  var _React$useState = index_js_default().useState(true),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    auth = _React$useState2[0],
    setAuth = _React$useState2[1];
  var _React$useState3 = index_js_default().useState(null),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    anchorEl = _React$useState4[0],
    setAnchorEl = _React$useState4[1];
  var _React$useState5 = index_js_default().useState(null),
    _React$useState6 = _slicedToArray(_React$useState5, 2),
    subMenuAnchorEl = _React$useState6[0],
    setSubMenuAnchorEl = _React$useState6[1];
  var menuRef = index_js_default().useRef(null);
  var subMenuRef = index_js_default().useRef(null);
  var navigate = (0,dist/* useNavigate */.Zp)();
  var handleMenu = function handleMenu(event) {
    setAnchorEl(menuRef);
  };
  var handleSubMenuMenu = function handleSubMenuMenu(event) {
    setSubMenuAnchorEl(subMenuRef);
  };
  var handleClose = function handleClose() {
    setAnchorEl(null);
  };
  var handleSubMenuClose = function handleSubMenuClose() {
    setSubMenuAnchorEl(null);
  };
  var _React$useState7 = index_js_default().useState(false),
    _React$useState8 = _slicedToArray(_React$useState7, 2),
    subMenuOpen = _React$useState8[0],
    setSubMenuOpen = _React$useState8[1];
  var AppBarRender = function AppBarRender() {
    var _avatarProps$src, _avatarProps$alt;
    return /*#__PURE__*/index_js_default().createElement(AppBar/* default */.A, null, /*#__PURE__*/index_js_default().createElement(Toolbar/* default */.A, {
      style: {
        backgroundColor: "#d32f2f",
        color: "white",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        padding: "0 20px",
        minHeight: "20px"
      }
    }, /*#__PURE__*/index_js_default().createElement(Typography/* default */.A, {
      component: "div"
    }, "For testing purposes only")), /*#__PURE__*/index_js_default().createElement(Toolbar/* default */.A, null, backButton && /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
      size: "large",
      edge: "start",
      color: "inherit",
      "aria-label": "menu"
      // sx={{ mr: 2 }}
      ,
      onClick: function onClick() {
        if (typeof backButton === 'function') backButton();
        navigate(typeof backButton === "string" ? backButton : -1);
      }
    }, /*#__PURE__*/index_js_default().createElement(Badge/* default */.A, {
      color: "info",
      badgeContent: backCount
    }, presetIcons.arrowBack)), Object.keys(avatarProps).length > 0 && /*#__PURE__*/index_js_default().createElement(StyledBadge, {
      className: avatarProps !== null && avatarProps !== void 0 && avatarProps.isOnline ? "green" : "amber",
      overlap: "circular",
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "right"
      },
      variant: "dot",
      invisible: !(avatarProps !== null && avatarProps !== void 0 && avatarProps.isOnline) && !(avatarProps !== null && avatarProps !== void 0 && avatarProps.isSomeOnline),
      sx: {
        mr: 2
      }
    }, /*#__PURE__*/index_js_default().createElement(Avatar/* default */.A, {
      src: (_avatarProps$src = avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.src) !== null && _avatarProps$src !== void 0 ? _avatarProps$src : "",
      alt: (_avatarProps$alt = avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.alt) !== null && _avatarProps$alt !== void 0 ? _avatarProps$alt : "-"
    })), /*#__PURE__*/index_js_default().createElement(Typography/* default */.A, {
      variant: "h6",
      component: "div",
      sx: {
        flexGrow: 1,
        overflow: "hidden",
        whiteSpace: "nowrap",
        textOverflow: "ellipsis"
      }
    }, title), customButtons.map(function (button, index) {
      return button.onClick ? /*#__PURE__*/index_js_default().createElement(IconButton/* default */.A, {
        key: index,
        ref: menuRef,
        size: "large",
        "aria-label": "account of current user",
        "aria-controls": "menu-appbar",
        "aria-haspopup": "true",
        onClick: button.onClick,
        color: "inherit"
      }, presetIcons[button.icon]) : button;
    }), /*#__PURE__*/index_js_default().createElement(CustomDropdown, {
      menuItems: menuProps
    })));
  };
  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    props[_key - 1] = arguments[_key];
  }
  return /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement(CssBaseline/* default */.Ay, null), hideOnScroll ? /*#__PURE__*/index_js_default().createElement(HideOnScroll, props, /*#__PURE__*/index_js_default().createElement(AppBarRender, null)) : /*#__PURE__*/index_js_default().createElement(AppBarRender, null));
}
// EXTERNAL MODULE: ./node_modules/@mui/material/Fab/Fab.js + 1 modules
var Fab = __webpack_require__(87992);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Add.js
var Add = __webpack_require__(16718);
// EXTERNAL MODULE: ./node_modules/@mui/styles/makeStyles/makeStyles.js + 6 modules
var makeStyles = __webpack_require__(80284);
// EXTERNAL MODULE: ./node_modules/@mui/styles/useTheme/index.js
var styles_useTheme = __webpack_require__(23668);
// EXTERNAL MODULE: ./node_modules/@mui/material/SpeedDial/SpeedDial.js + 2 modules
var SpeedDial = __webpack_require__(36056);
// EXTERNAL MODULE: ./node_modules/@mui/material/SpeedDialIcon/SpeedDialIcon.js + 2 modules
var SpeedDialIcon = __webpack_require__(10698);
// EXTERNAL MODULE: ./node_modules/@mui/material/SpeedDialAction/SpeedDialAction.js + 63 modules
var SpeedDialAction = __webpack_require__(749);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/FileCopyOutlined.js
var FileCopyOutlined = __webpack_require__(47152);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Save.js
var Save = __webpack_require__(98984);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Print.js
var Print = __webpack_require__(45234);
// EXTERNAL MODULE: ./node_modules/@mui/icons-material/Share.js
var Share = __webpack_require__(29422);
;// CONCATENATED MODULE: ./src/components/atomic/organism/page-container/PageContainer.js





















var PageContainer_presetIcons = {
  add: /*#__PURE__*/index_js_.createElement(Add/* default */.A, null)
};
var actions = [{
  icon: /*#__PURE__*/index_js_.createElement(FileCopyOutlined/* default */.A, null),
  name: "Copy"
}, {
  icon: /*#__PURE__*/index_js_.createElement(Save/* default */.A, null),
  name: "Save"
}, {
  icon: /*#__PURE__*/index_js_.createElement(Print/* default */.A, null),
  name: "Print"
}, {
  icon: /*#__PURE__*/index_js_.createElement(Share/* default */.A, null),
  name: "Share"
}];
function PageContainer_HideOnScroll(props) {
  var children = props.children,
    window = props.window;
  // Note that you normally won't need to set the window ref as useScrollTrigger
  // will default to window.
  // This is only being set here because the demo is in an iframe.
  var trigger = (0,useScrollTrigger/* default */.A)({
    target: window ? window() : undefined
  });
  return /*#__PURE__*/index_js_.createElement(Slide/* default */.A, {
    appear: false,
    direction: "down",
    "in": !trigger
  }, children);
}
PageContainer_HideOnScroll.propTypes = {
  children: (prop_types_default()).element.isRequired,
  /**
   * Injected by the documentation to work in an iframe.
   * You won't need it on your project.
   */
  window: (prop_types_default()).func
};
var useStyles = (0,makeStyles/* default */.A)(function (theme) {
  return {
    // root: {
    //     flexGrow: 1,
    //     // height: "100vh",
    //     // overflow: 'auto',
    //     paddingTop: `${theme.spacing(8)}`
    // },
    // appBar: {
    //     height: theme.spacing(8),
    // },
    // form: {
    //     padding: theme.spacing(3),
    // },
    // title: {
    //     fontWeight: "bold",
    //     textAlign: "left",
    //     display: "flex",
    //     alignItems: "center",
    //     height: "100%",
    //     padding: `0 ${theme.spacing(3)}`,
    // },
    fab: {
      position: "fixed !important",
      bottom: theme.spacing(2),
      right: theme.spacing(2)
    }
  };
});
var defaultLightBackgroundImage = "/backgrounds/light-random.png";
var defaultDarkBackgroundImage = "/backgrounds/dark-random.png";
function PageContainer(props) {
  var _speedDialProps$icon;
  var children = props.children,
    _props$headerProps = props.headerProps,
    headerProps = _props$headerProps === void 0 ? {} : _props$headerProps,
    _props$fabProps = props.fabProps,
    fabProps = _props$fabProps === void 0 ? {} : _props$fabProps,
    _props$speedDialProps = props.speedDialProps,
    speedDialProps = _props$speedDialProps === void 0 ? {} : _props$speedDialProps,
    backgroundImage = props.backgroundImage;
  var classes = useStyles();
  var theme = (0,styles_useTheme/* default */.A)();
  var defaultBackgroundImage = theme.palette.mode === "dark" ? defaultDarkBackgroundImage : defaultLightBackgroundImage;
  return /*#__PURE__*/index_js_.createElement(index_js_.Fragment, null, /*#__PURE__*/index_js_.createElement(CssBaseline/* default */.Ay, null), /*#__PURE__*/index_js_.createElement(AppHeader, headerProps), /*#__PURE__*/index_js_.createElement(Toolbar/* default */.A, null), backgroundImage !== "" && /*#__PURE__*/index_js_.createElement(Box/* default */.A, {
    sx: {
      flexGrow: 1,
      backgroundImage: "url(".concat(backgroundImage !== null && backgroundImage !== void 0 ? backgroundImage : defaultBackgroundImage, ")"),
      position: "fixed",
      height: "100%",
      width: "100%",
      opacity: 0.05,
      zIndex: 0
    }
  }), /*#__PURE__*/index_js_.createElement(Container/* default */.A, {
    disableGutters: true,
    className: "page-container",
    style: {
      flexGrow: 1,
      marginTop: 20
    }
  }, children), Object.keys(fabProps).length > 0 && /*#__PURE__*/index_js_.createElement(Fab/* default */.A, {
    color: "primary",
    "aria-label": "add",
    className: classes.fab,
    onClick: fabProps === null || fabProps === void 0 ? void 0 : fabProps.onClick
  }, PageContainer_presetIcons[fabProps === null || fabProps === void 0 ? void 0 : fabProps.icon]), Object.keys(speedDialProps).length > 0 && /*#__PURE__*/index_js_.createElement(SpeedDial/* default */.A, {
    ariaLabel: "SpeedDial basic example",
    sx: {
      position: "absolute",
      bottom: 16,
      right: 16
    },
    icon: (_speedDialProps$icon = speedDialProps.icon) !== null && _speedDialProps$icon !== void 0 ? _speedDialProps$icon : /*#__PURE__*/index_js_.createElement(SpeedDialIcon/* default */.A, null)
  }, speedDialProps.actions.map(function (action) {
    return /*#__PURE__*/index_js_.createElement(SpeedDialAction/* default */.A, {
      key: action.name,
      icon: action.icon,
      tooltipTitle: action.name,
      onClick: action.onClick
    });
  })));
}

/***/ }),

/***/ 34431:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ blockchain_Blockchain),
  o: () => (/* binding */ useBlockchain)
});

// EXTERNAL MODULE: consume shared module (default) react@^18.3.1 (singleton) (fallback: ./node_modules/react/index.js)
var index_js_ = __webpack_require__(50318);
;// CONCATENATED MODULE: ./src/components/utils/calculateSha3512.js
//disable linting file
/* eslint-disable */

// Check if BigInt is not defined
if (typeof window.BigInt === "undefined") {
  window.BigInt = function () {
    function BigInt(value) {
      if (!(this instanceof window.BigInt)) {
        return new window.BigInt(value);
      }
      if (typeof value !== "string" || !/^-?\d+$/.test(value)) {
        throw new TypeError("Invalid BigInt value");
      }

      // Remove leading zeros, if any, and handle '-0' case
      this.value = value.replace(/^0+|(?<=^-)0+/g, "") || "0";
      if (this.value === "-0") this.value = "0";
    }
    window.BigInt.prototype.add = function (other) {
      if (!(other instanceof window.BigInt)) {
        throw new TypeError("Argument must be of type BigInt");
      }
      var carry = 0;
      var result = "";
      var maxLength = Math.max(this.value.length, other.value.length);
      var isThisNegative = this.value[0] === "-";
      var isOtherNegative = other.value[0] === "-";

      // If both are negative, negate the result of the addition
      if (isThisNegative && isOtherNegative) {
        return new window.BigInt("-" + this.negate().add(other.negate()).toString());
      }

      // If one of them is negative, perform subtraction
      if (isThisNegative) {
        return other.subtract(this.negate());
      }
      if (isOtherNegative) {
        return this.subtract(other.negate());
      }
      for (var i = 0; i < maxLength || carry; i++) {
        var sum = carry;
        if (i < this.value.length) {
          sum += parseInt(this.value.charAt(this.value.length - 1 - i), 10);
        }
        if (i < other.value.length) {
          sum += parseInt(other.value.charAt(other.value.length - 1 - i), 10);
        }
        result = sum % 10 + result;
        carry = Math.floor(sum / 10);
      }
      return new window.BigInt(result);
    };

    // Placeholder for subtraction (not fully implemented)
    window.BigInt.prototype.subtract = function (other) {
      // This is a placeholder; actual subtraction logic will be more complex.
      // For simplicity, assume the current number is larger than the 'other'.
      return new window.BigInt("0");
    };

    // Helper method to negate a BigInt
    window.BigInt.prototype.negate = function () {
      if (this.value[0] === "-") {
        return new BigInt(this.value.substring(1));
      }
      return new BigInt("-" + this.value);
    };
    window.BigInt.prototype.toString = function () {
      return this.value;
    };
    return window.BigInt;
  }();
}

// Usage
// const a = BigInt('12345');
// const b = BigInt('67890');
// const c = a.add(b);
// console.log(c.toString()); // 80135

// function SHA3_512(input):
//     input = applyPadding(input)    // Pre-processing step
//     state = initializeState()     // State Initialization

//     // Keccak Rounds
//     for round in 1 to 24:
//         state = applyTheta(state)
//         state = applyRho(state)
//         state = applyPi(state)
//         state = applyChi(state)
//         state = applyIota(state, round)

//     output = generateOutput(state)  // Output Generation
//     return output

function applyPadding(message) {
  var r = 576; // Rate for SHA3-512

  // Convert the message to a binary representation
  var binaryMessage = "";
  for (var i = 0; i < message.length; i++) {
    var bin = message.charCodeAt(i).toString(2);
    binaryMessage += ("00000000" + bin).slice(-8); // Pad each byte to 8 bits
  }

  // Append the initial "1"
  binaryMessage += "1";

  // Add "0" bits until length % r = r-1
  while (binaryMessage.length % r !== r - 1) {
    binaryMessage += "0";
  }

  // Append the final "1"
  binaryMessage += "1";
  return binaryMessage;
}

// // Example usage:
// let paddedMessage = applyPadding("YourInputHere");
// console.log(paddedMessage);

function initializeState() {
  var w = 64; // word length in bits for SHA3-512
  var state = [];
  for (var x = 0; x < 5; x++) {
    state[x] = [];
    for (var y = 0; y < 5; y++) {
      state[x][y] = window.BigInt(0); // Using window.BigInt to handle 64-bit values in JavaScript
    }
  }
  return state;
}

// // Example usage:
// let state = initializeState();
// console.log(state);

function applyTheta(state) {
  var w = 64; // word length in bits for SHA3-512
  var C = Array(5).fill(window.BigInt(0));
  var D = Array(5).fill(window.BigInt(0));

  // Step 1: For each x, compute C[x]
  for (var x = 0; x < 5; x++) {
    C[x] = state[x][0];
    for (var y = 1; y < 5; y++) {
      C[x] ^= state[x][y];
    }
  }

  // Step 2: Compute D[x]
  for (var _x = 0; _x < 5; _x++) {
    D[_x] = C[(_x + 4) % 5] ^ (C[(_x + 1) % 5] << 1n | C[(_x + 1) % 5] >> window.BigInt(w - 1)); // Left rotation by 1, using BigInt
  }

  // Step 3: For each x, y, XOR the lane at x, y with D[x]
  for (var _x2 = 0; _x2 < 5; _x2++) {
    for (var _y = 0; _y < 5; _y++) {
      state[_x2][_y] ^= D[_x2];
    }
  }
  return state;
}

// // Example usage:
// let state = initializeState();
// state = applyTheta(state);
// console.log(state);

function applyRho(state) {
  var rotationOffsets = [[0, 36, 3, 41, 18], [1, 44, 10, 45, 2], [62, 6, 43, 15, 61], [28, 55, 25, 21, 56], [27, 20, 39, 8, 14]];
  for (var x = 0; x < 5; x++) {
    for (var y = 0; y < 5; y++) {
      var offset = window.BigInt(rotationOffsets[x][y]); // Convert to BigInt
      state[x][y] = state[x][y] << offset | state[x][y] >> 64n - offset; // Use BigInt for 64
    }
  }
  return state;
}

// // Example usage:
// let state = initializeState();
// state = applyRho(state);
// console.log(state);

function applyPi(state) {
  var newState = Array(5).fill(0).map(function () {
    return Array(5).fill(window.BigInt(0));
  }); // Initialize a new 5x5 state with zeros

  for (var x = 0; x < 5; x++) {
    for (var y = 0; y < 5; y++) {
      var newX = y;
      var newY = (2 * x + 3 * y) % 5;
      newState[newX][newY] = state[x][y];
    }
  }
  return newState;
}

// Example usage:
// let state = initializeState();
// state = applyPi(state);
// console.log(state);

function applyChi(state) {
  var newState = Array(5).fill(0).map(function () {
    return Array(5).fill(window.BigInt(0));
  }); // Initialize a new 5x5 state with zeros

  for (var x = 0; x < 5; x++) {
    for (var y = 0; y < 5; y++) {
      var nextLane = state[(x + 1) % 5][y];
      var twoPlacesAheadLane = state[(x + 2) % 5][y];
      newState[x][y] = state[x][y] ^ ~nextLane & twoPlacesAheadLane;
    }
  }
  return newState;
}

// // Example usage:
// let state = initializeState();
// state = applyChi(state);
// console.log(state);

var ROUND_CONSTANTS = (/* unused pure expression or super */ null && ([
  // window.BigInt(0x0000000000000001),
  // window.BigInt(0x0000000000008082),
  // window.BigInt(0x800000000000808a),
  // window.BigInt(0x8000000080008000),
  // window.BigInt(0x000000000000808b),
  // window.BigInt(0x0000000080000001),
  // window.BigInt(0x8000000080008081),
  // window.BigInt(0x8000000000008009),
  // window.BigInt(0x000000000000008a),
  // window.BigInt(0x0000000000000088),
  // window.BigInt(0x0000000080008009),
  // window.BigInt(0x000000008000000a),
  // window.BigInt(0x000000008000808b),
  // window.BigInt(0x800000000000008b),
  // window.BigInt(0x8000000000008089),
  // window.BigInt(0x8000000000008003),
  // window.BigInt(0x8000000000008002),
  // window.BigInt(0x8000000000000080),
  // window.BigInt(0x000000000000800a),
  // window.BigInt(0x800000008000000a),
  // window.BigInt(0x8000000080008081),
  // window.BigInt(0x8000000000008080),
  // window.BigInt(0x0000000080000001),
  // window.BigInt(0x8000000080008008),
]));
function applyIota(state, roundNumber) {
  state[0][0] = state[0][0] ^ ROUND_CONSTANTS[roundNumber];
  return state;
}

// // Example usage:
// let state = initializeState();
// const roundNumber = 0; // This is just an example; typically you'd be iterating through rounds in the overall Keccak function.
// state = applyIota(state, roundNumber);
// console.log(state);

function generateOutput(state, outputLength) {
  // Assuming state is a 2D array and each lane is a window.BigInt representing 64 bits.
  // Convert state to a flat binary string.
  var output = "";
  for (var y = 0; y < 5; y++) {
    for (var x = 0; x < 5; x++) {
      var lane = state[x][y];
      var binaryLane = lane.toString(2).padStart(64, "0");
      output += binaryLane;
    }
  }

  // Trim or pad the binary string to the desired length.
  if (output.length > outputLength) {
    output = output.substring(0, outputLength);
  } else {
    while (output.length < outputLength) {
      // Here, we would typically reapply the Keccak permutation and continue squeezing.
      // But for simplicity, we're padding with zeros.
      output += "0";
    }
  }
  return output;
}

// // Example usage:
// let state = initializeState(); // Assuming state has undergone all transformations
// const desiredOutputLength = 256; // 256 bits as an example
// const result = generateOutput(state, desiredOutputLength);
// console.log(result);

function absorbInput(state, block) {
  var w = 64; // word length in bits for SHA3-512
  var x = 0,
    y = 0;
  for (var j = 0; j < block.length; j += w) {
    var segment = block.slice(j, j + w);
    state[x][y] ^= window.BigInt(parseInt(segment, 2));

    // update x and y values for next cell
    y++;
    if (y >= 5) {
      y = 0;
      x++;
    }
  }
  return state;
}
function keccakF(state) {
  for (var i = 0; i < 24; i++) {
    // 24 rounds in Keccak
    state = applyTheta(state);
    state = applyRho(state);
    state = applyPi(state);
    state = applyChi(state);
    state = applyIota(state, i);
  }
  return state;
}
function calculateSHA3_512(input) {
  var paddedInput = applyPadding(input);
  var state = initializeState();

  // Absorption phase
  for (var i = 0; i < paddedInput.length; i += 576) {
    var block = paddedInput.substring(i, i + 576);
    state = absorbInput(state, block);
    state = keccakF(state);
  }

  // Squeezing phase (just one iteration for SHA3-512)
  var output = generateOutput(state, 1024);
  return binaryToHex(output);
}
function xorStateWithBlock(state, block) {
  for (var y = 0; y < 5; y++) {
    for (var x = 0; x < 5; x++) {
      if (y * 64 + x * 320 < block.length) {
        var chunk = block.substring(y * 64 + x * 320, y * 64 + x * 320 + 64);
        var value = window.BigInt("0b" + chunk);
        state[x][y] ^= value;
      }
    }
  }
  return state;
}

// The functions applyPadding, initializeState, absorbInput, applyTheta, applyRho,
// applyPi, applyChi, applyIota, and generateOutput should be defined based on our prior discussions.

function binaryToHex(binaryString) {
  var hexString = "";
  for (var i = 0; i < binaryString.length; i += 4) {
    var _byte = binaryString.substr(i, 4);
    var hex = parseInt(_byte, 2).toString(16);
    hexString += hex;
  }
  return hexString;
}

// console.log({
//     newSha3_5121: calculateSHA3_512('Hello, World!'),
//     newSha3_5122: calculateSHA3_512('Hello, World!!'),
//     newSha3_5123: calculateSHA3_512('Hello, World!'),
//     newSha3_5124: calculateSHA3_512('Hallo, World!'),
//     newSha3_5125: calculateSHA3_512('Hello, World!'),
//     newSha3_5126: calculateSHA3_512('Hello, World!'),
//     newSha3_5127: calculateSHA3_512('Hello, World!'),
//     newSha3_5128: calculateSHA3_512('Hello, World!'),
//     newSha3_5129: calculateSHA3_512('Hello, World!'),
// })

/* harmony default export */ const calculateSha3512 = ((/* unused pure expression or super */ null && (calculateSHA3_512)));
// EXTERNAL MODULE: ./src/components/utils/calculateSha256.js
var utils_calculateSha256 = __webpack_require__(59701);
// EXTERNAL MODULE: ./src/components/cryptography/Cryptography.js
var Cryptography = __webpack_require__(46525);
;// CONCATENATED MODULE: ./src/components/blockchain/Blockchain.js
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var calculateHash = (/* unused pure expression or super */ null && (calculateSha256));
// function calculateSHA256(str) {
//     const charToCode = (char) => char.charCodeAt(0);
//     const leftRotate = (value, shift) => (value >>> shift) | (value << (32 - shift));
//     const rightRotate = (value, shift) => (value << shift) | (value >>> (32 - shift));
//     const toHex = (value) => value.toString(16).padStart(8, '0');

//     const addUnsigned = (x, y) => {
//         const MAX_UINT32 = Math.pow(2, 32) - 1;
//         return (x & MAX_UINT32) + (y & MAX_UINT32);
//       };

//     const wordsToBlocks = (words) => {
//         const blocks = [];
//         for (let i = 0; i < words.length; i += 16) {
//             blocks.push(words.slice(i, i + 16));
//         }
//         return blocks;
//     };

//     const preprocessMessage = (message) => {
//         const bitLength = message.length * 8;
//         const paddingLength = message.length % 64 < 56 ? 56 - (message.length % 64) : 120 - (message.length % 64);

//         const paddedMessage = new Uint8Array(message.length + paddingLength + 8);
//         paddedMessage.set(message);
//         paddedMessage[message.length] = 0x80;
//         paddedMessage.set(new Uint8Array(bitLengthToArray(bitLength)), paddedMessage.length - 8);

//         return paddedMessage;
//     };

//     const bitLengthToArray = (bitLength) => {
//         const arr = new Uint8Array(8);
//         for (let i = 7; i >= 0; i--) {
//             arr[i] = bitLength & 0xff;
//             bitLength >>>= 8;
//         }
//         return arr;
//     };

//     const computeSHA256 = (message) => {
//         const K = new Uint32Array([
//             0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
//             0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
//             0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
//             0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
//             0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
//             0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
//             0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
//             0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
//             0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
//             0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
//             0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
//             0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
//             0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
//             0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
//             0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
//             0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
//         ]);

//         const blocks = wordsToBlocks(new Uint32Array(message.buffer));
//         const hash = new Uint32Array([
//             0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
//             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,
//         ]);

//         for (const block of blocks) {
//             const schedule = new Uint32Array(64);
//             schedule.set(block);

//             for (let t = 16; t < 64; t++) {
//                 const s0 = rightRotate(schedule[t - 15], 7) ^ rightRotate(schedule[t - 15], 18) ^ (schedule[t - 15] >>> 3);
//                 const s1 = rightRotate(schedule[t - 2], 17) ^ rightRotate(schedule[t - 2], 19) ^ (schedule[t - 2] >>> 10);
//                 schedule[t] = addUnsigned(addUnsigned(addUnsigned(schedule[t - 16], s0), schedule[t - 7]), s1);
//             }

//             let a = hash[0];
//             let b = hash[1];
//             let c = hash[2];
//             let d = hash[3];
//             let e = hash[4];
//             let f = hash[5];
//             let g = hash[6];
//             let h = hash[7];

//             for (let t = 0; t < 64; t++) {
//                 const S1 = rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25);
//                 const ch = (e & f) ^ (~e & g);
//                 const temp1 = addUnsigned(addUnsigned(addUnsigned(addUnsigned(h, S1), ch), K[t]), schedule[t]);
//                 const S0 = rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22);
//                 const maj = (a & b) ^ (a & c) ^ (b & c);
//                 const temp2 = addUnsigned(S0, maj);

//                 h = g;
//                 g = f;
//                 f = e;
//                 e = addUnsigned(d, temp1);
//                 d = c;
//                 c = b;
//                 b = a;
//                 a = addUnsigned(temp1, temp2);
//             }

//             hash[0] = addUnsigned(hash[0], a);
//             hash[1] = addUnsigned(hash[1], b);
//             hash[2] = addUnsigned(hash[2], c);
//             hash[3] = addUnsigned(hash[3], d);
//             hash[4] = addUnsigned(hash[4], e);
//             hash[5] = addUnsigned(hash[5], f);
//             hash[6] = addUnsigned(hash[6], g);
//             hash[7] = addUnsigned(hash[7], h);
//         }

//         const hashArray = new Uint8Array(hash.buffer);
//         const hashHex = Array.from(hashArray, (byte) => byte.toString(16).padStart(2, '0')).join('');

//         return hashHex;
//     };

//     const messageBytes = new TextEncoder().encode(str);
//     const paddedMessage = preprocessMessage(messageBytes);
//     const sha256Hash = computeSHA256(paddedMessage);

//     return sha256Hash;
// }
var Blockchain = /*#__PURE__*/_createClass(function Blockchain(_ref) {
  var _this = this;
  var chain = _ref.chain,
    compiler = _ref.compiler,
    storage = _ref.storage,
    onNewBlock = _ref.onNewBlock,
    onNewChain = _ref.onNewChain;
  _classCallCheck(this, Blockchain);
  this.chain = chain;
  this.compiler = compiler;
  this.pendingBlocks = [];
  this.pendingStorage = {};
  this.compile = function () {
    var _this$chain;
    var state = {};
    var resolveStorage = function resolveStorage() {
      var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var type = payload.type;
      if (["text", "image", "videos", "file", "link", "location", "audio"].includes(type)) {
        return _objectSpread(_objectSpread({}, payload), {}, {
          sha: payload.payload,
          payload: type === "file" ? _objectSpread(_objectSpread({}, storage[payload.payload]), {}, {
            data: ""
          }) : storage[payload.payload]
        });
      }
      if (["reply"].includes(type)) {
        return _objectSpread(_objectSpread({}, payload), {}, {
          payload: state.messages.find(function (message) {
            return message.id === payload.payload;
          })
        });
      }
      return payload;
    };
    ((_this$chain = _this.chain) !== null && _this$chain !== void 0 ? _this$chain : []).forEach(function (block) {
      state = _this.compiler(resolveStorage(block.payload), state);
    });
    return state;
  };
  this.addBlocks = function (blocks, append) {
    blocks.forEach(function (block) {
      _this.addBlock(block, append);
    });
  };
  this.addBlock = function (block, append) {
    var _this$chain2, _block$payload;
    // hash of last block in chain
    var newBlock = {
      id: (0,utils_calculateSha256/* default */.A)(JSON.stringify(_objectSpread(_objectSpread({}, block.payload), {}, {
        previousBlockHash: _this.chain ? (_this$chain2 = _this.chain[_this.chain.length - 1]) === null || _this$chain2 === void 0 ? void 0 : _this$chain2.id : (0,Cryptography/* randomString */.DU)()
      }))),
      payload: (_block$payload = block.payload) !== null && _block$payload !== void 0 && _block$payload.id ? block.payload : block
    };
    if (["text", "image", "videos", "file", "link", "location", "audio"].includes(block.type)) {
      var payloadHash = append ? block.payload : (0,utils_calculateSha256/* default */.A)(JSON.stringify(block.payload));
      _this.pendingStorage[payloadHash] = block.payload;
      newBlock.payload.payload = payloadHash;
    }
    _this.chain = [].concat(_toConsumableArray(_this.chain || []), [newBlock]);
    _this.pendingBlocks = [].concat(_toConsumableArray(_this.pendingBlocks), [newBlock]);
  };
  this.getUpdate = function () {
    var pendingBlocks = _toConsumableArray(_this.pendingBlocks);
    var pendingStorage = _objectSpread({}, _this.pendingStorage);
    _this.pendingBlocks = [];
    _this.pendingStorage = {};
    return {
      pendingBlocks: pendingBlocks,
      pendingStorage: pendingStorage
    };
  };
  this.mergeChain = function (chain) {
    var filteredChain = chain.filter(function (block) {
      var blockId = block.payload.id;
      return !_this.chain.find(function (b) {
        return b.payload.id === blockId;
      });
    });
    var newChain = [].concat(_toConsumableArray(_this.chain), _toConsumableArray(filteredChain));
    var sortedChain = newChain.sort(function (a, b) {
      return new Date(a.payload.timestamp) - new Date(b.payload.timestamp);
    });

    // calculate blockhashes for eachblock based on the hash of the previous block
    var chainWithUpdatedHashes = sortedChain.map(function (block, index) {
      var previousBlock = sortedChain[index - 1];
      var previousBlockHash = previousBlock ? previousBlock.id : "";
      var blockHash = (0,utils_calculateSha256/* default */.A)(JSON.stringify(_objectSpread(_objectSpread({}, block.payload), {}, {
        previousBlockHash: previousBlockHash
      })));
      return _objectSpread(_objectSpread({}, block), {}, {
        id: blockHash
      });
    });
    _this.chain = chainWithUpdatedHashes;
  };
});
var useBlockchain = function useBlockchain(_ref2) {
  var blockchain = _ref2.blockchain,
    _ref2$blockchains = _ref2.blockchains,
    blockchains = _ref2$blockchains === void 0 ? [] : _ref2$blockchains,
    compiler = _ref2.compiler,
    dispatch = _ref2.dispatch;
  var blockchainInstance = (0,index_js_.useMemo)(function () {
    var _blockchain$chain, _blockchain$storage;
    return new Blockchain({
      compiler: compiler,
      chain: (_blockchain$chain = blockchain === null || blockchain === void 0 ? void 0 : blockchain.chain) !== null && _blockchain$chain !== void 0 ? _blockchain$chain : [],
      storage: (_blockchain$storage = blockchain === null || blockchain === void 0 ? void 0 : blockchain.storage) !== null && _blockchain$storage !== void 0 ? _blockchain$storage : {}
    });
  }, [blockchain === null || blockchain === void 0 ? void 0 : blockchain.chain, blockchain === null || blockchain === void 0 ? void 0 : blockchain.storage]);
  var compiledBlockchain = (0,index_js_.useMemo)(function () {
    return blockchainInstance.compile();
  }, [blockchainInstance]);
  var addBlocks = function addBlocks(blocks, append) {
    if (typeof blocks.length === "number") {
      blockchainInstance.addBlocks(blocks, append);
    } else {
      blockchainInstance.addBlock(blocks, append);
    }
    var _blockchainInstance$g = blockchainInstance.getUpdate(),
      pendingBlocks = _blockchainInstance$g.pendingBlocks,
      pendingStorage = _blockchainInstance$g.pendingStorage;
    dispatch({
      blocks: pendingBlocks,
      storage: pendingStorage
    });
    return {
      pendingBlocks: pendingBlocks,
      pendingStorage: pendingStorage
    };
  };
  var compiledBlockchains = blockchains.map(function (blockchain) {
    var _blockchain$chain2, _blockchain$storage2, _blockchainInstance$c;
    var blockchainInstance = new Blockchain({
      compiler: compiler,
      chain: (_blockchain$chain2 = blockchain === null || blockchain === void 0 ? void 0 : blockchain.chain) !== null && _blockchain$chain2 !== void 0 ? _blockchain$chain2 : [],
      storage: (_blockchain$storage2 = blockchain === null || blockchain === void 0 ? void 0 : blockchain.storage) !== null && _blockchain$storage2 !== void 0 ? _blockchain$storage2 : {}
    });
    var addBlocks = function addBlocks(blocks, append) {
      if (typeof blocks.length === "number") {
        blockchainInstance.addBlocks(blocks, append);
      } else {
        blockchainInstance.addBlock(blocks, append);
      }
      var _blockchainInstance$g2 = blockchainInstance.getUpdate(),
        pendingBlocks = _blockchainInstance$g2.pendingBlocks,
        pendingStorage = _blockchainInstance$g2.pendingStorage;
      dispatch({
        blocks: pendingBlocks,
        storage: pendingStorage
      });
      return {
        pendingBlocks: pendingBlocks,
        pendingStorage: pendingStorage
      };
    };
    var compiledBlockchain = blockchainInstance === null || blockchainInstance === void 0 || (_blockchainInstance$c = blockchainInstance.compile) === null || _blockchainInstance$c === void 0 ? void 0 : _blockchainInstance$c.call(blockchainInstance);
    return _objectSpread(_objectSpread({}, compiledBlockchain), {}, {
      addBlocks: addBlocks
    });
  });
  return {
    compiledBlockchain: compiledBlockchain,
    compiledBlockchains: compiledBlockchains,
    addBlocks: addBlocks
  };
};
/* harmony default export */ const blockchain_Blockchain = (Blockchain);

// let mutationBlocksOld = [
//     {
//         id: 'blockId1',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'addUser',
//         payload: 'userId',
//     },
//     {
//         id: 'blockId2',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'addUser',
//         payload: 'userId2',
//     },
//     {
//         id: 'blockId3',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'setPodName',
//         payload: 'New Pod Name',
//     },
//     {
//         id: 'blockId4',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'createMessage',
//     },
//     {
//         id: 'blockId5',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'text',
//         payload: 'contentHash',
//     },
//     {
//         id: 'blockId6',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'image',
//         payload: 'imageHash',
//     },
//     {
//         id: 'blockId7',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'link',
//         payload: 'linkHash',
//     },
//     {
//         id: 'blockId8',
//         from: 'userId2',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'recieved',
//     },
//     {
//         id: 'blockId9',
//         from: 'userId2',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'read',
//     },
// ]

// let mutationBlocks = mutationBlocksOld.map((block) => ({
//     id: 'some Id',
//     payload: block,
// }));

// let messageBlockchain = new Blockchain({
//     chain: mutationBlocks,
//     parser: (block, state) => {
//         const { type, payload, messageId, from, timestamp } = block;

//         switch (type) {
//             case 'addUser':
//                 state.users.push(payload);
//                 return state;
//             case 'removeUser':
//                 state.users = state.users.filter((u) => u !== payload);
//                 return state;
//             case 'setPodName':
//                 state.name = payload;
//                 return state;
//             case 'setPodavatar':
//                 state.avatar = payload;
//                 return state;
//             case 'createMessage':
//                 state.messages.push({
//                     id: messageId,
//                     from: from,
//                     timestamp: { created: timestamp },
//                     reciept: { recievedBy: [], readBy: [] },
//                     votes: { upvotes: [], downvotes: [] },
//                     payload: { content: '', image: [], video: [], file: [], link: [] },
//                 });
//                 return state;
//             case 'text':
//                 state.messages = state.messages.map((m) =>
//                     m.id === messageId ? { ...m, payload: { ...m.payload, content: payload } } : m
//                 );
//                 return state;
//             case 'image':
//                 state.messages = state.messages.map((m) =>
//                     m.id === messageId ? { ...m, payload: { ...m.payload, image: [...m.payload.image, payload] } } : m
//                 );
//                 return state;
//             case 'video':
//                 state.messages = state.messages.map((m) =>
//                     m.id === messageId ? { ...m, payload: { ...m.payload, video: [...m.payload.video, payload] } } : m
//                 );
//                 return state;
//             case 'file':
//                 state.messages = state.messages.map((m) =>
//                     m.id === messageId ? { ...m, payload: { ...m.payload, file: [...m.payload.file, payload] } } : m
//                 );
//                 return state;
//             case 'link':
//                 state.messages = state.messages.map((m) =>
//                     m.id === messageId ? { ...m, payload: { ...m.payload, link: [...m.payload.link, payload] } } : m
//                 );
//                 return state;
//             case 'reply':
//                 state.messages = state.messages.map((m) =>
//                     m.id === messageId ? { ...m, payload: { ...m.payload, replyTo: payload } } : m
//                 );
//                 return state;
//             case 'recieved':
//                 state.messages = state.messages.map((m) =>
//                     m.id === messageId
//                         ? { ...m, reciept: { ...m.reciept, recievedBy: [...m.reciept.recievedBy, { userId: from, timestamp: timestamp }] } }
//                         : m
//                 );
//                 return state;
//             case 'read':
//                 state.messages = state.messages.map((m) =>
//                     m.id === messageId
//                         ? { ...m, reciept: { ...m.reciept, readBy: [...m.reciept.readBy, { userId: from, timestamp: timestamp }] } }
//                         : m
//                 );
//                 return state;
//             case 'delete':
//                 state.messages = state.messages.filter((m) => m.id !== messageId);
//                 return state;
//             case 'upvote':
//                 state.votes.upvotes.push(from);
//                 return state;
//             case 'downvote':
//                 state.votes.downvotes.push(from);
//                 return state;
//             default:
//                 return state;
//         }
//     },
//     onNewBlock: (block) => {
//         // addBlockToPodDispatch(block)
//     },
//     onNewChain: (chain) => {
//         // replaceChainOnPodDispatch(chain)
//     },
// })

// messageBlockchain.addBlock(
//     {
//         id: 'blockId10',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'addUser',
//         payload: 'userId3',
//     },
// )

// let podData = messageBlockchain.getState();

// console.log({ podData, chain: messageBlockchain.chain })

// let mutationBlocksOldRemote = [
//     {
//         id: 'blockId1',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'addUser',
//         payload: 'userId',
//     },
//     {
//         id: 'blockId2',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'addUser',
//         payload: 'userId2',
//     },
//     {
//         id: 'blockId3',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'setPodName',
//         payload: 'New Pod Name',
//     },
//     {
//         id: 'blockId4',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'createMessage',
//     },
//     {
//         id: 'blockId5',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'text',
//         payload: 'contentHash',
//     },
//     {
//         id: 'blockId6',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'image',
//         payload: 'imageHash',
//     },
//     {
//         id: 'blockId7',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'link',
//         payload: 'linkHash',
//     },
//     {
//         id: 'blockId8',
//         from: 'userId2',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'recieved',
//     },
//     {
//         id: 'blockId9',
//         from: 'userId2',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'read',
//     },
//     {
//         id: 'blockId41',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'createMessage',
//     },
//     {
//         id: 'blockId52',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'text',
//         payload: 'contentHash',
//     },
// ]

// let mutationBlocksRemote = mutationBlocksOldRemote.map((block) => ({
//     id: 'some Id',
//     payload: block,
// }));

// messageBlockchain.mergeChain(mutationBlocksRemote);
// podData = messageBlockchain.getState();

// console.log({ podData, chain: messageBlockchain.chain })

// messageBlockchain.addBlock(
//     {
//         id: 'blockId10',
//         from: 'userId',
//         messageId: 'messageId',
//         timestamp: '2020-01-01 00:00:00',
//         type: 'addUser',
//         payload: 'userId4',
//     },
// )

// podData = messageBlockchain.getState();

// console.log({ podData, chain: messageBlockchain.chain })

/***/ }),

/***/ 53288:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   It: () => (/* binding */ encodeEmojisToUnicode),
/* harmony export */   cx: () => (/* binding */ compiler),
/* harmony export */   e3: () => (/* binding */ blockBuilders)
/* harmony export */ });
/* harmony import */ var _cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46525);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function encodeEmojisToUnicode() {
  var inputString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return inputString.replace(/[\u007F-\uFFFF]/g, function (match) {
    return "\\u" + match.charCodeAt(0).toString(16).padStart(4, "0");
  });
}
function decodeUnicodeToEmojis() {
  var encodedString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return encodedString.replace(/\\u([\dA-Fa-f]{4})/g, function (match, group1) {
    return String.fromCharCode(parseInt(group1, 16));
  });
}
var compiler = function compiler(block, propState) {
  var state = Object.keys(propState).length ? propState : {
    id: "",
    users: [],
    name: "",
    avatar: "",
    messages: []
  };
  if (!block) return state;
  var type = block.type,
    payload = block.payload,
    messageId = block.messageId,
    from = block.from,
    timestamp = block.timestamp,
    sha = block.sha;
  switch (type) {
    case "addUser":
      state.users.push(payload);
      return state;
    case "removeUser":
      state.users = state.users.filter(function (u) {
        return u !== payload;
      });
      return state;
    case "setPodId":
      state.id = payload;
    case "setPodName":
      state.name = payload;
      return state;
    case "setClone":
      state.clone = payload;
      return state;
    case "setPodavatar":
      state.avatar = payload;
      return state;
    case "createMessage":
      var newMessage = {
        id: messageId,
        from: from,
        timestamp: {
          created: timestamp
        },
        reciept: {
          recievedBy: [],
          readBy: []
        },
        votes: {
          upvotes: [],
          downvotes: []
        },
        payload: {
          content: "",
          image: [],
          video: [],
          file: [],
          link: [],
          reply: [],
          location: [],
          audio: []
        }
      };
      state.messages = [].concat(_toConsumableArray(state.messages), [newMessage]);
      return state;
    case "text":
      state.messages = state.messages.map(function (m) {
        return m.id === messageId ? _objectSpread(_objectSpread({}, m), {}, {
          payload: _objectSpread(_objectSpread({}, m.payload), {}, {
            content: decodeUnicodeToEmojis(payload)
          })
        }) : m;
      });
      return state;
    case "image":
      state.messages = state.messages.map(function (m) {
        return m.id === messageId ? _objectSpread(_objectSpread({}, m), {}, {
          payload: _objectSpread(_objectSpread({}, m.payload), {}, {
            image: payload,
            sha: sha
          })
        }) : m;
      });
      return state;
    case "video":
      state.messages = state.messages.map(function (m) {
        return m.id === messageId ? _objectSpread(_objectSpread({}, m), {}, {
          payload: _objectSpread(_objectSpread({}, m.payload), {}, {
            video: payload,
            sha: sha
          })
        }) : m;
      });
      return state;
    case "file":
      state.messages = state.messages.map(function (m) {
        return m.id === messageId ? _objectSpread(_objectSpread({}, m), {}, {
          payload: _objectSpread(_objectSpread({}, m.payload), {}, {
            file: payload,
            sha: sha
          })
        }) : m;
      });
      return state;
    case "location":
      state.messages = state.messages.map(function (m) {
        return m.id === messageId ? _objectSpread(_objectSpread({}, m), {}, {
          payload: _objectSpread(_objectSpread({}, m.payload), {}, {
            location: payload
          })
        }) : m;
      });
      return state;
    case "audio":
      state.messages = state.messages.map(function (m) {
        return m.id === messageId ? _objectSpread(_objectSpread({}, m), {}, {
          payload: _objectSpread(_objectSpread({}, m.payload), {}, {
            audio: payload
          })
        }) : m;
      });
      return state;
    case "link":
      state.messages = state.messages.map(function (m) {
        return m.id === messageId ? _objectSpread(_objectSpread({}, m), {}, {
          payload: _objectSpread(_objectSpread({}, m.payload), {}, {
            link: payload
          })
        }) : m;
      });
      return state;
    case "reply":
      state.messages = state.messages.map(function (m) {
        return m.id === messageId ? _objectSpread(_objectSpread({}, m), {}, {
          payload: _objectSpread(_objectSpread({}, m.payload), {}, {
            reply: payload
          })
        }) : m;
      });
      return state;
    case "recieved":
      state.messages = state.messages.map(function (m) {
        return m.id === messageId ? _objectSpread(_objectSpread({}, m), {}, {
          reciept: _objectSpread(_objectSpread({}, m.reciept), {}, {
            recievedBy: [].concat(_toConsumableArray(m.reciept.recievedBy), [{
              userId: from,
              timestamp: timestamp
            }])
          })
        }) : m;
      });
      return state;
    case "read":
      state.messages = state.messages.map(function (m) {
        return m.id === messageId ? _objectSpread(_objectSpread({}, m), {}, {
          reciept: _objectSpread(_objectSpread({}, m.reciept), {}, {
            readBy: [].concat(_toConsumableArray(m.reciept.readBy), [{
              userId: from,
              timestamp: timestamp
            }])
          })
        }) : m;
      });
      return state;
    case "delete":
      state.messages = state.messages.filter(function (m) {
        return m.id !== messageId;
      });
      return state;
    case "upvote":
      state.messages = state.messages.map(function (m) {
        if (m.id === messageId) {
          return _objectSpread(_objectSpread({}, m), {}, {
            votes: _objectSpread(_objectSpread({}, m.votes), {}, {
              upvotes: [].concat(_toConsumableArray(m.votes.upvotes), [{
                userId: from,
                timestamp: timestamp
              }]),
              downvotes: m.votes.downvotes.filter(function (v) {
                return v.userId !== from;
              })
            })
          });
        } else {
          return m;
        }
      });
      return state;
    case "downvote":
      state.messages = state.messages.map(function (m) {
        if (m.id === messageId) {
          if (payload) {
            return _objectSpread(_objectSpread({}, m), {}, {
              votes: _objectSpread(_objectSpread({}, m.votes), {}, {
                downvotes: [].concat(_toConsumableArray(m.votes.downvotes), [{
                  userId: from,
                  timestamp: timestamp
                }]),
                upvotes: m.votes.upvotes.filter(function (v) {
                  return v.userId !== from;
                })
              })
            });
          } else {
            return _objectSpread({}, m);
          }
        } else {
          return m;
        }
      });
      return state;
    default:
      return state;
  }
};
var blockBuilders = function blockBuilders() {
  var salt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return {
    addMember: function addMember(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "addUser",
        payload: payload.userId
      }];
    },
    setPodId: function setPodId(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "setPodId",
        payload: payload.id
      }];
    },
    setPodName: function setPodName(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "setPodName",
        payload: payload.name
      }];
    },
    sendMessage: function sendMessage(payload) {
      var messageId = (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt);
      var sendMessageBlocks = [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "createMessage",
        messageId: messageId
      }];
      if (payload.content) {
        sendMessageBlocks.push({
          id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
          from: payload.from,
          timestamp: Date.now() + sendMessageBlocks.length,
          type: "text",
          messageId: messageId,
          payload: encodeEmojisToUnicode(payload.content)
        });
      }
      if (payload.image) {
        sendMessageBlocks.push({
          id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
          from: payload.from,
          timestamp: Date.now() + sendMessageBlocks.length,
          type: "image",
          messageId: messageId,
          payload: payload.image
        });
      }
      if (payload.file) {
        sendMessageBlocks.push({
          id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
          from: payload.from,
          timestamp: Date.now() + sendMessageBlocks.length,
          type: "file",
          messageId: messageId,
          payload: payload.file
        });
      }
      if (payload.reply) {
        sendMessageBlocks.push({
          id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
          from: payload.from,
          timestamp: Date.now() + sendMessageBlocks.length,
          type: "reply",
          messageId: messageId,
          payload: payload.reply.id
        });
      }
      if (payload.location) {
        sendMessageBlocks.push({
          id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
          from: payload.from,
          timestamp: Date.now() + sendMessageBlocks.length,
          type: "location",
          messageId: messageId,
          payload: payload.location
        });
      }
      if (payload.audio) {
        sendMessageBlocks.push({
          id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
          from: payload.from,
          timestamp: Date.now() + sendMessageBlocks.length,
          type: "audio",
          messageId: messageId,
          payload: payload.audio
        });
      }
      // if (!!payload.upvote) {
      //     sendMessageBlocks.push({
      //         id: randomString(salt),
      //         from: payload.from,
      //         timestamp: Date.now() + sendMessageBlocks.length,
      //         type: 'upvote',
      //         messageId: messageId,
      //         payload: payload.upvote,
      //     })
      // }

      return sendMessageBlocks;
    },
    createPod: function createPod(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "setPodId",
        payload: payload.id
      }].concat(_toConsumableArray(payload.members.map(function (userId) {
        return {
          id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
          from: payload.from,
          timestamp: Date.now(),
          type: "addUser",
          payload: userId
        };
      })), [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "setPodName",
        payload: payload.name
      }, {
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "setClone",
        payload: !!payload.clone
      }]);
    },
    deleteMessage: function deleteMessage(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "delete",
        messageId: payload.id
      }];
    },
    upvoteMessage: function upvoteMessage(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "upvote",
        messageId: payload.messageId
      }];
    }
  };
};

/***/ }),

/***/ 85026:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ compiler),
/* harmony export */   e: () => (/* binding */ blockBuilders)
/* harmony export */ });
/* harmony import */ var _cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46525);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }


// userProfile = {
//     id: 'abc',
//     connectionId: 'def',
//     pastConnections: ['def', 'ghi'],
//     displayName: 'jkl',
//     avatar: 'https://source.unsplash.com/random/400x200?avatar',
//     agreedToTerms: ['2.0.0'],
//     settings: {
//         inAppNotification: true,
//         browserNotification: false
//     }
// }

var mutations = {
  updateId: "UPDATE_ID",
  updateConnectionId: "UPDATE_CONNECTION_ID",
  updateDisplayName: "UPDATE_DISPLAY_NAME",
  updateAvatar: "image",
  // there is an explicit rule for this value to be fetched from storage as an object see blockchain.js
  updateAgreedToTerms: "UPDATE_AGREED_TO_TERMS",
  updateInAppNotification: "UPDATE_IN_APP_NOTIFICATION",
  updateBrowserNotification: "UPDATE_BROWSER_NOTIFICATION",
  updatePeerjsServer: "UPDATE_PEERJS_SERVER",
  updateEncryptionSignature: "UPDATE_ENCRYPTION_SIGNATURE"
};
var compiler = function compiler(block, state) {
  var _state$pastConnection;
  if (!block) return state;
  var type = block.type,
    payload = block.payload;
  switch (type) {
    case mutations.updateId:
      return _objectSpread(_objectSpread({}, state), {}, {
        id: payload
      });
    case mutations.updateConnectionId:
      return _objectSpread(_objectSpread({}, state), {}, {
        connectionId: payload,
        pastConnections: state.connectionId ? [].concat(_toConsumableArray((_state$pastConnection = state.pastConnections) !== null && _state$pastConnection !== void 0 ? _state$pastConnection : []), [state.connectionId]) : []
      });
    case mutations.updateDisplayName:
      return _objectSpread(_objectSpread({}, state), {}, {
        displayName: payload
      });
    case mutations.updateAvatar:
      return _objectSpread(_objectSpread({}, state), {}, {
        avatar: payload
      });
    case mutations.updateAgreedToTerms:
      return _objectSpread(_objectSpread({}, state), {}, {
        agreedToTerms: [].concat(_toConsumableArray(state.agreedToTerms || []), [payload])
      });
    case mutations.updateInAppNotification:
      return _objectSpread(_objectSpread({}, state), {}, {
        settings: _objectSpread(_objectSpread({}, state.settings), {}, {
          inAppNotification: payload
        })
      });
    case mutations.updateBrowserNotification:
      return _objectSpread(_objectSpread({}, state), {}, {
        settings: _objectSpread(_objectSpread({}, state.settings), {}, {
          browserNotification: payload
        })
      });
    case mutations.updatePeerjsServer:
      return _objectSpread(_objectSpread({}, state), {}, {
        peerjsServer: payload
      });
    case mutations.updateEncryptionSignature:
      return _objectSpread(_objectSpread({}, state), {}, {
        encryptionSignature: payload
      });
    default:
      return state;
  }
};
var blockBuilders = function blockBuilders() {
  var salt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return {
    updateId: function updateId(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "UPDATE_ID",
        payload: payload.id
      }];
    },
    updateConnectionId: function updateConnectionId(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "UPDATE_CONNECTION_ID",
        payload: payload.connectionId
      }];
    },
    updateDisplayName: function updateDisplayName(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "UPDATE_DISPLAY_NAME",
        payload: payload.displayName
      }];
    },
    updateAvatar: function updateAvatar(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "image",
        payload: payload.avatar
      }];
    },
    updateAgreedToTerms: function updateAgreedToTerms(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "UPDATE_AGREED_TO_TERMS",
        payload: payload.agreedToTerms
      }];
    },
    updateInAppNotification: function updateInAppNotification(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "UPDATE_IN_APP_NOTIFICATION",
        payload: payload.inAppNotification
      }];
    },
    updateBrowserNotification: function updateBrowserNotification(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "UPDATE_BROWSER_NOTIFICATION",
        payload: payload.browserNotification
      }];
    },
    updatePeerjsServer: function updatePeerjsServer(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "UPDATE_PEERJS_SERVER",
        payload: payload.peerjsServer
      }];
    },
    updateEncryptionSignature: function updateEncryptionSignature(payload) {
      return [{
        id: (0,_cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_0__/* .randomString */ .DU)(salt),
        from: payload.from,
        timestamp: Date.now(),
        type: "UPDATE_ENCRYPTION_SIGNATURE",
        payload: payload.encryptionSignature
      }];
    }
  };
};

/***/ }),

/***/ 46525:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DU: () => (/* binding */ randomString)
/* harmony export */ });
/* unused harmony exports CryptographyProvider, useCryptography */
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50318);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31176);
/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_sha3__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var chance__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(97677);
/* harmony import */ var chance__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(chance__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(79218);
/* harmony import */ var cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_3__);
// create me a Cryptography class for creatting things like rsa keys and methods for encrypting and decrypting messages.

// it should also have cryptogrphically random String generator for creating random strings for things like salt and iv

// it should also have a method for hashing a string with sha256 and sha512

/*
const entropy = 'some user input pf random string';
<CryptographgyProvider entropy={entropy}>
</CryptographyProvider>


// in some component

const { random, md5Hash, sha256Hash, sha3_512Hash, chance } = useCryptography('some salt');
const randomString = random('some more salt');
const md5Hash = md5Hash('some string'); 
const sha256Hash = sha256Hash('some string');
const sha3_512Hash = sha3_512Hash('some string');
*/

/* 

my methods for createing rsa keys and encrypting and decrypting messages

// public key encryption
export const generateKeyPair = async () => {
  const keyPair = await window.crypto.subtle.generateKey(
    {
      name: 'RSA-OAEP',
      modulusLength: 4096,
      publicExponent: new Uint8Array([1, 0, 1]),
      hash: 'SHA-256',
    },
    true,
    ['encrypt', 'decrypt']
  );

  return { publicKey: keyPair.publicKey, privateKey: keyPair.privateKey };
};

function setClassPropsFromJson(json, instance) {
  for (let prop in json) {
    if (json.hasOwnProperty(prop)) {
      instance[prop] = json[prop];
    }
  }
  return instance;
}

export const deserializePublicKey = async (key) => {
  const deSerializedublicKey = await window.crypto.subtle.importKey(
    'jwk',
    {
      ...key,
      kty: 'RSA'
    },
    {
      name: 'RSA-OAEP',
      hash: 'SHA-256',
    },
    true,
    ['encrypt']
  );

  return setClassPropsFromJson(key, deSerializedublicKey)
}

export const deserializePrivateKey = async (key) => {
  const deSerializedPrivateKey = await window.crypto.subtle.importKey(
    'jwk',
    {

      ...key,
      kty: 'RSA'
    },
    {
      name: 'RSA-OAEP',
      hash: 'SHA-256',
    },
    true,
    ['decrypt']
  );

  return setClassPropsFromJson(key, deSerializedPrivateKey)

}

export const encrypt = async (message, publicKey) => {
  const encodedMessage = new TextEncoder().encode(message);
  const encrypted = await window.crypto.subtle.encrypt(
    {
      name: 'RSA-OAEP',
      hash: 'SHA-256',
    },
    publicKey,
    encodedMessage
  ).catch((error) => {
    console.log('error', error);
  });

  return btoa(String.fromCharCode(...new Uint8Array(encrypted)));
};

export const decrypt = async (encryptedMessage, privateKey, passphrase) => {
  const buffer = Uint8Array.from(atob(encryptedMessage), c => c.charCodeAt(0));
  try {
    const decrypted = await window.crypto.subtle.decrypt(
      {
        name: 'RSA-OAEP',
        hash: 'SHA-256',
      },
      privateKey,
      buffer
    );
    const message = new TextDecoder().decode(decrypted);
    return message;
  } catch (error) {
    console.log('error', error);
    throw new Error('Unable to decrypt message. Incorrect passphrase.', error);
  }
};

const getEncryptionMethods = async (userId, salt) => {
  const keyPair = await generateKeyPair(userId, salt);

  return {
    encrypt: async (message) => {
      return await encrypt(message, keyPair.publicKey);
    },
    decrypt: async (encryptedMessage) => {
      return await decrypt(encryptedMessage, keyPair.privateKey, salt);
    },
  };
};

// Symmetric key encryption

export const generateSymmetricKey = async () => {
  const key = await window.crypto.subtle.generateKey(
    {
      name: 'AES-GCM',
      length: 256, // can be  128, 192, or 256
    },
    true, // whether the key is extractable (i.e. can be used in exportKey)
    ['encrypt', 'decrypt']
  );

  return key;
};

export const deserializeSymmetricKey = async (key) => {
  const deSerializedSymmetricKey = await window.crypto.subtle.importKey(
    'jwk',
    {
      ...key,
      kty: 'oct'
    },
    {
      name: 'AES-GCM',
    },
    true,
    ['encrypt', 'decrypt']
  );

  return setClassPropsFromJson(key, deSerializedSymmetricKey)
}

export const encryptWithSymmetricKey = async (message, key) => {
  const encodedMessage = new TextEncoder().encode(message);
  const iv = window.crypto.getRandomValues(new Uint8Array(12)); // must be 12 bytes

  const encrypted = await window.crypto.subtle.encrypt(
    {
      name: 'AES-GCM',
      iv: iv,
    },
    key,
    encodedMessage
  ).catch((error) => {
    console.log('error', error);
  });

  return {
    ciphertext: btoa(String.fromCharCode(...new Uint8Array(encrypted))),
    iv: btoa(String.fromCharCode(...new Uint8Array(iv))),
  };
};

export const decryptWithSymmetricKey = async (encryptedData, key) => {
  const { ciphertext, iv } = encryptedData;
  const buffer = Uint8Array.from(atob(ciphertext), c => c.charCodeAt(0));
  const ivBuffer = Uint8Array.from(atob(iv), c => c.charCodeAt(0));

  try {
    const decrypted = await window.crypto.subtle.decrypt(
      {
        name: 'AES-GCM',
        iv: ivBuffer,
      },
      key,
      buffer
    );
    const message = new TextDecoder().decode(decrypted);
    return message;
  } catch (error) {
    throw new Error('Unable to decrypt message. Incorrect key.');
  }
};

const getSymmetricKeyEncryptionMethods = async () => {
  const key = await generateSymmetricKey();

  return {
    encrypt: async (message) => {
      return await encryptWithSymmetricKey(message, key);
    },
    decrypt: async (encryptedMessage) => {
      return await decryptWithSymmetricKey(encryptedMessage, key);
    },
  };
};

export { getEncryptionMethods, getSymmetricKeyEncryptionMethods };
to export an initialised instance of chance to get things like animal()





i want you to start by creating me the skeleton of the component and we will further define the further method definitions after.
the methods for the encryption should be able to take in serialized encryptions keys like you see in the way its created.
*/






// Create Context
var CryptographyContext = /*#__PURE__*/(/* unused pure expression or super */ null && (createContext(null)));

// Cryptographically Random String Generator
var randomString = function randomString() {
  var additionalSalt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  // Define the length of the random string
  var randomStringLength = 16; // You can change this value to generate a longer or shorter string

  // Generate a random array of uint8 values
  var randomValues = crypto.getRandomValues(new Uint8Array(randomStringLength));

  // Convert random values to hexadecimal string
  var randomHex = Array.from(randomValues).map(function (_byte) {
    return _byte.toString(16).padStart(2, "0");
  }).join("");

  // If additional salt is provided, concatenate it with the random string
  var randomString = additionalSalt ? additionalSalt + randomHex : randomHex;
  return randomString;
};

// // Usage:
// const randomString = random('some more salt');
// console.log(randomString);

// CryptographyProvider Component
var CryptographyProvider = (cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_3___default().CryptographyProvider);
// export const CryptographyProvider = ({ entropy = "", children }) => {
//   const [salt, setSalt] = useState("");
//   const [chance, setChance] = useState(new Chance(salt));

//   useEffect(() => {
//     const updateSates = async () => {
//       const newSalt = await sha256Hash(entropy);
//       setSalt(newSalt);
//       setChance(new Chance(newSalt));
//     };
//     updateSates();
//   }, [entropy]);

//   const random = (additionalSalt = "") => randomString(additionalSalt + salt);

//   // Hashing Methods
//   const sha256Hash = async (input) => {
//     // // Ensure the input is a string
//     // if (typeof inputString !== 'string') throw new Error('Input must be a string');

//     const inputString = JSON.stringify(input);

//     // Convert the string to an ArrayBuffer
//     const encoder = new TextEncoder();
//     const data = encoder.encode(inputString);

//     // Hash the data
//     const hashBuffer = await crypto.subtle.digest("SHA-256", data);

//     // Convert the result to a hexadecimal string
//     const hashArray = Array.from(new Uint8Array(hashBuffer));
//     const hashHex = hashArray
//       .map((byte) => byte.toString(16).padStart(2, "0"))
//       .join("");

//     return hashHex;
//   };

//   // // Usage:
//   // sha256Hash('some string')
//   //     .then(hash => console.log(hash))
//   //     .catch(error => console.error(error));

//   const sha512Hash = async (input) => {
//     // // Ensure the input is a string
//     // if (typeof inputString !== 'string') throw new Error('Input must be a string');
//     const inputString = JSON.stringify(input);

//     // Convert the string to an ArrayBuffer
//     const encoder = new TextEncoder();
//     const data = encoder.encode(inputString);

//     // Hash the data
//     const hashBuffer = await crypto.subtle.digest("SHA-512", data);

//     // Convert the result to a hexadecimal string
//     const hashArray = Array.from(new Uint8Array(hashBuffer));
//     const hashHex = hashArray
//       .map((byte) => byte.toString(16).padStart(2, "0"))
//       .join("");

//     return hashHex;
//   };

//   // // Usage:
//   // sha512Hash('some string')
//   //     .then(hash => console.log(hash))
//   //     .catch(error => console.error(error));

//   const sha3_512Hash = async (input) => {
//     // // Ensure the input is a string
//     // if (typeof inputString !== 'string') throw new Error('Input must be a string');
//     const inputString = JSON.stringify(input);

//     // Hash the data
//     const hashHex = sha3_512(inputString);

//     return hashHex;
//   };

//   // // Usage:
//   // sha3_512Hash('some string')
//   //     .then(hash => console.log(hash))
//   //     .catch(error => console.error(error));

//   // RSA Key Generation and Encryption/Decryption Methods
//   const generateKeyPair = async () => {
//     try {
//       const keyPair = await crypto.subtle.generateKey(
//         {
//           name: "RSA-OAEP",
//           modulusLength: 4096, // Can be 1024, 2048, or 4096
//           publicExponent: new Uint8Array([1, 0, 1]), // 65537 in bytes
//           hash: "SHA-256", // Can be "SHA-1", "SHA-256", "SHA-384", or "SHA-512"
//         },
//         true, // Whether the key is extractable
//         ["encrypt", "decrypt"], // Key usages
//       );

//       return {
//         publicKey: keyPair.publicKey,
//         privateKey: keyPair.privateKey,
//       };
//     } catch (error) {
//       console.error("Error generating key pair:", error);
//       throw error;
//     }
//   };

//   // // Usage:
//   // generateKeyPair('some salt')
//   //     .then(keyPair => {
//   //         console.log('Public Key:', keyPair.publicKey);
//   //         console.log('Private Key:', keyPair.privateKey);
//   //     })
//   //     .catch(error => console.error(error));

//   function setClassPropsFromJson(json, instance) {
//     for (let prop in json) {
//       if (json.hasOwnProperty(prop)) {
//         instance[prop] = json[prop];
//       }
//     }
//     return instance;
//   }

//   const deserializePublicKey = async (key) => {
//     try {
//       const publicKey = await crypto.subtle.importKey(
//         "jwk", // Import format
//         key, // The key in JWK format
//         {
//           name: "RSA-OAEP", // Algorithm name
//           hash: "SHA-256", // Hash algorithm
//         },
//         true, // Extractable flag
//         ["encrypt"], // Key usages
//       );

//       return setClassPropsFromJson(key, publicKey);
//     } catch (error) {
//       console.error("Error deserializing public key:", error);
//       throw error;
//     }
//   };

//   // // Usage:
//   // const jwk = {
//   //     kty: 'RSA',
//   //     // ... other JWK properties
//   // };

//   // deserializePublicKey(jwk)
//   //     .then(publicKey => console.log('Public Key:', publicKey))
//   //     .catch(error => console.error(error));

//   const deserializePrivateKey = async (key) => {
//     try {
//       const privateKey = await crypto.subtle.importKey(
//         "jwk", // Import format
//         key, // The key in JWK format
//         {
//           name: "RSA-OAEP", // Algorithm name
//           hash: "SHA-256", // Hash algorithm
//         },
//         true, // Extractable flag
//         ["decrypt"], // Key usages
//       );

//       return setClassPropsFromJson(key, privateKey);
//     } catch (error) {
//       console.error("Error deserializing private key:", error);
//       throw error;
//     }
//   };

//   // // Usage:
//   // const jwk = {
//   //     kty: 'RSA',
//   //     // ... other JWK properties
//   // };

//   // deserializePrivateKey(jwk)
//   //     .then(privateKey => console.log('Private Key:', privateKey))
//   //     .catch(error => console.error(error));

//   const encrypt = async (message, publicKey) => {
//     const encodedMessage = new TextEncoder().encode(message);
//     const encrypted = await window.crypto.subtle
//       .encrypt(
//         {
//           name: "RSA-OAEP",
//           hash: "SHA-256",
//         },
//         publicKey,
//         encodedMessage,
//       )
//       .catch((error) => {
//         console.log("error", error);
//       });

//     return btoa(String.fromCharCode(...new Uint8Array(encrypted)));
//   };

//   //   const message = 'Hello, World!';
//   //     const publicKey;  // Assume this is obtained from your key generation or deserialization functions

//   //     encrypt(message, publicKey)
//   //         .then(encryptedMessage => {
//   //             console.log('Encrypted Message:', encryptedMessage);
//   //         })
//   //         .catch(error => {
//   //             console.error('Encryption Error:', error);
//   //     });

//   const decrypt = async (encryptedMessage, privateKey, passphrase) => {
//     const buffer = Uint8Array.from(atob(encryptedMessage), (c) =>
//       c.charCodeAt(0),
//     );
//     try {
//       const decrypted = await window.crypto.subtle.decrypt(
//         {
//           name: "RSA-OAEP",
//           hash: "SHA-256",
//         },
//         privateKey,
//         buffer,
//       );
//       const message = new TextDecoder().decode(decrypted);
//       return message;
//     } catch (error) {
//       console.log("error", error);
//       throw new Error(
//         "Unable to decrypt message. Incorrect passphrase.",
//         error,
//       );
//     }
//   };

//   //       const encryptedMessage;  // Assume this is obtained from your encrypt function
//   // const privateKey;  // Assume this is obtained from your key generation or deserialization functions

//   // decrypt(encryptedMessage, privateKey)
//   //     .then(decryptedMessage => {
//   //         console.log('Decrypted Message:', decryptedMessage);
//   //     })
//   //     .catch(error => {
//   //         console.error('Decryption Error:', error);
//   //     });

//   // Symmetric Key Generation and Encryption/Decryption Methods
//   const generateSymmetricKey = async () => {
//     const key = await window.crypto.subtle.generateKey(
//       {
//         name: "AES-GCM",
//         length: 256, // can be  128, 192, or 256
//       },
//       true, // whether the key is extractable (i.e. can be used in exportKey)
//       ["encrypt", "decrypt"],
//     );

//     return key;
//   };

//   const deserializeSymmetricKey = async (key) => {
//     const deSerializedSymmetricKey = await window.crypto.subtle.importKey(
//       "jwk",
//       {
//         ...key,
//         kty: "oct",
//       },
//       {
//         name: "AES-GCM",
//       },
//       true,
//       ["encrypt", "decrypt"],
//     );

//     return setClassPropsFromJson(key, deSerializedSymmetricKey);
//   };

//   const encryptWithSymmetricKey = async (message, key) => {
//     const encodedMessage = new TextEncoder().encode(message);
//     const iv = window.crypto.getRandomValues(new Uint8Array(12)); // must be 12 bytes

//     const encrypted = await window.crypto.subtle
//       .encrypt(
//         {
//           name: "AES-GCM",
//           iv: iv,
//         },
//         key,
//         encodedMessage,
//       )
//       .catch((error) => {
//         console.log("error", error);
//       });

//     return {
//       ciphertext: btoa(String.fromCharCode(...new Uint8Array(encrypted))),
//       iv: btoa(String.fromCharCode(...new Uint8Array(iv))),
//     };
//   };

//   const decryptWithSymmetricKey = async (encryptedData, key) => {
//     const { ciphertext, iv } = encryptedData;
//     const buffer = Uint8Array.from(atob(ciphertext), (c) => c.charCodeAt(0));
//     const ivBuffer = Uint8Array.from(atob(iv), (c) => c.charCodeAt(0));

//     try {
//       const decrypted = await window.crypto.subtle.decrypt(
//         {
//           name: "AES-GCM",
//           iv: ivBuffer,
//         },
//         key,
//         buffer,
//       );
//       const message = new TextDecoder().decode(decrypted);
//       return message;
//     } catch (error) {
//       throw new Error("Unable to decrypt message. Incorrect key.");
//     }
//   };

//   // Exported Methods Bundle
//   const cryptographyMethods = {
//     randomString,
//     sha256Hash,
//     sha512Hash,
//     sha3_512Hash,
//     generateKeyPair,
//     deserializePublicKey,
//     deserializePrivateKey,
//     encrypt,
//     decrypt,
//     generateSymmetricKey,
//     deserializeSymmetricKey,
//     encryptWithSymmetricKey,
//     decryptWithSymmetricKey,
//     // Add more methods as needed
//     chance,
//   };

//   return (
//     <CryptographyContext.Provider value={cryptographyMethods}>
//       {children}
//     </CryptographyContext.Provider>
//   );
// };

// Custom Hook to use Cryptography
var useCryptography = function useCryptography() {
  return useContext(CryptographyContext);
};

// Usage in some component
/*
const { 
  random, 
  sha256Hash, 
  sha512Hash, 
  generateKeyPair,
  deserializePublicKey,
  deserializePrivateKey,
  encrypt,
  decrypt,
  generateSymmetricKey,
  deserializeSymmetricKey,
  encryptWithSymmetricKey,
  decryptWithSymmetricKey,
  chance
} = useCryptography();
*/

/***/ }),

/***/ 89091:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   QT: () => (/* binding */ deserializePublicKey),
/* harmony export */   TZ: () => (/* binding */ generateKeyPair),
/* harmony export */   Yc: () => (/* binding */ _decrypt),
/* harmony export */   aq: () => (/* binding */ decryptWithSymmetricKey),
/* harmony export */   eB: () => (/* binding */ deserializePrivateKey),
/* harmony export */   eE: () => (/* binding */ encryptWithSymmetricKey),
/* harmony export */   w: () => (/* binding */ _encrypt),
/* harmony export */   yE: () => (/* binding */ generateSymmetricKey)
/* harmony export */ });
/* unused harmony exports deserializeSymmetricKey, getEncryptionMethods, getSymmetricKeyEncryptionMethods */
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// public key encryption
var generateKeyPair = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var keyPair;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return window.crypto.subtle.generateKey({
            name: "RSA-OAEP",
            modulusLength: 4096,
            publicExponent: new Uint8Array([1, 0, 1]),
            hash: "SHA-256"
          }, true, ["encrypt", "decrypt"]);
        case 2:
          keyPair = _context.sent;
          return _context.abrupt("return", {
            publicKey: keyPair.publicKey,
            privateKey: keyPair.privateKey
          });
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function generateKeyPair() {
    return _ref.apply(this, arguments);
  };
}();
function setClassPropsFromJson(json, instance) {
  for (var prop in json) {
    if (json.hasOwnProperty(prop)) {
      instance[prop] = json[prop];
    }
  }
  return instance;
}
var deserializePublicKey = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key) {
    var deSerializedublicKey;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return window.crypto.subtle.importKey("jwk", _objectSpread(_objectSpread({}, key), {}, {
            kty: "RSA"
          }), {
            name: "RSA-OAEP",
            hash: "SHA-256"
          }, true, ["encrypt"]);
        case 2:
          deSerializedublicKey = _context2.sent;
          return _context2.abrupt("return", setClassPropsFromJson(key, deSerializedublicKey));
        case 4:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function deserializePublicKey(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var deserializePrivateKey = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key) {
    var deSerializedPrivateKey;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return window.crypto.subtle.importKey("jwk", _objectSpread(_objectSpread({}, key), {}, {
            kty: "RSA"
          }), {
            name: "RSA-OAEP",
            hash: "SHA-256"
          }, true, ["decrypt"]);
        case 2:
          deSerializedPrivateKey = _context3.sent;
          return _context3.abrupt("return", setClassPropsFromJson(key, deSerializedPrivateKey));
        case 4:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function deserializePrivateKey(_x2) {
    return _ref3.apply(this, arguments);
  };
}();
var _encrypt = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(message, publicKey) {
    var encodedMessage, encrypted;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          encodedMessage = new TextEncoder().encode(message);
          _context4.next = 3;
          return window.crypto.subtle.encrypt({
            name: "RSA-OAEP",
            hash: "SHA-256"
          }, publicKey, encodedMessage)["catch"](function (error) {
            console.log("error", error);
          });
        case 3:
          encrypted = _context4.sent;
          return _context4.abrupt("return", btoa(String.fromCharCode.apply(String, _toConsumableArray(new Uint8Array(encrypted)))));
        case 5:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function encrypt(_x3, _x4) {
    return _ref4.apply(this, arguments);
  };
}();

var _decrypt = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(encryptedMessage, privateKey, passphrase) {
    var buffer, decrypted, message;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          buffer = Uint8Array.from(atob(encryptedMessage), function (c) {
            return c.charCodeAt(0);
          });
          _context5.prev = 1;
          _context5.next = 4;
          return window.crypto.subtle.decrypt({
            name: "RSA-OAEP",
            hash: "SHA-256"
          }, privateKey, buffer);
        case 4:
          decrypted = _context5.sent;
          message = new TextDecoder().decode(decrypted);
          return _context5.abrupt("return", message);
        case 9:
          _context5.prev = 9;
          _context5.t0 = _context5["catch"](1);
          console.log("error", _context5.t0);
          throw new Error("Unable to decrypt message. Incorrect passphrase.", _context5.t0);
        case 13:
        case "end":
          return _context5.stop();
      }
    }, _callee5, null, [[1, 9]]);
  }));
  return function decrypt(_x5, _x6, _x7) {
    return _ref5.apply(this, arguments);
  };
}();

var getEncryptionMethods = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(userId, salt) {
    var keyPair;
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          _context8.next = 2;
          return generateKeyPair(userId, salt);
        case 2:
          keyPair = _context8.sent;
          return _context8.abrupt("return", {
            encrypt: function () {
              var _encrypt2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(message) {
                return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                  while (1) switch (_context6.prev = _context6.next) {
                    case 0:
                      _context6.next = 2;
                      return _encrypt(message, keyPair.publicKey);
                    case 2:
                      return _context6.abrupt("return", _context6.sent);
                    case 3:
                    case "end":
                      return _context6.stop();
                  }
                }, _callee6);
              }));
              function encrypt(_x10) {
                return _encrypt2.apply(this, arguments);
              }
              return encrypt;
            }(),
            decrypt: function () {
              var _decrypt2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(encryptedMessage) {
                return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                  while (1) switch (_context7.prev = _context7.next) {
                    case 0:
                      _context7.next = 2;
                      return _decrypt(encryptedMessage, keyPair.privateKey, salt);
                    case 2:
                      return _context7.abrupt("return", _context7.sent);
                    case 3:
                    case "end":
                      return _context7.stop();
                  }
                }, _callee7);
              }));
              function decrypt(_x11) {
                return _decrypt2.apply(this, arguments);
              }
              return decrypt;
            }()
          });
        case 4:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return function getEncryptionMethods(_x8, _x9) {
    return _ref6.apply(this, arguments);
  };
}()));

// Symmetric key encryption

var generateSymmetricKey = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
    var key;
    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
      while (1) switch (_context9.prev = _context9.next) {
        case 0:
          _context9.next = 2;
          return window.crypto.subtle.generateKey({
            name: "AES-GCM",
            length: 256 // can be  128, 192, or 256
          }, true,
          // whether the key is extractable (i.e. can be used in exportKey)
          ["encrypt", "decrypt"]);
        case 2:
          key = _context9.sent;
          return _context9.abrupt("return", key);
        case 4:
        case "end":
          return _context9.stop();
      }
    }, _callee9);
  }));
  return function generateSymmetricKey() {
    return _ref7.apply(this, arguments);
  };
}();
var deserializeSymmetricKey = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(key) {
    var deSerializedSymmetricKey;
    return _regeneratorRuntime().wrap(function _callee10$(_context10) {
      while (1) switch (_context10.prev = _context10.next) {
        case 0:
          _context10.next = 2;
          return window.crypto.subtle.importKey("jwk", _objectSpread(_objectSpread({}, key), {}, {
            kty: "oct"
          }), {
            name: "AES-GCM"
          }, true, ["encrypt", "decrypt"]);
        case 2:
          deSerializedSymmetricKey = _context10.sent;
          return _context10.abrupt("return", setClassPropsFromJson(key, deSerializedSymmetricKey));
        case 4:
        case "end":
          return _context10.stop();
      }
    }, _callee10);
  }));
  return function deserializeSymmetricKey(_x12) {
    return _ref8.apply(this, arguments);
  };
}()));
var encryptWithSymmetricKey = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(message, key) {
    var encodedMessage, iv, encrypted;
    return _regeneratorRuntime().wrap(function _callee11$(_context11) {
      while (1) switch (_context11.prev = _context11.next) {
        case 0:
          encodedMessage = new TextEncoder().encode(message);
          iv = window.crypto.getRandomValues(new Uint8Array(12)); // must be 12 bytes
          _context11.next = 4;
          return window.crypto.subtle.encrypt({
            name: "AES-GCM",
            iv: iv
          }, key, encodedMessage)["catch"](function (error) {
            console.log("error", error);
          });
        case 4:
          encrypted = _context11.sent;
          return _context11.abrupt("return", {
            ciphertext: btoa(String.fromCharCode.apply(String, _toConsumableArray(new Uint8Array(encrypted)))),
            iv: btoa(String.fromCharCode.apply(String, _toConsumableArray(new Uint8Array(iv))))
          });
        case 6:
        case "end":
          return _context11.stop();
      }
    }, _callee11);
  }));
  return function encryptWithSymmetricKey(_x13, _x14) {
    return _ref9.apply(this, arguments);
  };
}();
var decryptWithSymmetricKey = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(encryptedData, key) {
    var ciphertext, iv, buffer, ivBuffer, decrypted, message;
    return _regeneratorRuntime().wrap(function _callee12$(_context12) {
      while (1) switch (_context12.prev = _context12.next) {
        case 0:
          ciphertext = encryptedData.ciphertext, iv = encryptedData.iv;
          buffer = Uint8Array.from(atob(ciphertext), function (c) {
            return c.charCodeAt(0);
          });
          ivBuffer = Uint8Array.from(atob(iv), function (c) {
            return c.charCodeAt(0);
          });
          _context12.prev = 3;
          _context12.next = 6;
          return window.crypto.subtle.decrypt({
            name: "AES-GCM",
            iv: ivBuffer
          }, key, buffer);
        case 6:
          decrypted = _context12.sent;
          message = new TextDecoder().decode(decrypted);
          return _context12.abrupt("return", message);
        case 11:
          _context12.prev = 11;
          _context12.t0 = _context12["catch"](3);
          throw new Error("Unable to decrypt message. Incorrect key.");
        case 14:
        case "end":
          return _context12.stop();
      }
    }, _callee12, null, [[3, 11]]);
  }));
  return function decryptWithSymmetricKey(_x15, _x16) {
    return _ref10.apply(this, arguments);
  };
}();
var getSymmetricKeyEncryptionMethods = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
    var key;
    return _regeneratorRuntime().wrap(function _callee15$(_context15) {
      while (1) switch (_context15.prev = _context15.next) {
        case 0:
          _context15.next = 2;
          return generateSymmetricKey();
        case 2:
          key = _context15.sent;
          return _context15.abrupt("return", {
            encrypt: function () {
              var _encrypt3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(message) {
                return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                  while (1) switch (_context13.prev = _context13.next) {
                    case 0:
                      _context13.next = 2;
                      return encryptWithSymmetricKey(message, key);
                    case 2:
                      return _context13.abrupt("return", _context13.sent);
                    case 3:
                    case "end":
                      return _context13.stop();
                  }
                }, _callee13);
              }));
              function encrypt(_x17) {
                return _encrypt3.apply(this, arguments);
              }
              return encrypt;
            }(),
            decrypt: function () {
              var _decrypt3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(encryptedMessage) {
                return _regeneratorRuntime().wrap(function _callee14$(_context14) {
                  while (1) switch (_context14.prev = _context14.next) {
                    case 0:
                      _context14.next = 2;
                      return decryptWithSymmetricKey(encryptedMessage, key);
                    case 2:
                      return _context14.abrupt("return", _context14.sent);
                    case 3:
                    case "end":
                      return _context14.stop();
                  }
                }, _callee14);
              }));
              function decrypt(_x18) {
                return _decrypt3.apply(this, arguments);
              }
              return decrypt;
            }()
          });
        case 4:
        case "end":
          return _context15.stop();
      }
    }, _callee15);
  }));
  return function getSymmetricKeyEncryptionMethods() {
    return _ref11.apply(this, arguments);
  };
}()));


/***/ }),

/***/ 34541:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   hN: () => (/* binding */ useNotification),
/* harmony export */   n: () => (/* binding */ SnackbarProvider)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50318);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var notistack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7514);
/* harmony import */ var _mui_icons_material_Close__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(39781);
/* harmony import */ var _mui_material_IconButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11641);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(71468);
/* harmony import */ var _blockchain_Blockchain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34431);
/* harmony import */ var _blockchain_chains_profileChain__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85026);







var SnackbarProvider = function SnackbarProvider(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(notistack__WEBPACK_IMPORTED_MODULE_1__/* .SnackbarProvider */ .n, {
    maxSnack: 3,
    preventDuplicate: true,
    anchorOrigin: {
      vertical: "top",
      horizontal: "center"
    },
    autoHideDuration: 2000,
    action: function action(snackbarId) {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A, {
        "aria-label": "delete",
        onClick: function onClick() {
          return (0,notistack__WEBPACK_IMPORTED_MODULE_1__/* .closeSnackbar */ .mk)(snackbarId);
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_mui_icons_material_Close__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .A, {
        style: {
          color: "#fff"
        }
      }));
    }
  }, children);
};
var useNotification = function useNotification() {
  var _compiledProfile$sett, _compiledProfile$sett2;
  var _useSnackbar = (0,notistack__WEBPACK_IMPORTED_MODULE_1__/* .useSnackbar */ .dh)(),
    enqueueSnackbar = _useSnackbar.enqueueSnackbar;
  var storedBlockchain = (0,react_redux__WEBPACK_IMPORTED_MODULE_6__/* .useSelector */ .d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var _useBlockchain = (0,_blockchain_Blockchain__WEBPACK_IMPORTED_MODULE_2__/* .useBlockchain */ .o)({
      compiler: _blockchain_chains_profileChain__WEBPACK_IMPORTED_MODULE_3__/* .compiler */ .c,
      blockchain: storedBlockchain
    }),
    compiledProfile = _useBlockchain.compiledBlockchain;
  var storedInAppNotification = compiledProfile === null || compiledProfile === void 0 || (_compiledProfile$sett = compiledProfile.settings) === null || _compiledProfile$sett === void 0 ? void 0 : _compiledProfile$sett.inAppNotification;
  var storedBrowserNotification = compiledProfile === null || compiledProfile === void 0 || (_compiledProfile$sett2 = compiledProfile.settings) === null || _compiledProfile$sett2 === void 0 ? void 0 : _compiledProfile$sett2.browserNotification;

  // const storedInAppNotification = useSelector(state => state.userProfile.inAppNotification);
  // const storedBrowserNotification = useSelector(state => state.userProfile.browserNotification);

  return function (message) {
    for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      props[_key - 1] = arguments[_key];
    }
    // Check if the browser supports notifications
    console.log({
      storedInAppNotification: storedInAppNotification,
      storedBrowserNotification: storedBrowserNotification,
      Notification: window.Notification,
      hidden: document.hidden,
      message: message,
      props: props
    });
    try {
      var _window$Notification, _window$Notification2, _window$Notification3, _window$Notification4;
      if (storedBrowserNotification && !("Notification" in window) || typeof window.Notification === "undefined") {
        alert("This browser does not support desktop notification");
      }

      // Check if permission is already granted
      else if (((_window$Notification = window.Notification) === null || _window$Notification === void 0 ? void 0 : _window$Notification.permission) === "granted") {
        if (document.hidden) {
          // If it's okay, let's create a notification
          if (storedBrowserNotification) {
            var notification = new window.Notification(message);
          }
        }
      }

      // Check if permission is already granted
      else if (((_window$Notification2 = window.Notification) === null || _window$Notification2 === void 0 ? void 0 : _window$Notification2.permission) === "denied") {
        // If it's okay, let's create a notification
        if (storedInAppNotification) {
          enqueueSnackbar.apply(void 0, [message].concat(props));
        }
      }

      // Otherwise, we need to ask the user for permission
      else if (storedBrowserNotification && (((_window$Notification3 = window.Notification) === null || _window$Notification3 === void 0 ? void 0 : _window$Notification3.permission) !== "denied" || ((_window$Notification4 = window.Notification) === null || _window$Notification4 === void 0 ? void 0 : _window$Notification4.permission) === "default")) {
        var _window$Notification5;
        (_window$Notification5 = window.Notification) === null || _window$Notification5 === void 0 || _window$Notification5.requestPermission(function (permission) {
          // If the user accepts, let's create a notification
          if (permission === "granted") {
            var _notification = new window.Notification(message);
          }
        });
      }
      if (storedInAppNotification || props[0].insist) {
        enqueueSnackbar.apply(void 0, [message].concat(props));
      }
    } catch (e) {
      console.log(e);
    }
  };
};


/***/ }),

/***/ 44188:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ PeerProvider),
/* harmony export */   y: () => (/* binding */ PeerContext)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50318);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(71468);
/* harmony import */ var _redux_slices_userProfileSlice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14279);
/* harmony import */ var _blockchain_Blockchain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34431);
/* harmony import */ var _blockchain_chains_profileChain__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85026);
/* harmony import */ var _encryption_Encryption__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(89091);
/* harmony import */ var peerjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(24102);
/* harmony import */ var chance__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(97677);
/* harmony import */ var chance__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(chance__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _cryptography_Cryptography__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(46525);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }









var chance = new (chance__WEBPACK_IMPORTED_MODULE_4___default())();
var PeerContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)();
var peer = null;
var setPeer = function setPeer(newState) {
  return peer = newState;
};
var pendingCallbacks = [];
var setPendingCallbacks = function setPendingCallbacks(newState) {
  return pendingCallbacks = newState;
};
var connections = {};
var setConnections = function setConnections(newState) {
  return connections = newState;
};
var calls = [];
var setCalls = function setCalls(newState) {
  return calls = newState;
};
var streams = [];
var setStreams = function setStreams(newState) {
  return streams = newState;
};
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
  this.push = function () {};
}
function PeerProvider(_ref) {
  var _compiledProfile$agre;
  var children = _ref.children,
    appiSchema = _ref.appiSchema,
    onConnection = _ref.onConnection,
    managedState = _ref.managedState;
  // const [peer, setPeer] = useState(null);
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(chance.hash()),
    _useState2 = _slicedToArray(_useState, 2),
    peerHash = _useState2[0],
    setPeerHash = _useState2[1];
  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),
    _useState4 = _slicedToArray(_useState3, 2),
    activeConnections = _useState4[0],
    setActiveConnections = _useState4[1];
  var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),
    _useState6 = _slicedToArray(_useState5, 2),
    peerEncryptionKeys = _useState6[0],
    setPeerEncryptionKeys = _useState6[1];
  // const [connections, setConnections] = useState({});
  // const [calls, setCalls] = useState([]);
  var _useState7 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(chance.hash()),
    _useState8 = _slicedToArray(_useState7, 2),
    callsHash = _useState8[0],
    setCallsHash = _useState8[1];
  // const [streams, setStreams] = useState([]);

  var storedBlockchain = (0,react_redux__WEBPACK_IMPORTED_MODULE_6__/* .useSelector */ .d4)(function (state) {
    return state.userProfile.blockchain;
  });
  var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_6__/* .useDispatch */ .wA)();
  var addToBlockchainDispatch = function addToBlockchainDispatch(podId, blocks, block, storage) {
    return dispatch((0,_redux_slices_userProfileSlice__WEBPACK_IMPORTED_MODULE_1__/* .addToBlockchain */ .XE)({
      podId: podId,
      blocks: blocks,
      block: block,
      storage: storage,
      append: true
    }));
  };
  var _useBlockchain = (0,_blockchain_Blockchain__WEBPACK_IMPORTED_MODULE_2__/* .useBlockchain */ .o)({
      compiler: _blockchain_chains_profileChain__WEBPACK_IMPORTED_MODULE_3__/* .compiler */ .c,
      blockchain: storedBlockchain,
      dispatch: addToBlockchainDispatch
    }),
    compiledProfile = _useBlockchain.compiledBlockchain,
    addBlocksToProfile = _useBlockchain.addBlocks;
  var storedPeerId = compiledProfile.connectionId;
  var agreedToTerms = (_compiledProfile$agre = compiledProfile.agreedToTerms) === null || _compiledProfile$agre === void 0 ? void 0 : _compiledProfile$agre.length;

  // const storedPeerId = useSelector((state) => state.userProfile.connectionId);
  // const agreedToTerms = useSelector((state) => state.userProfile.agreedToTerms?.length);
  // const dispatch = useDispatch();
  // const setPeerId = (peerId) => console.log('setPeerId', peerId) && dispatch(updatePeerId(peerId));

  var setPeerId = function setPeerId(peerId) {
    var newBlocks = _toConsumableArray((0,_blockchain_chains_profileChain__WEBPACK_IMPORTED_MODULE_3__/* .blockBuilders */ .e)().updateConnectionId({
      from: storedPeerId,
      connectionId: peerId
    }));

    // setPeerHash(chance.hash());
    // setTimeout(() => setPeerHash(chance.hash()), 1000);
    addBlocksToProfile(newBlocks);
  };
  var encryptionKeys = (0,react_redux__WEBPACK_IMPORTED_MODULE_6__/* .useSelector */ .d4)(function (state) {
    return state.encryption;
  });
  var peerOnDataHandler = function peerOnDataHandler(data, connection) {
    return handleConnectionDataWithManagedState(connection, managedState, data);
  };
  var peerConnectionHandler = function peerConnectionHandler(connection) {
    // const newListener = data => peerOnDataHandler(data, connection);
    // const newListener = (data) => new EE(data => peerOnDataHandler(data, connection))
    try {
      connection.off("data");
    } catch (err) {
      console.log("error removing data listener", err);
    }
    connection.on("data", function (data) {
      return peerOnDataHandler(data, connection);
    });
    if (peer) {
      try {
        peer.off("connection");
      } catch (err) {
        console.log("error peer connection data listener", err);
      }
      try {
        peer.off("call");
      } catch (err) {
        console.log("error peer connection call listener", err);
      }
      peer.on("connection", function (connection) {
        console.log("new connection");
        connection.on("close", function (connection) {
          var _calls$find;
          console.log("peer closed", connection);
          setConnections(function (connections) {
            var newConnections = _objectSpread({}, connections);
            delete newConnections[connection === null || connection === void 0 ? void 0 : connection.peer];
            return newConnections;
          });
          setActiveConnections(Object.keys(connections).filter(function (c) {
            return c !== (connection === null || connection === void 0 ? void 0 : connection.peer);
          }));
          var remoteStreamId = (_calls$find = calls.find(function (call) {
            return call.peer !== (connection === null || connection === void 0 ? void 0 : connection.peer);
          })) === null || _calls$find === void 0 || (_calls$find = _calls$find._remoteStream) === null || _calls$find === void 0 ? void 0 : _calls$find.id;
          setCalls(calls.filter(function (call) {
            return call.peer !== (connection === null || connection === void 0 ? void 0 : connection.peer);
          }));
          setCallsHash(chance.hash());
          // setPeerHash(chance.hash());
        });
        onConnection(connection, sendMessageWithCallback, managedState, Object.keys(connections).filter(function (c) {
          return c !== (connection === null || connection === void 0 ? void 0 : connection.peer);
        }));
        setConnections(_objectSpread(_objectSpread({}, connections), {}, _defineProperty({}, connection.peer, connection)));
        setActiveConnections([].concat(_toConsumableArray(Object.keys(connections)), [connection.peer]));
        // setPeerHash(chance.hash());
      });
      peer.on("call", /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(call) {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                console.log("call received", call);
                call.on("stream", function (stream) {
                  console.log("stream received from remote", stream);
                  // setStreams((streams) => {
                  //     // do not add stream if it is already set
                  //     if (streams.find((s) => s.id === stream.id)) {
                  //         return streams;
                  //     }
                  //     return [...streams, stream];
                  // });
                });
                call.on("close", function () {
                  endCall(call.peer);
                });
                setCalls([].concat(_toConsumableArray(calls), [call]));
                setCallsHash(chance.hash());
              case 5:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
  };
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    var activeConnectionsToManage = activeConnections.map(function (c) {
      return connections[c];
    });
    activeConnectionsToManage.forEach(function (connection) {
      // const newListener = new EE(data => peerOnDataHandler(data, connection))
      // connection.close();
      // connectToPeer(connection.peer)
      // debugger;
      // console.log('>>>>>> setting data handler')
      // connection.off('data', data => peerOnDataHandler(data, connection));
      // connection.on('data', data => peerOnDataHandler(data, connection));
      // if (connection._events) {
      //     connection._events.data = newListener;
      // }

      // const newListener = data => peerOnDataHandler(data, connection);
      // connection.off('data', newListener);
      // connection.on('data', newListener);
      peerConnectionHandler(connection);
    });
    // // activeConnections.forEach(peerId => connectToPeer(peerId))
  }, [managedState, activeConnections, callsHash, peerHash]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    var deserializedEncryptionKeys = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var keyPairs;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return Promise.all(Object.keys(encryptionKeys).map( /*#__PURE__*/function () {
                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(userId) {
                  var _encryptionKeys$userI, privateKey, remotePublicKey, symmetricKey, established, deserializedPrivateKey, deserializedRemotePublicKey, deserializedSymmetricKey, setClassPropsFromJson;
                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                    while (1) switch (_context2.prev = _context2.next) {
                      case 0:
                        setClassPropsFromJson = function _setClassPropsFromJso(json, instance) {
                          for (var prop in json) {
                            if (json.hasOwnProperty(prop)) {
                              instance[prop] = json[prop];
                            }
                          }
                          return instance;
                        };
                        _encryptionKeys$userI = encryptionKeys[userId], privateKey = _encryptionKeys$userI.privateKey, remotePublicKey = _encryptionKeys$userI.remotePublicKey, symmetricKey = _encryptionKeys$userI.symmetricKey, established = _encryptionKeys$userI.established;
                        _context2.t0 = privateKey;
                        if (!_context2.t0) {
                          _context2.next = 7;
                          break;
                        }
                        _context2.next = 6;
                        return window.crypto.subtle.importKey("jwk", _objectSpread(_objectSpread({}, privateKey), {}, {
                          kty: "RSA"
                        }), {
                          name: "RSA-OAEP",
                          hash: "SHA-256"
                        }, true, ["decrypt"]);
                      case 6:
                        _context2.t0 = _context2.sent;
                      case 7:
                        deserializedPrivateKey = _context2.t0;
                        _context2.t1 = remotePublicKey;
                        if (!_context2.t1) {
                          _context2.next = 13;
                          break;
                        }
                        _context2.next = 12;
                        return window.crypto.subtle.importKey("jwk", _objectSpread(_objectSpread({}, remotePublicKey), {}, {
                          kty: "RSA"
                        }), {
                          name: "RSA-OAEP",
                          hash: "SHA-256"
                        }, true, ["encrypt"]);
                      case 12:
                        _context2.t1 = _context2.sent;
                      case 13:
                        deserializedRemotePublicKey = _context2.t1;
                        _context2.t2 = symmetricKey;
                        if (!_context2.t2) {
                          _context2.next = 19;
                          break;
                        }
                        _context2.next = 18;
                        return window.crypto.subtle.importKey("jwk", _objectSpread(_objectSpread({}, symmetricKey), {}, {
                          kty: "oct"
                        }), {
                          name: "AES-GCM",
                          length: 256
                        }, true, ["encrypt", "decrypt"]);
                      case 18:
                        _context2.t2 = _context2.sent;
                      case 19:
                        deserializedSymmetricKey = _context2.t2;
                        return _context2.abrupt("return", {
                          userId: userId,
                          privateKey: setClassPropsFromJson(privateKey, deserializedPrivateKey),
                          // {...deserializedPrivateKey, ...privateKey},
                          remotePublicKey: setClassPropsFromJson(remotePublicKey, deserializedRemotePublicKey),
                          // {...deserializedRemotePublicKey, ...remotePublicKey},
                          symmetricKey: setClassPropsFromJson(symmetricKey, deserializedSymmetricKey),
                          // {...deserializedSymmetricKey, ...symmetricKey},
                          established: established
                        });
                      case 21:
                      case "end":
                        return _context2.stop();
                    }
                  }, _callee2);
                }));
                return function (_x2) {
                  return _ref4.apply(this, arguments);
                };
              }()));
            case 2:
              keyPairs = _context3.sent;
              setPeerEncryptionKeys(keyPairs);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      return function deserializedEncryptionKeys() {
        return _ref3.apply(this, arguments);
      };
    }();
    deserializedEncryptionKeys();
  }, [encryptionKeys]);
  var handleConnectionData = /*#__PURE__*/function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(connection, managedState, rawData) {
      var _peerEncryptionKeys$f;
      var state, _ref6, privateKey, remotePublicKey, established, symmetricKey, data, callback, _managedState$contact, request, response, next;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            state = managedState;
            _ref6 = (_peerEncryptionKeys$f = peerEncryptionKeys.find(function (keyPair) {
              return keyPair.userId === connection.peer;
            })) !== null && _peerEncryptionKeys$f !== void 0 ? _peerEncryptionKeys$f : {}, privateKey = _ref6.privateKey, remotePublicKey = _ref6.remotePublicKey, established = _ref6.established, symmetricKey = _ref6.symmetricKey;
            data = rawData;
            if (!symmetricKey) {
              _context5.next = 17;
              break;
            }
            _context5.prev = 4;
            _context5.t0 = JSON;
            _context5.next = 8;
            return (0,_encryption_Encryption__WEBPACK_IMPORTED_MODULE_7__/* .decryptWithSymmetricKey */ .aq)(rawData, symmetricKey);
          case 8:
            _context5.t1 = _context5.sent;
            data = _context5.t0.parse.call(_context5.t0, _context5.t1);
            console.log("decrypted symmetric", data);
            _context5.next = 17;
            break;
          case 13:
            _context5.prev = 13;
            _context5.t2 = _context5["catch"](4);
            console.log("error decrypting symmetric", _context5.t2, rawData);
            data = rawData;
          case 17:
            if (!data.callback) {
              _context5.next = 23;
              break;
            }
            callback = pendingCallbacks.find(function (cb) {
              return cb.id === data.callback;
            });
            if (!callback) {
              _context5.next = 23;
              break;
            }
            callback.recieved(data.payload);
            setPendingCallbacks(pendingCallbacks.filter(function (cb) {
              return cb.id !== data.callback;
            }));
            return _context5.abrupt("return");
          case 23:
            if (data.type && appiSchema[data.type] && appiSchema[data.type](state).length) {
              request = {
                payload: data.payload,
                // get sender from contacts by connectionId
                sender: (_managedState$contact = managedState.contacts.find(function (contact) {
                  return contact.connectionId === connection.peer;
                })) === null || _managedState$contact === void 0 ? void 0 : _managedState$contact.id
              };
              response = {
                send: function () {
                  var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(payload) {
                    var payloadToSend;
                    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                      while (1) switch (_context4.prev = _context4.next) {
                        case 0:
                          payloadToSend = {
                            payload: payload,
                            callback: data.callback
                          };
                          if (!symmetricKey) {
                            _context4.next = 5;
                            break;
                          }
                          _context4.next = 4;
                          return (0,_encryption_Encryption__WEBPACK_IMPORTED_MODULE_7__/* .encryptWithSymmetricKey */ .eE)(JSON.stringify({
                            payload: payload,
                            callback: data.callback
                          }), symmetricKey)["catch"](function (err) {
                            console.log("error encrypting", err);
                          });
                        case 4:
                          payloadToSend = _context4.sent;
                        case 5:
                          connection.send(payloadToSend);
                        case 6:
                        case "end":
                          return _context4.stop();
                      }
                    }, _callee4);
                  }));
                  function send(_x6) {
                    return _send.apply(this, arguments);
                  }
                  return send;
                }()
              };
              next = function next(index) {
                if (index < appiSchema[data.type](state).length) {
                  appiSchema[data.type](state)[index](request, response, function () {
                    next(index + 1);
                  });
                }
              };
              next(0);
            }
          case 24:
          case "end":
            return _context5.stop();
        }
      }, _callee5, null, [[4, 13]]);
    }));
    return function handleConnectionData(_x3, _x4, _x5) {
      return _ref5.apply(this, arguments);
    };
  }();
  var handleConnectionDataWithManagedState = function handleConnectionDataWithManagedState(connection, managedState, data) {
    return handleConnectionData(connection, managedState, data);
  };
  var disconnectFromPeer = function disconnectFromPeer(peerId) {
    if (connections[peerId]) {
      connections[peerId].close();
      setConnections(_objectSpread(_objectSpread({}, connections), {}, _defineProperty({}, peerId, null)));
      setActiveConnections(Object.keys(connections).filter(function (c) {
        return c !== peerId;
      }));
    }
  };
  var connectToAllContacts = function connectToAllContacts(peer) {
    // filter connected contacts and connect to the ones not connected.
    var connectedContacts = Object.keys(connections).filter(function (contact) {
      var _connections$contact;
      return ((_connections$contact = connections[contact]) === null || _connections$contact === void 0 || (_connections$contact = _connections$contact.peerConnection) === null || _connections$contact === void 0 ? void 0 : _connections$contact.iceConnectionState) === "connected";
    });
    var contactsToConnect = managedState.contacts.filter(function (contact) {
      return !connectedContacts.includes(contact.connectionId);
    });
    contactsToConnect.forEach(function (contact) {
      return connectToPeer(contact.connectionId, peer);
    });

    // filter connected contacts and disconnect from the ones not in the contacts list.
    var contactsToDisconnect = connectedContacts.filter(function (contact) {
      return !managedState.contacts.find(function (c) {
        return c.connectionId === contact;
      });
    }).map(function (contact) {
      return contact.connectionId;
    });
    var disconnectedContacts = Object.keys(connections).filter(function (contact) {
      var _connections$contact2;
      return ((_connections$contact2 = connections[contact]) === null || _connections$contact2 === void 0 || (_connections$contact2 = _connections$contact2.peerConnection) === null || _connections$contact2 === void 0 ? void 0 : _connections$contact2.iceConnectionState) === "disconnected";
    });
    [].concat(_toConsumableArray(contactsToDisconnect), _toConsumableArray(disconnectedContacts)).forEach(function (contact) {
      return disconnectFromPeer(contact);
    });
  };
  var handlePeerInitialisation = function handlePeerInitialisation(newPeer) {
    try {
      newPeer.off("open");
    } catch (err) {
      console.log("error removing open listener", err);
    }
    try {
      newPeer.off("disconnected");
    } catch (err) {
      console.log("error removing open listener", err);
    }
    try {
      newPeer.off("close");
    } catch (err) {
      console.log("error removing open listener", err);
    }
    newPeer.on("open", function (id) {
      console.log("My peer ID is: " + id);
      // setPeerId(id);
      setPeer(newPeer);
      setPeerHash(chance.hash());

      // setInterval(() => {
      //     connectToAllContacts(newPeer)
      // }, 5000);
      connectToAllContacts(newPeer);
    });
    newPeer.on("disconnected", function () {
      var _console;
      for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {
        rest[_key] = arguments[_key];
      }
      (_console = console).log.apply(_console, ["peer disconnected"].concat(rest));
      newPeer.reconnect();
      setPeer(null);
      setPeerHash(chance.hash());
    });
    newPeer.on("close", function (connection) {
      console.log("peer closed", connection);
      setPeer(null);
      setPeerHash(chance.hash());
    });
  };
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    if (!peer && !!storedPeerId && !!agreedToTerms) {
      var newPeer = new peerjs__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Ay(storedPeerId, {
        host: (compiledProfile === null || compiledProfile === void 0 ? void 0 : compiledProfile.peerjsServer) || "0.peerjs.com"
      });
      console.log("peer created");
      handlePeerInitialisation(newPeer);
    } else {
      if (!storedPeerId) {
        if (peer) {
          peer.destroy();
        }
        // generate a long random string
        var newPeerId = chance.hash();
        setPeerId(newPeerId);
        setPeer(null);
        setPeerHash(chance.hash());
      }
    }
  }, [storedPeerId, agreedToTerms]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    var newActiveConnections = Object.keys(connections).filter(function (c) {
      var _connections$c;
      return ((_connections$c = connections[c]) === null || _connections$c === void 0 || (_connections$c = _connections$c.peerConnection) === null || _connections$c === void 0 ? void 0 : _connections$c.iceConnectionState) === "connected";
    });
    if (newActiveConnections.length !== activeConnections.length || !newActiveConnections.every(function (c) {
      return activeConnections.includes(c);
    })) {
      console.log({
        newActiveConnections: newActiveConnections,
        activeConnections: activeConnections
      });
      setActiveConnections(newActiveConnections);
      setPeerHash(chance.hash());
    }

    // setTimeout(() => setPeerHash(chance.hash()), 5000);
  }, [peerHash]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    if (peer) {
      // peer.off('connection');
      peer.on("connection", function (connection) {
        console.log("new connection");
        // initConnectionListender();
        // connection.on('data', (data) => handleConnectionDataWithManagedState(connection, managedState, data));

        // setInterval(() => {
        // const newListener = data => peerOnDataHandler(data, connection);
        // connection.off('data', newListener);
        // connection.on('data', newListener);
        // }, 1000);

        connection.on("close", function (connection) {
          var _calls$find2;
          console.log("peer closed", connection);

          // setConnections({ ...connections, [connection?.peer]: null });
          // useSetConnections to remove the key wuth the connection id from the connections object
          setConnections(function (connections) {
            var newConnections = _objectSpread({}, connections);
            delete newConnections[connection === null || connection === void 0 ? void 0 : connection.peer];
            return newConnections;
          });
          setActiveConnections(Object.keys(connections).filter(function (c) {
            return c !== (connection === null || connection === void 0 ? void 0 : connection.peer);
          }));
          var remoteStreamId = (_calls$find2 = calls.find(function (call) {
            return call.peer !== (connection === null || connection === void 0 ? void 0 : connection.peer);
          })) === null || _calls$find2 === void 0 || (_calls$find2 = _calls$find2._remoteStream) === null || _calls$find2 === void 0 ? void 0 : _calls$find2.id;

          // const newStreams = streams.filter((stream) => stream.id !== remoteStreamId);

          setCalls(calls.filter(function (call) {
            return call.peer !== (connection === null || connection === void 0 ? void 0 : connection.peer);
          }));
          setCallsHash(chance.hash());

          // setStreams(newStreams);
        });
        onConnection(connection, sendMessageWithCallback, managedState, Object.keys(connections).filter(function (c) {
          return c !== (connection === null || connection === void 0 ? void 0 : connection.peer);
        }));
        setConnections(_objectSpread(_objectSpread({}, connections), {}, _defineProperty({}, connection.peer, connection)));
        setActiveConnections([].concat(_toConsumableArray(Object.keys(connections)), [connection.peer]));
      });
      peer.on("call", /*#__PURE__*/function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(call) {
          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) switch (_context6.prev = _context6.next) {
              case 0:
                console.log("call received", call);
                call.on("stream", function (stream) {
                  console.log("stream received from remote", stream);
                  // setStreams((streams) => {
                  //     // do not add stream if it is already set
                  //     if (streams.find((s) => s.id === stream.id)) {
                  //         return streams;
                  //     }
                  //     return [...streams, stream];
                  // });
                });
                call.on("close", function () {
                  endCall(call.peer);
                });
                setCalls([].concat(_toConsumableArray(calls), [call]));
                setCallsHash(chance.hash());
              case 5:
              case "end":
                return _context6.stop();
            }
          }, _callee6);
        }));
        return function (_x7) {
          return _ref7.apply(this, arguments);
        };
      }());
    }
  }, [peerHash, managedState, callsHash]);
  var getManagedState = function getManagedState() {
    return managedState;
  };
  var connectToPeer = function connectToPeer(peerId, peerOverride) {
    var _ref8;
    var connection = (_ref8 = peerOverride !== null && peerOverride !== void 0 ? peerOverride : peer) === null || _ref8 === void 0 ? void 0 : _ref8.connect(peerId);
    if (connection) {
      connection.on("open", function () {
        console.log("connection opened");
        peerConnectionHandler(connection);
        // connection.on('data', (data) => handleConnectionDataWithManagedState(connection, managedState, data));

        // setInterval(() => {
        // const newListener = data => peerOnDataHandler(data, connection);
        // connection.off('data', newListener);
        // connection.on('data', newListener);
        // }, 1000);

        setConnections(_objectSpread(_objectSpread({}, connections), {}, _defineProperty({}, connection.peer, connection)));
        setActiveConnections([].concat(_toConsumableArray(Object.keys(connections)), [connection.peer]));
        onConnection(connection, sendMessageWithCallback, managedState, [].concat(_toConsumableArray(Object.keys(connections)), [connection.peer]));
      });
    }
  };
  var sendMessageWithCallback = /*#__PURE__*/function () {
    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(peerId, message, connection) {
      var id;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            id = Math.random().toString(36).substr(2, 9);
            return _context7.abrupt("return", new Promise(function (resolve, reject) {
              var timeout = setTimeout(function () {
                reject(new Error("timeout for message:" + JSON.stringify({
                  message: message
                })));
              }, 60000);
              setPendingCallbacks([].concat(_toConsumableArray(pendingCallbacks), [{
                id: id,
                recieved: function recieved(response) {
                  clearTimeout(timeout);
                  console.log("callback recieved!");
                  resolve(response);
                }
              }]));
              sendMessage(peerId, _objectSpread(_objectSpread({}, message), {}, {
                callback: id
              }), connection);
            }));
          case 2:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    }));
    return function sendMessageWithCallback(_x8, _x9, _x10) {
      return _ref9.apply(this, arguments);
    };
  }();
  var sendMessage = /*#__PURE__*/function () {
    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(peerId, message, connectionOverride) {
      var _peerEncryptionKeys$f2;
      var connection, _ref11, remotePublicKey, established, payloadToSend;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            connection = connectionOverride !== null && connectionOverride !== void 0 ? connectionOverride : connections[peerId];
            _ref11 = (_peerEncryptionKeys$f2 = peerEncryptionKeys.find(function (keyPair) {
              return keyPair.userId === peerId;
            })) !== null && _peerEncryptionKeys$f2 !== void 0 ? _peerEncryptionKeys$f2 : {}, remotePublicKey = _ref11.remotePublicKey, established = _ref11.established;
            if (!connection) {
              _context8.next = 9;
              break;
            }
            payloadToSend = _objectSpread({}, message);
            if (!(remotePublicKey && established)) {
              _context8.next = 8;
              break;
            }
            _context8.next = 7;
            return (0,_encryption_Encryption__WEBPACK_IMPORTED_MODULE_7__/* .encrypt */ .w)(JSON.stringify(message), remotePublicKey);
          case 7:
            payloadToSend = _context8.sent;
          case 8:
            connection.send(payloadToSend);
          case 9:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    }));
    return function sendMessage(_x11, _x12, _x13) {
      return _ref10.apply(this, arguments);
    };
  }();
  var makeCall = /*#__PURE__*/function () {
    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_ref12) {
      var peerId, video, audio, screen, cast, stream, call;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            peerId = _ref12.peerId, video = _ref12.video, audio = _ref12.audio, screen = _ref12.screen, cast = _ref12.cast;
            if (!peerId) {
              _context9.next = 9;
              break;
            }
            _context9.next = 4;
            return navigator.mediaDevices[screen ? "getDisplayMedia" : "getUserMedia"]({
              video: cast ? {
                facingMode: "environment"
              } : !!video,
              audio: audio ? true : false
            });
          case 4:
            stream = _context9.sent;
            call = peer.call(peerId, stream, {
              metadata: {
                cast: cast
              }
            });
            call.on("stream", function (stream) {
              // B
              // window.remoteAudio.srcObject = stream; // C
              // window.remoteAudio.autoplay = true; // D
              // window.peerStream = stream; //E
              // showConnectedContent(); //F    });
              console.log("stream received", stream);
              // setStreams((streams) => {
              //     // do not add stream if it is already set
              //     if (streams.find((s) => s.id === stream.id)) {
              //         return streams;
              //     }
              //     return [...streams, stream];
              // });
            });
            setCalls([].concat(_toConsumableArray(calls), [call]));
            setCallsHash(chance.hash());
          case 9:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    }));
    return function makeCall(_x14) {
      return _ref13.apply(this, arguments);
    };
  }();
  var endCall = function endCall(peerId) {
    var call = calls.find(function (call) {
      return call.peer === peerId;
    });
    call.close();
    setCalls(calls.filter(function (call) {
      return call.peer !== peerId;
    }));
    setCallsHash(chance.hash());
  };
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PeerContext.Provider, {
    value: {
      peer: peer,
      activeConnections: activeConnections,
      connections: connections,
      connectToPeer: connectToPeer,
      sendMessage: sendMessage,
      sendMessageWithCallback: sendMessageWithCallback,
      calls: calls,
      streams: streams,
      callsLength: calls.length,
      makeCall: makeCall,
      endCall: endCall,
      peerHash: peerHash,
      callsHash: callsHash
    }
  }, children);
}

/***/ }),

/***/ 76538:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ usePeer)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50318);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _PeerProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44188);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["recipients"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// create a react hook that uses the peer context
// it can take a peerId and provides helper methods to send and receive messages
// it can also take a group and provides helper methods to send and receive messages to all users in the group



function usePeer(peersToConnect) {
  var context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_PeerProvider__WEBPACK_IMPORTED_MODULE_1__/* .PeerContext */ .y);
  // check to see if peer is connected else connect to them
  var activeConnections = context.activeConnections;
  var connectedPeers = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {
    return activeConnections;
  }, [activeConnections]);
  var filteredPeersToConnect = Array.isArray(peersToConnect) ? peersToConnect.filter(function (peerId) {
    var _context$peer;
    return peerId !== ((_context$peer = context.peer) === null || _context$peer === void 0 ? void 0 : _context$peer.id);
  }).filter(function (peerId) {
    return !!peerId && !connectedPeers.includes(peerId);
  }) : [peersToConnect];
  filteredPeersToConnect.forEach(function (peerId) {
    if (peerId) {
      context.connectToPeer(peerId);
    }
  });

  // a method to send a message to a peer or group depending on if peerId or group is passed in
  var sendMessage = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
      var type, recipients, payload, _ref$callback, callback, responses;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            type = _ref.type, recipients = _ref.recipients, payload = _ref.payload, _ref$callback = _ref.callback, callback = _ref$callback === void 0 ? true : _ref$callback;
            _context.next = 3;
            return Promise.all((recipients || peersToConnect).filter(function (peerId) {
              return peerId && context.connections[peerId];
            }).map(function (peerId) {
              if (!callback) {
                return context.sendMessage(peerId, {
                  type: type,
                  payload: payload
                });
              }
              return context.sendMessageWithCallback(peerId, {
                type: type,
                payload: payload
              });
            }));
          case 3:
            responses = _context.sent;
            return _context.abrupt("return", responses);
          case 5:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function sendMessage(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  var makeCall = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var _ref4,
        recipients,
        rest,
        _args3 = arguments;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _ref4 = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {}, recipients = _ref4.recipients, rest = _objectWithoutProperties(_ref4, _excluded);
            (recipients || peersToConnect).filter(function (peerId) {
              var _context$peer2;
              return peerId !== ((_context$peer2 = context.peer) === null || _context$peer2 === void 0 ? void 0 : _context$peer2.id);
            }).forEach( /*#__PURE__*/function () {
              var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(peerId) {
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      if (context.calls.find(function (call) {
                        return call.peer === peerId;
                      })) {
                        _context2.next = 3;
                        break;
                      }
                      _context2.next = 3;
                      return context.makeCall(_objectSpread({
                        peerId: peerId
                      }, rest));
                    case 3:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2);
              }));
              return function (_x2) {
                return _ref5.apply(this, arguments);
              };
            }());
          case 2:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return function makeCall() {
      return _ref3.apply(this, arguments);
    };
  }();
  var endCall = function endCall() {
    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      recipients = _ref6.recipients;
    (recipients || peersToConnect).filter(function (peerId) {
      var _context$peer3;
      return peerId !== ((_context$peer3 = context.peer) === null || _context$peer3 === void 0 ? void 0 : _context$peer3.id);
    }).forEach( /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(peerId) {
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              context.endCall(peerId);
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      return function (_x3) {
        return _ref7.apply(this, arguments);
      };
    }());
  };

  // a method to make a call to a peer or a group depending on if peerId or group is passed in
  // const makeCall = () => {
  //     if (peerId) {
  //         context.makeCall({peerId});
  //     } else if (groupId) {
  //         const group = context.groups.find((group) => group.id === groupId);
  //         context.makeCall({groupId: group.id});
  //     }
  // };

  // a method to end a call
  // const endCall = () => {
  //     if (peerId) {
  //         context.endCall(peerId);
  //     } else if (groupId) {
  //         const group = context.groups.find((group) => group.id === groupId);
  //         group.users.forEach((user) => {
  //             context.endCall(user.id);
  //         });
  //     }
  // };

  // // for the peer or group specified, automatically handle incoming messages with the handler.
  // // the handler is an array of functions like middleware function in expressjs
  // useEffect(() => {
  //     if (handlers) {

  //     }
  //     if (peerId) {
  //         context.connections[peerId].on('data', (data) => {
  //             handlers.forEach((handler) => {
  //                 handler(data);
  //             });
  //         });
  //     } else if (groupId) {
  //         const group = context.groups.find((group) => group.id === groupId);
  //         group.users.forEach((user) => {
  //             context.connections[user.id].on('data', (data) => {
  //                 handlers.forEach((handler) => {
  //                     handler(data);
  //                 });
  //             });
  //         });
  //     }
  // }, [peerId, groupId, handlers]);

  return {
    peer: context.peer,
    sendMessage: sendMessage,
    makeCall: makeCall,
    endCall: endCall,
    activeConnections: context.activeConnections,
    connections: context.connections,
    connectToPeer: context.connectToPeer,
    calls: context.calls,
    // streams: context.calls.length > 0 ? context.calls.map(call => call._remoteStream) : [],
    callsLength: context.callsLength
  };
}

/***/ }),

/***/ 78179:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AZ: () => (/* binding */ updatePodName),
/* harmony export */   Ay: () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   E6: () => (/* binding */ removeFileFromPod),
/* harmony export */   MD: () => (/* binding */ removeUserFromConversationFromAllPods),
/* harmony export */   O: () => (/* binding */ createNewPod),
/* harmony export */   QT: () => (/* binding */ setPeerIsTyping),
/* harmony export */   XE: () => (/* binding */ addToBlockchain),
/* harmony export */   ZH: () => (/* binding */ updatePodUnreadCount),
/* harmony export */   d6: () => (/* binding */ setShouldHangup),
/* harmony export */   dN: () => (/* binding */ setEphemeralStorage),
/* harmony export */   gH: () => (/* binding */ removePod),
/* harmony export */   tj: () => (/* binding */ addMessage),
/* harmony export */   x7: () => (/* binding */ setPods),
/* harmony export */   zv: () => (/* binding */ addUserToPod)
/* harmony export */ });
/* unused harmony export removeUserFromConversation */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85268);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1932);
/* harmony import */ var _blockchain_Blockchain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34431);
/* harmony import */ var _blockchain_chains_podChain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53288);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2543);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }




var initialState = [];
var chatsSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__/* .createSlice */ .Z0)({
  name: "chats",
  initialState: initialState,
  reducers: {
    createNewPod: function createNewPod(state, action) {
      var _action$payload = action.payload,
        id = _action$payload.id,
        blocks = _action$payload.pendingBlocks,
        storage = _action$payload.pendingStorage;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      var chat = chats.find(function (chat) {
        return chat.id === id;
      });
      if (!chat) {
        // const podBlockchain = new Blockchain({chain: action.payload.blockchain.chain});
        // podBlockchain.addBlocks([
        //     ...action.payload.members.map(member => blockBuilders().addMember({userId: member, from: action.payload.from})[0]),
        //     ...blockBuilders().setPodName({name: action.payload.name, from: action.payload.from})
        // ]);
        // const pendingUpdates = podBlockchain.getUpdate();
        var newChat = _objectSpread(_objectSpread(_objectSpread({}, {
          id: "",
          users: [],
          name: "",
          avatar: "",
          messages: []
        }), action.payload), {}, {
          blockchain: {
            chain: _toConsumableArray(blocks),
            storage: _objectSpread({}, storage)
          }
        });
        chats = [].concat(_toConsumableArray(chats), [newChat]);
        return chats;
      }
      return chats;
    },
    removePod: function removePod(state, action) {
      // const index = state.findIndex(chat => chat.id === action.payload);
      // return state.splice(index, 1);
      var podId = action.payload.podId;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      chats = chats.filter(function (chat) {
        return chat.id !== podId;
      });
      return chats;
    },
    // =====================================================================
    addUserToPod: function addUserToPod(state, action) {
      var _action$payload2 = action.payload,
        podId = _action$payload2.podId,
        userId = _action$payload2.userId;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      var chat = chats.find(function (chat) {
        return chat.id === podId;
      });
      // chat.messages = [...chat.messages, message];

      chats = chats.map(function (chat) {
        return chat.id != podId ? chat : _objectSpread(_objectSpread({}, chat), {}, {
          members: [].concat(_toConsumableArray(chat.members.filter(function (m) {
            return m !== userId;
          })), [userId])
        });
      });
      return chats;
    },
    removeUserFromConversationFromAllPods: function removeUserFromConversationFromAllPods(state, action) {
      var userId = action.payload.userId;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      chats = chats.map(function (chat) {
        chat.members = chats.filter(function (member) {
          return member !== userId;
        });
      });
      return chats;
    },
    removeUserFromConversation: function removeUserFromConversation(state, action) {
      var _action$payload3 = action.payload,
        chatId = _action$payload3.chatId,
        userId = _action$payload3.userId;
      var chat = state.find(function (chat) {
        return chat.id === chatId;
      });
      var index = chat.members.findIndex(function (member) {
        return member === userId;
      });
      chat = _objectSpread(_objectSpread({}, chat), {}, {
        members: chat.members.filter(function (member) {
          return member !== userId;
        })
      });
      return state;
    },
    addMessage: function addMessage(state, action) {
      var _action$payload4 = action.payload,
        podId = _action$payload4.podId,
        message = _action$payload4.message;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      // let chat = chats.find(chat => chat.id === podId);
      // chat.messages = [...chat.messages, message];

      // chats = chats
      //     .map(chat => chat.id !== podId ? chat : { ...chat, messages: [...chat.messages, message] });
      return chats;
    },
    // =====================================================================
    updatePodName: function updatePodName(state, action) {
      var _action$payload5 = action.payload,
        podId = _action$payload5.podId,
        name = _action$payload5.name;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      var chat = chats.find(function (chat) {
        return chat.id === podId;
      });
      chats = chats.filter(function (chat) {
        return chat.id !== podId;
      }).concat(_objectSpread(_objectSpread({}, chat), {}, {
        name: name
      }));
      return chats;
    },
    updatePodUnreadCount: function updatePodUnreadCount(state, action) {
      var _action$payload6 = action.payload,
        podId = _action$payload6.podId,
        unreadCount = _action$payload6.unreadCount;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      // chats = chats.map(chat => chat.id !== podId ? chat : { ...chat, unreadCount: unreadCount === 0 ? 0 : chat.unreadCount + unreadCount });
      chats = chats.map(function (chat) {
        return chat.id !== podId ? chat : _objectSpread(_objectSpread({}, chat), {}, {
          unreadCount: unreadCount
        });
      });
      return chats;
    },
    setShouldHangup: function setShouldHangup(state, action) {
      var _action$payload7 = action.payload,
        podId = _action$payload7.podId,
        shouldHangup = _action$payload7.shouldHangup;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      chats = chats.map(function (chat) {
        return chat.id !== podId ? chat : _objectSpread(_objectSpread({}, chat), {}, {
          shouldHangup: shouldHangup
        });
      });
      return chats;
    },
    setPods: function setPods(state, action) {
      return action.payload;
    },
    setPeerIsTyping: function setPeerIsTyping(state, action) {
      var _action$payload8 = action.payload,
        podId = _action$payload8.podId,
        peerDisplayName = _action$payload8.peerDisplayName,
        isTyping = _action$payload8.isTyping;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      chats = chats.map(function (chat) {
        return chat.id !== podId ? chat : _objectSpread(_objectSpread({}, chat), {}, {
          peerIsTyping: _objectSpread(_objectSpread({}, chat.peerIsTyping), {}, _defineProperty({}, peerDisplayName, isTyping))
        });
      });
      return chats;
    },
    setEphemeralStorage: function setEphemeralStorage(state, action) {
      var _action$payload9 = action.payload,
        podId = _action$payload9.podId,
        ephemeralStorage = _action$payload9.ephemeralStorage;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      console.log("setting ephemeralStorage", ephemeralStorage);
      chats = chats.map(function (chat) {
        return chat.id !== podId ? chat : _objectSpread(_objectSpread({}, chat), {}, {
          ephemeralStorage: ephemeralStorage
        });
      });
      console.log({
        "new ephemera update": chats,
        podId: podId,
        ephemeralStorage: ephemeralStorage
      });
      return chats;
    },
    addToBlockchain: function addToBlockchain(state, action) {
      var _chats$find, _chat, _chat2, _chat3;
      var _action$payload10 = action.payload,
        podId = _action$payload10.podId,
        blocks = _action$payload10.blocks,
        block = _action$payload10.block,
        _action$payload10$sto = _action$payload10.storage,
        storage = _action$payload10$sto === void 0 ? {} : _action$payload10$sto,
        _action$payload10$app = _action$payload10.append,
        append = _action$payload10$app === void 0 ? false : _action$payload10$app;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      var chat = (_chats$find = chats.find(function (chat) {
        return chat.id === podId;
      })) !== null && _chats$find !== void 0 ? _chats$find : {};
      // const podBlockchain = new Blockchain({chain: chat.blockchain.chain, storage: chat.blockchain.storage});
      // if (blocks?.length > 0) podBlockchain.addBlocks(blocks, append);
      // if (block) podBlockchain.addBlock(block, append);
      // const pendingUpdates = podBlockchain.getUpdate();

      chat = _objectSpread(_objectSpread({}, chat), {}, {
        blockchain: _objectSpread(_objectSpread({}, ((_chat = chat) === null || _chat === void 0 ? void 0 : _chat.blockchain) || {}), {}, {
          chain: [].concat(_toConsumableArray(((_chat2 = chat) === null || _chat2 === void 0 || (_chat2 = _chat2.blockchain) === null || _chat2 === void 0 ? void 0 : _chat2.chain) || []), _toConsumableArray(blocks)),
          storage: _objectSpread(_objectSpread({}, storage), (_chat3 = chat) === null || _chat3 === void 0 || (_chat3 = _chat3.blockchain) === null || _chat3 === void 0 ? void 0 : _chat3.storage)
        })
      });
      chats = chats.map(function (c) {
        return c.id !== podId ? c : chat;
      });
      return chats;
    },
    removeFileFromPod: function removeFileFromPod(state, action) {
      var _chats$find2, _chat4, _chat5;
      var _action$payload11 = action.payload,
        podId = _action$payload11.podId,
        fileId = _action$payload11.fileId;
      var chats = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__/* .current */ .ss)(state);
      var chat = (_chats$find2 = chats.find(function (chat) {
        return chat.id === podId;
      })) !== null && _chats$find2 !== void 0 ? _chats$find2 : {};
      chat = _objectSpread(_objectSpread({}, chat), {}, {
        blockchain: _objectSpread(_objectSpread({}, ((_chat4 = chat) === null || _chat4 === void 0 ? void 0 : _chat4.blockchain) || {}), {}, {
          storage: _objectSpread(_objectSpread({}, (_chat5 = chat) === null || _chat5 === void 0 || (_chat5 = _chat5.blockchain) === null || _chat5 === void 0 ? void 0 : _chat5.storage), {}, _defineProperty({}, fileId, undefined))
        })
      });
      chats = chats.map(function (c) {
        return c.id !== podId ? c : chat;
      });
      return chats;
    }
  }
});
var _chatsSlice$actions = chatsSlice.actions,
  createNewPod = _chatsSlice$actions.createNewPod,
  removePod = _chatsSlice$actions.removePod,
  addUserToPod = _chatsSlice$actions.addUserToPod,
  removeUserFromConversationFromAllPods = _chatsSlice$actions.removeUserFromConversationFromAllPods,
  removeUserFromConversation = _chatsSlice$actions.removeUserFromConversation,
  addMessage = _chatsSlice$actions.addMessage,
  updatePodName = _chatsSlice$actions.updatePodName,
  updatePodUnreadCount = _chatsSlice$actions.updatePodUnreadCount,
  setPods = _chatsSlice$actions.setPods,
  setShouldHangup = _chatsSlice$actions.setShouldHangup,
  setPeerIsTyping = _chatsSlice$actions.setPeerIsTyping,
  setEphemeralStorage = _chatsSlice$actions.setEphemeralStorage,
  addToBlockchain = _chatsSlice$actions.addToBlockchain,
  removeFileFromPod = _chatsSlice$actions.removeFileFromPod;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (chatsSlice.reducer);

/***/ }),

/***/ 42040:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   O7: () => (/* binding */ addStorageItem)
/* harmony export */ });
/* unused harmony exports removeStorageItem, updateStorageItem, setStorageForPod */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85268);

var initialState = {};
var storageSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__/* .createSlice */ .Z0)({
  name: "storage",
  initialState: initialState,
  reducers: {
    addStorageItem: function addStorageItem(state, action) {
      var _action$payload = action.payload,
        podId = _action$payload.podId,
        item = _action$payload.item;
      if (!state[podId]) {
        state[podId] = [];
      }
      var existingItem = state[podId].find(function (existing) {
        return (existing === null || existing === void 0 ? void 0 : existing.sha) === item.sha;
      });
      if (!existingItem) {
        state[podId].push(item);
      }
    },
    removeStorageItem: function removeStorageItem(state, action) {
      var _action$payload2 = action.payload,
        podId = _action$payload2.podId,
        itemId = _action$payload2.itemId;
      if (state[podId]) {
        state[podId] = state[podId].filter(function (item) {
          return item.sha !== itemId;
        });
        if (state[podId].length === 0) {
          delete state[podId];
        }
      }
    },
    updateStorageItem: function updateStorageItem(state, action) {
      var _action$payload3 = action.payload,
        podId = _action$payload3.podId,
        updatedItem = _action$payload3.updatedItem;
      if (state[podId]) {
        var index = state[podId].findIndex(function (item) {
          return item.sha === updatedItem.sha;
        });
        if (index !== -1) {
          state[podId][index] = updatedItem;
        }
      }
    },
    setStorageForPod: function setStorageForPod(state, action) {
      var _action$payload4 = action.payload,
        podId = _action$payload4.podId,
        storage = _action$payload4.storage;
      state[podId] = storage;
    }
  }
});
var _storageSlice$actions = storageSlice.actions,
  addStorageItem = _storageSlice$actions.addStorageItem,
  removeStorageItem = _storageSlice$actions.removeStorageItem,
  updateStorageItem = _storageSlice$actions.updateStorageItem,
  setStorageForPod = _storageSlice$actions.setStorageForPod;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (storageSlice.reducer);

/***/ }),

/***/ 14279:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   IN: () => (/* binding */ setInAppNotification),
/* harmony export */   XE: () => (/* binding */ addToBlockchain),
/* harmony export */   c_: () => (/* binding */ setBrowserNotification),
/* harmony export */   jX: () => (/* binding */ updatePeerId),
/* harmony export */   kZ: () => (/* binding */ updateUsername),
/* harmony export */   p: () => (/* binding */ setUserProfile),
/* harmony export */   ri: () => (/* binding */ logout),
/* harmony export */   u2: () => (/* binding */ updateAgreedToTerms),
/* harmony export */   xG: () => (/* binding */ updateAvatar)
/* harmony export */ });
/* unused harmony exports userProfileSlice, setEncryptionSignature */
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85268);
/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1932);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }

var userProfileSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__/* .createSlice */ .Z0)({
  name: "userProfile",
  initialState: {
    displayName: "",
    id: null,
    connectionId: null,
    pastConnectionIds: [],
    avatar: "https://source.unsplash.com/random/400x200?avatar",
    agreedToTerms: [],
    inAppNotification: true,
    browserNotification: false,
    blockchain: {
      chain: [],
      storage: {}
    }
  },
  reducers: {
    addToBlockchain: function addToBlockchain(state, action) {
      var _profile, _profile2, _profile3;
      var _action$payload = action.payload,
        _action$payload$block = _action$payload.blocks,
        blocks = _action$payload$block === void 0 ? [] : _action$payload$block,
        block = _action$payload.block,
        _action$payload$stora = _action$payload.storage,
        storage = _action$payload$stora === void 0 ? {} : _action$payload$stora,
        _action$payload$appen = _action$payload.append,
        append = _action$payload$appen === void 0 ? false : _action$payload$appen;
      var profile = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__/* .current */ .ss)(state);
      profile = _objectSpread(_objectSpread({}, profile), {}, {
        blockchain: _objectSpread(_objectSpread({}, ((_profile = profile) === null || _profile === void 0 ? void 0 : _profile.blockchain) || {}), {}, {
          chain: [].concat(_toConsumableArray(((_profile2 = profile) === null || _profile2 === void 0 || (_profile2 = _profile2.blockchain) === null || _profile2 === void 0 ? void 0 : _profile2.chain) || []), _toConsumableArray(blocks), [block]).filter(function (b) {
            return !!b;
          }),
          storage: _objectSpread(_objectSpread({}, storage), (_profile3 = profile) === null || _profile3 === void 0 || (_profile3 = _profile3.blockchain) === null || _profile3 === void 0 ? void 0 : _profile3.storage)
        })
      });
      return profile;
    },
    updateUsername: function updateUsername(state, action) {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.displayName = action.payload;
    },
    updateAvatar: function updateAvatar(state, action) {
      state.avatar = action.payload;
    },
    updatePeerId: function updatePeerId(state, action) {
      var _state$pastConnection;
      (_state$pastConnection = state.pastConnectionIds) === null || _state$pastConnection === void 0 || _state$pastConnection.push(state.id);
      state.id = action.payload;
      state.connectionId = action.payload;
    },
    updateAgreedToTerms: function updateAgreedToTerms(state, action) {
      var newState = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__/* .current */ .ss)(state);
      state.agreedToTerms = [].concat(_toConsumableArray(newState.agreedToTerms), [action.payload]);
    },
    setUserProfile: function setUserProfile(state, action) {
      state.displayName = action.payload.displayName;
      state.id = action.payload.id;
      state.connectionId = action.payload.connectionId;
      state.pastConnectionIds = action.payload.pastConnectionIds;
      state.avatar = action.payload.avatar;
      state.agreedToTerms = action.payload.agreedToTerms;
    },
    setInAppNotification: function setInAppNotification(state, action) {
      state.inAppNotification = action.payload;
    },
    setBrowserNotification: function setBrowserNotification(state, action) {
      state.browserNotification = action.payload;
    },
    setEncryptionSignature: function setEncryptionSignature(state, action) {
      state.encryptionSignature = action.payload;
    },
    logout: function logout() {} // placeholder needed to generate dispatch function
  }
});

// Action creators are generated for each case reducer function
var _userProfileSlice$act = userProfileSlice.actions,
  updateUsername = _userProfileSlice$act.updateUsername,
  updatePeerId = _userProfileSlice$act.updatePeerId,
  updateAgreedToTerms = _userProfileSlice$act.updateAgreedToTerms,
  setUserProfile = _userProfileSlice$act.setUserProfile,
  updateAvatar = _userProfileSlice$act.updateAvatar,
  logout = _userProfileSlice$act.logout,
  setInAppNotification = _userProfileSlice$act.setInAppNotification,
  setBrowserNotification = _userProfileSlice$act.setBrowserNotification,
  addToBlockchain = _userProfileSlice$act.addToBlockchain,
  setEncryptionSignature = _userProfileSlice$act.setEncryptionSignature;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (userProfileSlice.reducer);

/***/ }),

/***/ 63141:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   e: () => (/* binding */ languages)
/* harmony export */ });
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(72635);
/* harmony import */ var i18next_browser_languagedetector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(90796);
/* harmony import */ var i18next_http_backend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1347);
/* harmony import */ var react_i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(32389);




i18next__WEBPACK_IMPORTED_MODULE_0__/* ["default"].use */ .Ay.use(i18next_browser_languagedetector__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A).use(i18next_http_backend__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A).use(react_i18next__WEBPACK_IMPORTED_MODULE_3__/* .initReactI18next */ .r9) // passes i18n down to react-i18next
.init({
  fallbackLng: "en",
  // use en if detected lng is not available
  saveMissing: true,
  // send not translated keys to endpoint
  resources: {
    en: {
      translation: {
        common: {
          inAppNotification: "In-app Notifications",
          browserNotification: "Browser Notifications",
          more: "More"
        },
        components: {
          cryptoSignature: "Crypto Signature",
          connectToPeer: {
            connectToPeer: "Connect to a Peer",
            shareLink: "Share link to connect",
            shareToConnect: "Share to connect",
            enterLink: "Enter link from peer to connect",
            shareQr: "Connect by online QR",
            scanQr: "Scan QR code from peer to connect",
            stopScanning: "Stop Scanning",
            shareWebRtcQr: "Connect by offline QR"
          },
          menuItems: {
            info: "Info",
            about: "About",
            docs: "Docs",
            github: "Github",
            kofi: "Ko-fi",
            openCollective: "Open Collective",
            patreon: "Patreon",
            reddit: "Reddit",
            youtube: "Youtube",
            options: "Options",
            language: "Language",
            lightMode: "Light mode",
            darkMode: "Dark mode",
            fullscreen: "Fullscreen",
            exitFullscreen: "Exit fullscreen",
            install: "Install app",
            downloadZip: "Download .zip",
            labs: "Labs",
            sponsor: "Donate",
            contact: "Contact",
            requestingToInstall: "Requesting browser to install app",
            installPossible: "👍 Install possible. Try from your browser settings.",
            installDismissed: "👎 Autoinstall dismissed. You can install through your browser.",
            installFailed: "👎 Autoinstall failed. You might be able to install through your browser.",
            installNotSupported: "👎 Autoinstall failed. You might be able to install through your browser.",
            profile: "Profile",
            terms: "Terms",
            privacy: "Privacy"
          }
        },
        loginPage: {
          pageTitle: "Welcome",
          setProfile: "Set Profile (optional)",
          setPreference: "Set Preferences (optional)",
          inAppNotification: "In-app Notifications",
          browserNotification: "Browser Notifications",
          goToTermsAndConditions: "Read Terms and Conditions",
          goToPrivacyPolicy: "Read Privacy Policy",
          termsAgreement: " I agree to these Terms and Conditions and privacy policy, and I acknowledge that this app is currently in a testing phase. I understand that features and functionalities are subject to change.",
          connect: "Connect",
          loadProfileFromFile: "Load Profile from File",
          setAvatar: "Set Avatar from file",
          displayName: "Display Name",
          cryptoSignature: "Crypto Signature",
          connectionId: "Connection ID",
          decentralized: "Decentralized - Experience true privacy with our P2P chat app. No centralized servers, no hidden data storage—just secure, direct conversations.",
          noInstall: "No Install/Registration - Start communicating right away without worrying about lengthy sign-up processes. Jump in and connect instantly.",
          p2pCalls: "Video Calls - More than just a chat app, our platform facilitates face-to-face conversations. Enjoy clear, efficient video calls wherever you are.",
          pushNotifications: "Push Notifications - Stay informed and never miss important updates. Our push notifications ensure you're always up-to-date with your conversations.",
          dataImportExport: "Data Import/Export - Control your data like never before. With our easy export and import feature, your data is always portable, always yours.",
          agnostic: "OS Agnostic - Freedom to use your preferred platform. Whether you're on Windows, MacOS, Linux, or prefer a specific browser, we've got you covered.",
          welcome: "positive-intentions is a decentralised, browser-agnostic and no-registration-required P2P chat application providing secure messaging, video calls and data ownership with push notifications and effortless data export/import. All encapsulated within a JavaScript-based Progressive Web App.",
          featuresInclude: "Note: This app is a technical proof-of-concept and a work in progress. Some of the features include:",
          noCookies: "No cookies",
          noRegistration: "No registration",
          noInstalling: "No installing",
          groupMessaging: "Group messaging",
          textMessaging: "Text messaging",
          multimediaMessaging: "Multimedia messaging",
          videoCalls: "Video calls",
          dataOwnership: "Data ownership",
          screensharing: "Screensharing (on desktop browsers)",
          fileTransfer: "File transfer",
          getStarted: "Begin by creating a profile. Rest assured, your profile stays on your device—no servers involved and no personal info required."
        },
        contactsPage: {
          pageTitle: "Contacts"
        },
        profilePage: {
          pageTitle: "Profile",
          changeAvatar: "Change Avatar",
          displayName: "Display Name",
          more: "More",
          regenerateConnectionId: "Regenerate Connection ID",
          preferences: "Preferences",
          backupProfile: "Backup Profile",
          logout: "Logout"
        },
        podsPage: {
          pageTitle: "Pods",
          social: "Social",
          cloud: "Cloud",
          network: "Network",
          devices: "Devices",
          storage: "Storage",
          gram: "Gram",
          verse: "Verse",
          ai: "AI",
          qr: "QR",
          webrtc: "WebRTC",
          hands: "Hand",
          vinnc: "Vinn-C",
          map: "Map",
          encrypt: "Encrypt",
          commingSoon: "Coming Soon"
        },
        contactDetailsPage: {
          contactDisplayName: "Contact Display Name",
          goToPodWith: "Go to Pod with {{displayName}}",
          createNewPodWith: "Create new Pod with {{displayName}}",
          podName: "Pod Name",
          createPod: "Create Pod",
          peerId: "Peer ID",
          connectionId: "Connection ID",
          registerNewDevice: "Register New Device",
          blockContact: "Block Contact"
        },
        podPage: {
          podDetails: "Pod Details",
          files: "Files",
          screenshare: "Screenshare",
          cast: "Cast",
          videoCall: "Video Call",
          call: "Call",
          replyingTo: "Replying to {{displayName}}:",
          cancelReply: "Cancel Reply",
          goToRepliedMessage: "Go to replied message"
        },
        podDetailsPage: {
          podName: "Pod Name",
          podId: "Pod ID",
          addExistingPeerToPod: "Add Existing Peer to Pod"
        }
      }
    },
    // gujrati fill in the language
    gu: {
      translation: {
        common: {
          inAppNotification: "એપ્લિકેશન નોટિફિકેશન્સ",
          browserNotification: "બ્રાઉઝર નોટિફિકેશન્સ",
          more: "વધુ"
        },
        components: {
          cryptoSignature: "ક્રિપ્ટો સિગ્નેચર",
          connectToPeer: {
            connectToPeer: "પીર સાથે જોડાઓ",
            shareLink: "જોડવા માટે લિંક શેર કરો",
            shareToConnect: "જોડવા માટે શેર કરો",
            enterLink: "પીર સાથે જોડવા માટે લિંક દાખલ કરો",
            shareQr: "જોડવા માટે QR કોડ શેર કરો",
            scanQr: "પીર સાથે જોડવા માટે QR કોડ સ્કેન કરો",
            stopScanning: "સ્કેનિંગ બંધ કરો"
          },
          menuItems: {
            info: "માહિતી",
            about: "વિશે",
            docs: "ડોક્યુમેન્ટ્સ",
            github: "ગિટહબ",
            reddit: "રેડિટ",
            options: "વિકલ્પો",
            language: "ભાષા",
            lightMode: "પ્રકાશ મોડ",
            darkMode: "ડાર્ક મોડ",
            fullscreen: "પૂર્ણ સ્ક્રીન",
            exitFullscreen: "પૂર્ણ સ્ક્રીન બહાર જાઓ",
            install: "એપ્લિકેશન ઇન્સ્ટોલ કરો",
            requestingToInstall: "બ્રાઉઝરને એપ્લિકેશન ઇન્સ્ટોલ કરવા માટે વિનંતી કરી રહ્યો છે",
            installPossible: "👍 ઇન્સ્ટોલેશન શક્ય છે. તમારા બ્રાઉઝર સેટિંગ્સમાંથી પ્રયાસ કરો.",
            installDismissed: "👎 આટોઇન્સ્ટોલેશન નકાર્યું. તમે તમારા બ્રાઉઝર દ્વારા ઇન્સ્ટોલ કરી શકો છો.",
            installFailed: "👎 આટોઇન્સ્ટોલેશન નિષ્ફળ રહ્યું. તમે બ્રાઉઝર દ્વારા ઇન્સ્ટોલ કરી શકો છો.",
            installNotSupported: "👎 આટોઇન્સ્ટોલેશન નિષ્ફળ રહ્યું. તમે બ્રાઉઝર દ્વારા ઇન્સ્ટોલ કરી શકો છો.",
            profile: "પ્રોફાઇલ",
            terms: "શરતો"
          }
        },
        loginPage: {
          pageTitle: "પ્રોફાઇલ બનાવો",
          setProfile: "પ્રોફાઇલ સેટ કરો",
          setPreference: "પસંદગી સેટ કરો",
          inAppNotification: "એપ્લિકેશન નોટિફિકેશન્સ",
          browserNotification: "બ્રાઉઝર નોટિફિકેશન્સ",
          termsAgreement: " હું આ શરતો અને નિયમોને માન્ય કરું છું, અને હું માન્ય કરું છું કે આ એપ્લિકેશન હાલમાં ટેસ્ટિંગ ફેઝમાં છે. હું સમજું છું કે ફિચર્સ અને કાર્યક્ષમતાઓ બદલાઈ શકે છે.",
          connect: "જોડાઓ",
          loadProfileFromFile: "ફાઇલમાંથી પ્રોફાઇલ લોડ કરો",
          setAvatar: "અવતાર સેટ કરો",
          displayName: "ડિસ્પ્લે નામ",
          cryptoSignature: "ક્રિપ્ટો સિગ્નેચર",
          welcome: "પોઝિટિવ-ઇન્ટેન્શન્સ એક ડિસેન્ટ્રલાઇઝ્ડ, બ્રાઉઝર-અગ્નોસ્ટિક અને કોઈ રજીસ્ટ્રેશન જરૂરી નથી P2P ચેટ એપ્લિકેશન છે જે સુરક્ષિત મેસેજિંગ, વિડિઓ કૉલ અને ડેટા માલિકીને પ્રદાન કરે છે જેથી પુશ નોટિફિકેશન અને ડેટા એક્સપોર્ટ / ઇમ્પોર્ટ સહજ છે. બધું જે જાવાસ્ક્રિપ્ટ આધારિત પ્રોગ્રેસિવ વેબ એપ્લિકેશનમાં બંધ કરવામાં આવે છે.",
          featuresInclude: "નોંધ: આ એપ્લિકેશન એક ટેકનિકલ પ્રુફ-ઓફ-કોન્સેપ્ટ અને કામગીરીની પ્રક્રિયા છે. કેટલાક ફિચર્સ નીચે આપેલા છે:",
          noCookies: "કોઈ કુકીઝ નથી",
          noRegistration: "કોઈ રજીસ્ટ્રેશન નથી",
          noInstalling: "કોઈ ઇન્સ્ટોલ નથી",
          groupMessaging: "ગ્રુપ મેસેજિંગ",
          textMessaging: "ટેક્સ્ટ મેસેજિંગ",
          multimediaMessaging: "મલ્ટીમીડિયા મેસેજિંગ",
          videoCalls: "વિડિઓ કૉલ",
          dataOwnership: "ડેટા માલિકી",
          screensharing: "સ્ક્રીનશેરિંગ (ડેસ્કટોપ બ્રાઉઝર્સ પર)",
          fileTransfer: "ફાઇલ ટ્રાન્સફર",
          getStarted: "પ્રોફાઇલ બનાવીને શરૂ કરો. આરામથી રહો, તમારી પ્રોફાઇલ તમારા ડિવાઇસ પર રહે છે - કોઈ સર્વરો શામેલ નથી અને કોઈ વ્યક્તિગત માહિતી જરૂરી નથી."
        },
        contactsPage: {
          pageTitle: "સંપર્કો"
        },
        profilePage: {
          pageTitle: "પ્રોફાઇલ",
          changeAvatar: "અવતાર બદલો",
          displayName: "ડિસ્પ્લે નામ",
          more: "વધુ",
          regenerateConnectionId: "કનેક્શન ID ફરીથી ઉત્પન્ન કરો",
          preferences: "પસંદગીઓ",
          backupProfile: "બેકઅપ પ્રોફાઇલ",
          logout: "લોગ આઉટ"
        },
        podsPage: {
          pageTitle: "પોડ્સ",
          social: "સમાજિક",
          cloud: "મેઘ",
          network: "નેટવર્ક",
          devices: "ઉપકરણો",
          storage: "સ્ટોરેજ",
          commingSoon: "ટકે આવશે"
        },
        contactDetailsPage: {
          contactDisplayName: "સંપર્ક ડિસ્પ્લે નામ",
          goToPodWith: "{{displayName}} સાથે પોડ પર જાઓ",
          createNewPodWith: "{{displayName}} સાથે નવો પોડ બનાવો",
          podName: "પોડ નામ",
          createPod: "પોડ બનાવો",
          peerId: "પીર ID",
          connectionId: "કનેક્શન ID",
          registerNewDevice: "નવું ઉપકરણ નોંધાવો",
          blockContact: "સંપર્ક બ્લોક કરો"
        },
        podPage: {
          podDetails: "પોડ વિગતો",
          files: "ફાઇલો",
          screenshare: "સ્ક્રીનશેર",
          videoCall: "વિડિઓ કૉલ",
          call: "કૉલ"
        },
        podDetailsPage: {
          podName: "પોડ નામ",
          podId: "પોડ ID",
          addExistingPeerToPod: "પોડમાં હાજર પીર ઉમેરો"
        }
      }
    },
    // spanish
    es: {
      translation: {
        common: {
          inAppNotification: "Notificaciones de la aplicación",
          browserNotification: "Notificaciones del navegador",
          more: "Más"
        },
        components: {
          cryptoSignature: "Firma criptográfica",
          connectToPeer: {
            connectToPeer: "Conéctate a un par",
            shareLink: "Compartir enlace para conectar",
            shareToConnect: "Compartir para conectar",
            enterLink: "Ingrese el enlace del par para conectarse",
            shareQr: "Compartir código QR para conectar",
            scanQr: "Escanee el código QR del par para conectarse",
            stopScanning: "Detener el escaneo"
          },
          menuItems: {
            info: "Información",
            about: "Acerca de",
            docs: "Documentos",
            github: "Github",
            reddit: "Reddit",
            options: "Opciones",
            language: "Idioma",
            lightMode: "Modo claro",
            darkMode: "Modo oscuro",
            fullscreen: "Pantalla completa",
            exitFullscreen: "Salir de pantalla completa",
            install: "Instalar aplicación",
            requestingToInstall: "Solicitando al navegador que instale la aplicación",
            installPossible: "👍 Instalación posible. Intente desde la configuración de su navegador.",
            installDismissed: "👎 Instalación automática descartada. Puede instalar a través de su navegador.",
            installFailed: "👎 Instalación automática fallida. Es posible que pueda instalar a través de su navegador.",
            installNotSupported: "👎 Instalación automática fallida. Es posible que pueda instalar a través de su navegador.",
            profile: "Perfil",
            terms: "Condiciones"
          }
        },
        loginPage: {
          pageTitle: "Crear perfil",
          setProfile: "Establecer perfil",
          setPreference: "Establecer preferencias",
          inAppNotification: "Notificaciones de la aplicación",
          browserNotification: "Notificaciones del navegador",
          termsAgreement: "Acepto estos Términos y condiciones, y reconozco que esta aplicación se encuentra actualmente en una fase de prueba. Entiendo que las características y funcional",
          connect: "Conectar",
          loadProfileFromFile: "Cargar perfil desde archivo",
          setAvatar: "Establecer avatar",
          displayName: "Nombre para mostrar",
          cryptoSignature: "Firma criptográfica",
          welcome: "positive-intentions es una aplicación de chat P2P descentralizada, independiente del navegador y sin registro que proporciona mensajería segura, videollamadas y propiedad de datos con notificaciones push y exportación / importación de datos sin esfuerzo. Todo encapsulado dentro de una aplicación web progresiva basada en JavaScript.",
          featuresInclude: "Nota: esta aplicación es una prueba de concepto técnico y un trabajo en progreso. Algunas de las características incluyen:",
          noCookies: "Sin cookies",
          noRegistration: "Sin registro",
          noInstalling: "Sin instalación",
          groupMessaging: "Mensajería de grupo",
          textMessaging: "Mensajería de texto",
          multimediaMessaging: "Mensajería multimedia",
          videoCalls: "Videollamadas",
          dataOwnership: "Propiedad de datos",
          screensharing: "Compartir pantalla (en navegadores de escritorio)",
          fileTransfer: "Transferencia de archivos",
          getStarted: "Comience creando un perfil. Tenga la seguridad de que su perfil permanece en su dispositivo, sin servidores involucrados y sin información personal requerida."
        },
        contactsPage: {
          pageTitle: "Contactos"
        },
        profilePage: {
          pageTitle: "Perfil",
          changeAvatar: "Cambiar avatar",
          displayName: "Nombre para mostrar",
          more: "Más",
          regenerateConnectionId: "Regenerar ID de conexión",
          preferences: "Preferencias",
          backupProfile: "Copia de seguridad del perfil",
          logout: "Cerrar sesión"
        },
        podsPage: {
          pageTitle: "Vainas",
          social: "Social",
          cloud: "Nube",
          network: "Red",
          devices: "Dispositivos",
          storage: "Almacenamiento",
          commingSoon: "Próximamente"
        },
        contactDetailsPage: {
          contactDisplayName: "Nombre para mostrar del contacto",
          goToPodWith: "Ir al Pod con {{displayName}}",
          createNewPodWith: "Crear nuevo Pod con {{displayName}}",
          podName: "Nombre del Pod",
          createPod: "Crear Pod",
          peerId: "ID de par",
          connectionId: "ID de conexión",
          registerNewDevice: "Registrar nuevo dispositivo",
          blockContact: "Bloquear contacto"
        },
        podPage: {
          podDetails: "Detalles del pod",
          files: "Archivos",
          screenshare: "Compartir pantalla",
          videoCall: "Video llamada",
          call: "Llamar"
        },
        podDetailsPage: {
          podName: "Nombre del Pod",
          podId: "ID de Pod",
          addExistingPeerToPod: "Agregar par existente al Pod"
        }
      }
    },
    // mandarin
    zh: {
      translation: {
        common: {
          inAppNotification: "应用程序通知",
          browserNotification: "浏览器通知",
          more: "更多"
        },
        components: {
          cryptoSignature: "加密签名",
          connectToPeer: {
            connectToPeer: "连接到对等",
            shareLink: "分享链接以连接",
            shareToConnect: "分享以连接",
            enterLink: "输入对等连接的链接",
            shareQr: "分享QR码以连接",
            scanQr: "扫描对等连接的QR码",
            stopScanning: "停止扫描"
          },
          menuItems: {
            info: "信息",
            about: "关于",
            docs: "文档",
            github: "Github",
            reddit: "Reddit",
            options: "选项",
            language: "语言",
            lightMode: "亮色模式",
            darkMode: "暗色模式",
            fullscreen: "全屏",
            exitFullscreen: "退出全屏",
            install: "安装应用",
            requestingToInstall: "请求浏览器安装应用",
            installPossible: "👍 可以安装。请从浏览器设置尝试。",
            installDismissed: "👎 自动安装已取消。您可以通过浏览器安装。",
            installFailed: "👎 自动安装失败。您可能可以通过浏览器安装。",
            installNotSupported: "👎 自动安装失败。您可能可以通过浏览器安装。",
            profile: "个人资料",
            terms: "条款"
          }
        },
        loginPage: {
          pageTitle: "创建个人资料",
          setProfile: "设置个人资料",
          setPreference: "设置偏好",
          inAppNotification: "应用程序通知",
          browserNotification: "浏览器通知",
          termsAgreement: "我同意这些条款和条件，并承认该应用程序目前处于测试阶段。我了解功能和功能可能会发生变化。",
          connect: "连接",
          loadProfileFromFile: "从文件加载个人资料",
          setAvatar: "设置头像",
          displayName: "显示名称",
          cryptoSignature: "加密签名",
          welcome: "positive-intentions是一个独立的、独立的、无注册的P2P聊天应用程序，提供安全的消息传递、视频通话和数据所有权，具有推送通知和轻松的数据导出/导入。所有这些都包含在基于JavaScript的渐进式Web应用程序中。",
          featuresInclude: "注意：此应用程序是技术概念验证和正在进行的工作。一些功能包括：",
          noCookies: "没有cookies",
          noRegistration: "没有注册",
          noInstalling: "没有安装",
          groupMessaging: "群组消息",
          textMessaging: "文字消息",
          multimediaMessaging: "多媒体消息",
          videoCalls: "视频通话",
          dataOwnership: "数据所有权",
          screensharing: "屏幕共享（在桌面浏览器上）",
          fileTransfer: "文件传输",
          getStarted: "通过创建个人资料开始。放心，您的个人资料保留在设备上，没有服务器参与，也不需要个人信息。"
        },
        contactsPage: {
          pageTitle: "联系人"
        },
        profilePage: {
          pageTitle: "个人资料",
          changeAvatar: "更改头像",
          displayName: "显示名称",
          more: "更多",
          regenerateConnectionId: "重新生成连接ID",
          preferences: "偏好",
          backupProfile: "备份个人资料",
          logout: "登出"
        },
        podsPage: {
          // i want it phonetically "pods" nut in mandarin
          pageTitle: "豆荚",
          social: "社会",
          cloud: "云",
          network: "网络",
          devices: "设备",
          storage: "存储",
          commingSoon: "即将推出"
        },
        contactDetailsPage: {
          contactDisplayName: "联系人显示名称",
          goToPodWith: "转到{{displayName}}的豆荚",
          createNewPodWith: "与{{displayName}}创建新豆荚",
          podName: "豆荚名称",
          createPod: "创建豆荚",
          peerId: "对等ID",
          connectionId: "连接ID",
          registerNewDevice: "注册新设备",
          blockContact: "阻止联系人"
        },
        peerId: "对等ID",
        connectionId: "连接ID",
        registerNewDevice: "注册新设备",
        blockContact: "阻止联系人"
      },
      podPage: {
        podDetails: "豆荚详情",
        files: "档案",
        screenshare: "屏幕共享",
        videoCall: "视频通话",
        call: "电话"
      },
      podDetailsPage: {
        podName: "豆荚名称",
        addExistingPeerToPod: "将现有对等添加到Pod"
      }
    },
    // hindi
    hi: {
      translation: {
        common: {
          inAppNotification: "ऐप अधिसूचना",
          browserNotification: "ब्राउज़र अधिसूचना",
          more: "अधिक"
        },
        components: {
          cryptoSignature: "क्रिप्टो हस्ताक्षर",
          connectToPeer: {
            connectToPeer: "पीर से कनेक्ट करें",
            shareLink: "कनेक्ट करने के लिए लिंक साझा करें",
            shareToConnect: "कनेक्ट करने के लिए साझा करें",
            enterLink: "कनेक्ट करने के लिए पीर से लिंक दर्ज करें",
            shareQr: "कनेक्ट करने के लिए QR कोड साझा करें",
            scanQr: "पीर से कनेक्ट करने के लिए QR कोड स्कैन करें",
            stopScanning: "स्कैनिंग रोकें"
          },
          menuItems: {
            info: "जानकारी",
            about: "के बारे में",
            docs: "दस्तावेज़",
            github: "Github",
            reddit: "Reddit",
            options: "विकल्प",
            language: "भाषा",
            lightMode: "प्रकाश मोड",
            darkMode: "डार्क मोड",
            fullscreen: "पूर्ण स्क्रीन",
            exitFullscreen: "पूर्ण स्क्रीन से बाहर निक लें",
            install: "ऐप स्थापित करें",
            requestingToInstall: "ऐप स्थापित करने के लिए ब्राउज़र को अनुरोध कर रहा है",
            installPossible: "👍 स्थापना संभव है। अपने ब्राउज़र सेटिंग्स से प्रयास करें।",
            installDismissed: "👎 ऑटोस्थापन खारिज कर दिया गया है। आप अपने ब्राउज़र के माध्यम से स्थापित कर सकते हैं।",
            installFailed: "👎 ऑटोस्थापन विफल हो गया। आप अपने ब्राउज़र के माध्यम से स्थापित कर सकते हैं।",
            installNotSupported: "👎 ऑटोस्थापन विफल हो गया। आप अपने ब्राउज़र के माध्यम से स्थापित कर सकते हैं।",
            profile: "प्रोफ़ाइल",
            terms: "शर्तें"
          }
        },
        loginPage: {
          pageTitle: "प्रोफ़ाइल बनाएं",
          setProfile: "प्रोफ़ाइल सेट करें",
          setPreference: "पसंद सेट करें",
          inAppNotification: "ऐप अधिसूचना",
          browserNotification: "ब्राउज़र अधिसूचना",
          termsAgreement: "मैं इन नियमों और शर्तों से सहमत हूं, और मैं स्वीकार करता हूं कि यह ऐप वर्तमान में एक परीक्षण चरण में है। मुझे यह समझना है कि सुविधाओं और कार्यक्षमताओं में परिवर्तन हो सकता है।",
          connect: "कनेक्ट करें",
          loadProfileFromFile: "फ़ाइल से प्रोफ़ाइल लोड करें",
          setAvatar: "अवतार सेट करें",
          displayName: "प्रदर्शन नाम",
          cryptoSignature: "क्रिप्टो हस्ताक्षर",
          welcome: "positive-intentions एक डिसेंट्रलाइज्ड, ब्राउज़र-अग्नोस्टिक और कोई पंजीकरण आवश्यक नहीं P2P चैट ऐप है जो सुरक्षित संदेश, वीडियो कॉल और डेटा स्वामित्व प्रदान करता है जिसमें पुश अधिसूचनाएं और आसान डेटा निर्यात / आयात शामिल हैं। सब कुछ जावास्क्रिप्ट पर आधारित एक प्रगतिशील वेब ऐप में बंद है।",
          featuresInclude: "नोट: यह ऐप एक तकनीकी प्रूफ-ऑफ-कॉन्सेप्ट और एक चल रहा काम है। कुछ विशेषताओं में शामिल हैं:",
          noCookies: "कोई कुकीज़ नहीं",
          noRegistration: "कोई पंजीकरण नहीं",
          noInstalling: "कोई स्थापना नहीं",
          groupMessaging: "समूह संदेश",
          textMessaging: "टेक्स्ट संदेश",
          multimediaMessaging: "मल्टीमीडिया संदेश",
          videoCalls: "वीडियो कॉल",
          dataOwnership: "डेटा स्वामित्व",
          screensharing: "स्क्रीन शेयरिंग (डेस्कटॉप ब्राउज़र पर)",
          fileTransfer: "फ़ाइल ट्रांसफर",
          getStarted: "प्रोफ़ाइल बनाकर शुरू करें। आपकी प्रोफ़ाइल आपके डिवाइस पर रहती है, कोई सर्वर शामिल नहीं है और कोई व्यक्तिगत जानकारी आवश्यक नहीं है।"
        },
        contactsPage: {
          pageTitle: "संपर्क"
        },
        profilePage: {
          pageTitle: "प्रोफ़ाइल",
          changeAvatar: "अवतार बदलें",
          displayName: "प्रदर्शन नाम",
          more: "अधिक",
          regenerateConnectionId: "कनेक्शन आईडी पुनर्जन्म",
          preferences: "पसंद",
          backupProfile: "प्रोफ़ाइल बैकअप",
          logout: "लॉग आउट"
        },
        podsPage: {
          pageTitle: "पॉड",
          social: "सामाजिक",
          cloud: "बादल",
          network: "नेटवर्क",
          devices: "उपकरण",
          storage: "संग्रहण",
          commingSoon: "जल्द आ रहा है"
        },
        contactDetailsPage: {
          contactDisplayName: "संपर्क प्रदर्शन नाम",
          goToPodWith: "{{displayName}} के साथ पॉड पर जाएं",
          createNewPodWith: "{{displayName}} के साथ नया पॉड बनाएं",
          podName: "पॉड नाम",
          createPod: "पॉड बनाएं",
          peerId: "पीर आईडी",
          connectionId: "कनेक्शन आईडी",
          registerNewDevice: "नया उपकरण पंजीकृत करें",
          blockContact: "संपर्क अवरोधित करें"
        },
        podPage: {
          podDetails: "पॉड विवरण",
          files: "फ़ाइलें",
          screenshare: "स्क्रीन शेयर",
          videoCall: "वीडियो कॉल",
          call: "कॉल"
        },
        podDetailsPage: {
          podName: "पॉड नाम",
          addExistingPeerToPod: "पॉड में मौजूदा पीर जोड़ें"
        }
      }
    },
    // russian
    ru: {
      translation: {
        common: {
          inAppNotification: "Уведомления приложения",
          browserNotification: "Уведомления браузера",
          more: "Больше"
        },
        components: {
          cryptoSignature: "Криптографическая подпись",
          connectToPeer: {
            connectToPeer: "Подключиться к пиру",
            shareLink: "Поделиться ссылкой для подключения",
            shareToConnect: "Поделиться для подключения",
            enterLink: "Введите ссылку на пир для подключения",
            shareQr: "Поделиться QR-кодом для подключения",
            scanQr: "Сканировать QR-код пира для подключения",
            stopScanning: "Остановить сканирование"
          },
          menuItems: {
            info: "Информация",
            about: "О нас",
            docs: "Документы",
            github: "Github",
            reddit: "Reddit",
            options: "Опции",
            language: "Язык",
            lightMode: "Светлый режим",
            darkMode: "Темный режим",
            fullscreen: "Полноэкранный",
            exitFullscreen: "Выйти из полноэкранного режима",
            install: "Установить приложение",
            requestingToInstall: "Запрос браузеру на установку приложения",
            installPossible: "👍 Установка возможна. Попробуйте из настроек браузера.",
            installDismissed: "👎 Автоустановка отклонена. Вы можете установить через свой браузер.",
            installFailed: "👎 Автоустановка не удалась. Вы можете установить через свой браузер.",
            installNotSupported: "👎 Автоустановка не поддерживается. Вы можете установить через свой браузер.",
            profile: "Профиль",
            terms: "Условия"
          }
        },
        loginPage: {
          pageTitle: "Создать профиль",
          setProfile: "Установить профиль",
          setPreference: "Установить предпочтения",
          inAppNotification: "Уведомления приложения",
          browserNotification: "Уведомления браузера",
          termsAgreement: "Я согласен с этими условиями и положениями, и признаю, что это приложение находится в стадии тестирования. Я понимаю, что функции и возможности могут измениться.",
          connect: "Подключиться",
          loadProfileFromFile: "Загрузить профиль из файла",
          setAvatar: "Установить аватар",
          displayName: "Отображаемое имя",
          cryptoSignature: "Криптографическая подпись",
          welcome: "positive-intentions - это децентрализованное, независимое от браузера, без регистрации приложение для обмена сообщениями P2P, которое обеспечивает безопасную передачу сообщений, видеозвонки и владение данными с push-уведомлениями и без проблем экспорта / импорта данных. Все это вклю",
          featuresInclude: "Примечание: это технический концепт-тест и работа в процессе. Некоторые из функций включают:",
          noCookies: "Без куки",
          noRegistration: "Без регистрации",
          noInstalling: "Без установки",
          groupMessaging: "Групповые сообщения",
          textMessaging: "Текстовые сообщения",
          multimediaMessaging: "Мультимедийные сообщения",
          videoCalls: "Видеозвонки",
          dataOwnership: "Владение данными",
          screensharing: "Поделиться экраном (в рабочих столах)",
          fileTransfer: "Передача файлов",
          getStarted: "Начните с создания профиля. Будьте уверены, что ваш профиль остается на вашем устройстве, без участия серверов и без необходимости предоставлять личную информацию."
        },
        contactsPage: {
          pageTitle: "Контакты"
        },
        profilePage: {
          pageTitle: "Профиль",
          changeAvatar: "Изменить аватар",
          displayName: "Отображаемое имя",
          more: "Больше",
          regenerateConnectionId: "Сгенерировать ID подключения",
          preferences: "Предпочтения",
          backupProfile: "Резервное копирование профиля",
          logout: "Выйти"
        },
        podsPage: {
          pageTitle: "Поды",
          social: "Социальные",
          cloud: "Облако",
          network: "Сеть",
          devices: "Устройства",
          storage: "Хранение",
          commingSoon: "Скоро"
        },
        contactDetailsPage: {
          contactDisplayName: "Отображаемое имя контакта",
          goToPodWith: "Перейти к поду с {{displayName}}",
          createNewPodWith: "Создать новый под с {{displayName}}",
          podName: "Имя пода",
          createPod: "Создать под",
          peerId: "ID пира",
          connectionId: "ID подключения",
          registerNewDevice: "Зарегистрировать новое устройство",
          blockContact: "Заблокировать контакт"
        },
        podPage: {
          podDetails: "Детали пода",
          files: "Файлы",
          screenshare: "Поделиться экраном",
          videoCall: "Видеозвонок",
          call: "Звонок"
        },
        podDetailsPage: {
          podName: "Имя пода",
          addExistingPeerToPod: "Добавить существующего пира в под"
        }
      }
    },
    // portuguese
    pt: {
      translation: {
        common: {
          inAppNotification: "Notificações do aplicativo",
          browserNotification: "Notificações do navegador",
          more: "Mais"
        },
        components: {
          cryptoSignature: "Assinatura criptográfica",
          connectToPeer: {
            connectToPeer: "Conectar-se ao par",
            shareLink: "Compartilhar link para conectar",
            shareToConnect: "Compartilhar para conectar",
            enterLink: "Digite o link do par para conectar",
            shareQr: "Compartilhar código QR para conectar",
            scanQr: "Digitalizar código QR do par para conectar",
            stopScanning: "Parar de escanear"
          },
          menuItems: {
            info: "Informação",
            about: "Sobre",
            docs: "Documentos",
            github: "Github",
            reddit: "Reddit",
            options: "Opções",
            language: "Língua",
            lightMode: "Modo claro",
            darkMode: "Modo escuro",
            fullscreen: "Tela cheia",
            exitFullscreen: "Sair da tela cheia",
            install: "Instalar aplicativo",
            requestingToInstall: "Solicitando ao navegador que instale o aplicativo",
            installPossible: "👍 Instalação possível. Tente nas configurações do seu navegador.",
            installDismissed: "👎 Instalação automática dispensada. Você pode instalar através do seu navegador.",
            installFailed: "👎 Instalação automática falhou. Você pode instalar através do seu navegador.",
            installNotSupported: "👎 Instalação automática falhou. Você pode instalar através do seu navegador.",
            profile: "Perfil",
            terms: "Termos"
          }
        },
        loginPage: {
          pageTitle: "Criar perfil",
          setProfile: "Definir perfil",
          setPreference: "Definir preferência",
          inAppNotification: "Notificações do aplicativo",
          browserNotification: "Notificações do navegador",
          termsAgreement: "Eu concordo com estes Termos e Condições, e reconheço que este aplicativo está atualmente em fase de teste. Eu entendo que os recursos e recursos podem mudar.",
          connect: "Conectar",
          loadProfileFromFile: "Carregar perfil do arquivo",
          setAvatar: "Definir avatar",
          displayName: "Nome de exibição",
          cryptoSignature: "Assinatura criptográfica",
          welcome: "positive-intentions é um aplicativo de bate-papo P2P independente, independente do navegador, sem registro, que fornece mensagens seguras, chamadas de vídeo e propriedade de dados com notificações push e exportação / importação de dados fácil. Tudo isso está contido em um aplicativo da web progressivo baseado em JavaScript.",
          featuresInclude: "Nota: este aplicativo é um conceito técnico de prova e um trabalho em andamento. Alguns dos recursos incluem:",
          noCookies: "Sem cookies",
          noRegistration: "Sem registro",
          noInstalling: "Sem instalação",
          groupMessaging: "Mensagens em grupo",
          textMessaging: "Mensagens de texto",
          multimediaMessaging: "Mensagens multimídia",
          videoCalls: "Chamadas de vídeo",
          dataOwnership: "Propriedade de dados",
          screensharing: "Compartilhamento de tela (em navegadores de desktop)",
          fileTransfer: "Transferência de arquivo",
          getStarted: "Comece criando um perfil. Tenha certeza de que seu perfil permanece em seu dispositivo, sem servidores envolvidos e sem a necessidade de fornecer informações pessoais."
        },
        contactsPage: {
          pageTitle: "Contatos"
        },
        profilePage: {
          pageTitle: "Perfil",
          changeAvatar: "Mudar avatar",
          displayName: "Nome de exibição",
          more: "Mais",
          regenerateConnectionId: "Regenerar ID de conexão",
          preferences: "Preferências",
          backupProfile: "Perfil de backup",
          logout: "Sair"
        },
        podsPage: {
          pageTitle: "Vagens",
          social: "Social",
          cloud: "Nuvem",
          network: "Rede",
          devices: "Dispositivos",
          storage: "Armazenamento",
          commingSoon: "Em breve"
        },
        contactDetailsPage: {
          contactDisplayName: "Nome de exibição do contato",
          goToPodWith: "Ir para o Pod com {{displayName}}",
          createNewPodWith: "Criar novo Pod com {{displayName}}",
          podName: "Nome do Pod",
          createPod: "Criar Pod",
          peerId: "ID do par",
          connectionId: "ID de conexão",
          registerNewDevice: "Registrar novo dispositivo",
          blockContact: "Bloquear contato"
        },
        podPage: {
          podDetails: "Detalhes do pod",
          files: "Arquivos",
          screenshare: "Compartilhamento de tela",
          videoCall: "Video chamada",
          call: "Chamada"
        },
        podDetailsPage: {
          podName: "Nome do Pod",
          addExistingPeerToPod: "Adicionar par existente ao Pod"
        }
      }
    },
    // japanese
    ja: {
      translation: {
        common: {
          inAppNotification: "アプリの通知",
          browserNotification: "ブラウザの通知",
          more: "もっと"
        },
        components: {
          cryptoSignature: "暗号署名",
          connectToPeer: {
            connectToPeer: "ピアに接続する",
            shareLink: "接続するためのリンクを共有する",
            shareToConnect: "接続するために共有する",
            enterLink: "接続するピアのリンクを入力してください",
            shareQr: "接続するためのQRコードを共有する",
            scanQr: "接続するピアのQRコードをスキャンする",
            stopScanning: "スキャンを停止"
          },
          menuItems: {
            info: "情報",
            about: "約",
            docs: "ドキュメント",
            github: "Github",
            reddit: "Reddit",
            options: "オプション",
            language: "言語",
            lightMode: "ライトモード",
            darkMode: "ダークモード",
            fullscreen: "フルスクリーン",
            exitFullscreen: "フルスクリーンを終了",
            install: "アプリをインストールする",
            requestingToInstall: "ブラウザにアプリをインストールするように要求しています",
            installPossible: "👍 インストール可能。ブラウザの設定から試してみてください。",
            installDismissed: "👎 自動インストールが拒否されました。ブラウザからインストールできます。",
            installFailed: "👎 自動インストールに失敗しました。ブラウザからインストールできます。",
            installNotSupported: "👎 自動インストールに失敗しました。ブラウザからインストールできます。",
            profile: "プロフィール",
            terms: "条件"
          }
        },
        loginPage: {
          pageTitle: "プロフィールを作成する",
          setProfile: "プロフィールを設定する",
          setPreference: "設定を設定する",
          inAppNotification: "アプリの通知",
          browserNotification: "ブラウザの通知",
          termsAgreement: "これらの利用規約に同意し、このアプリが現在テスト段階にあることを認識します。機能や機能が変更される可能性があることを理解しています。",
          connect: "接続する",
          loadProfileFromFile: "ファイルからプロフィールをロードする",
          setAvatar: "アバターを設定する",
          displayName: "表示名",
          cryptoSignature: "暗号署名",
          welcome: "positive-intentionsは、安全なメッセージング、ビデオ通話、プッシュ通知、簡単なデータエクスポート/インポートを提供する、ブラウザに依存しない、登録不要のP2Pチャットアプリです。すべてはJavaScriptに基づくプログレッシブWebアプリケーションに含まれています。",
          featuresInclude: "注意：このアプリは技術的なコンセプトテストであり、進行中の作業です。機能の一部には、次のものが含まれます。",
          noCookies: "クッキーなし",
          noRegistration: "登録なし",
          noInstalling: "インストールなし",
          groupMessaging: "グループメッセージング",
          textMessaging: "テキストメッセージ",
          multimediaMessaging: "マルチメディアメッセージ",
          videoCalls: "ビデオ通話",
          dataOwnership: "データの所有権",
          screensharing: "画面共有（デスクトップブラウザ上）",
          fileTransfer: "ファイル転送",
          getStarted: "プロフィールを作成して始めましょう。プロフィールはデバイスに保存され、サーバーは関与せず、個人情報を提供する必要はありません。"
        },
        contactsPage: {
          pageTitle: "連絡先"
        },
        profilePage: {
          pageTitle: "プロフィール",
          changeAvatar: "アバターを変更する",
          displayName: "表示名",
          more: "もっと",
          regenerateConnectionId: "接続IDを再生成する",
          preferences: "設定",
          backupProfile: "プロフィールのバックアップ",
          logout: "ログアウト"
        },
        podsPage: {
          pageTitle: "ポッド",
          social: "社会的",
          cloud: "クラウド",
          network: "ネットワーク",
          devices: "デバイス",
          storage: "ストレージ",
          commingSoon: "近日公開"
        },
        contactDetailsPage: {
          contactDisplayName: "連絡先の表示名",
          goToPodWith: "{{displayName}}とのPodに移動",
          createNewPodWith: "{{displayName}}と新しいPodを作成する",
          podName: "Pod名",
          createPod: "Podを作成する",
          peerId: "ピアID",
          connectionId: "接続ID",
          registerNewDevice: "新しいデバイスを登録する",
          blockContact: "連絡先をブロックする"
        },
        podPage: {
          podDetails: "ポッドの詳細",
          files: "ファイル",
          screenshare: "画面共有",
          videoCall: "ビデオ通話",
          call: "電話"
        },
        podDetailsPage: {
          podName: "Pod名",
          addExistingPeerToPod: "既存のピアをPodに追加する"
        }
      }
    },
    // french
    fr: {
      translation: {
        common: {
          inAppNotification: "Notifications de l'application",
          browserNotification: "Notifications du navigateur",
          more: "Plus"
        },
        components: {
          cryptoSignature: "Signature cryptographique",
          connectToPeer: {
            connectToPeer: "Se connecter au pair",
            shareLink: "Partager le lien pour se connecter",
            shareToConnect: "Partager pour se connecter",
            enterLink: "Entrez le lien du pair pour vous connecter",
            shareQr: "Partager le code QR pour se connecter",
            scanQr: "Scanner le code QR du pair pour se connecter",
            stopScanning: "Arrêter de scanner"
          },
          menuItems: {
            info: "Information",
            about: "À propos",
            docs: "Documents",
            github: "Github",
            reddit: "Reddit",
            options: "Options",
            language: "Langue",
            lightMode: "Mode lumière",
            darkMode: "Mode sombre",
            fullscreen: "Plein écran",
            exitFullscreen: "Quitter le plein écran",
            install: "Installer l'application",
            requestingToInstall: "Demande au navigateur d'installer l'application",
            installPossible: "👍 Installation possible. Essayez depuis les paramètres de votre navigateur.",
            installDismissed: "👎 Installation automatique rejetée. Vous pouvez installer via votre navigateur.",
            installFailed: "👎 L'installation automatique a échoué. Vous pouvez installer via votre navigateur.",
            installNotSupported: "👎 L'installation automatique a échoué. Vous pouvez installer via votre navigateur.",
            profile: "Profil",
            terms: "Conditions"
          }
        },
        loginPage: {
          pageTitle: "Créer un profil",
          setProfile: "Définir le profil",
          setPreference: "Définir la préférence",
          inAppNotification: "Notifications de l'application",
          browserNotification: "Notifications du navigateur",
          termsAgreement: "J'accepte ces termes et conditions, et je reconnais que cette application est actuellement en phase de test. Je comprends que les fonctionnalités et les fonctionnalités peuvent changer.",
          connect: "Connecter",
          loadProfileFromFile: "Charger le profil à partir du fichier",
          setAvatar: "Définir l'avatar",
          displayName: "Nom d'affichage",
          cryptoSignature: "Signature cryptographique",
          welcome: "positive-intentions est une application de chat P2P indépendante, indépendante du navigateur, sans inscription, qui fournit des messages sécurisés, des appels vidéo et la propriété de données avec des notifications push et une exportation / importation de données facile. Tout cela est contenu dans une application Web progressive basée sur JavaScript.",
          featuresInclude: "Remarque: cette application est un concept technique de test et un travail en cours. Certaines des fonctionnalités incluent:",
          noCookies: "Pas de cookies",
          noRegistration: "Pas d'inscription",
          noInstalling: "Pas d'installation",
          groupMessaging: "Messagerie de groupe",
          textMessaging: "Messagerie texte",
          multimediaMessaging: "Messagerie multimédia",
          videoCalls: "Appels vidéo",
          dataOwnership: "Propriété des données",
          screensharing: "Partage d'écran (sur les navigateurs de bureau)",
          fileTransfer: "Transfert de fichier",
          getStarted: "Commencez par créer un profil. Soyez assuré que votre profil reste sur votre appareil, sans serveurs impliqués et sans avoir à fournir d'informations personnelles."
        },
        contactsPage: {
          pageTitle: "Contacts"
        },
        profilePage: {
          pageTitle: "Profil",
          changeAvatar: "Changer d'avatar",
          displayName: "Nom d'affichage",
          more: "Plus",
          regenerateConnectionId: "Régénérer l'ID de connexion",
          preferences: "Préférences",
          backupProfile: "Profil de sauvegarde",
          logout: "Se déconnecter"
        },
        podsPage: {
          pageTitle: "Pods",
          social: "Social",
          cloud: "Nuage",
          network: "Réseau",
          devices: "Appareils",
          storage: "Stockage",
          commingSoon: "Bientôt disponible"
        },
        podPage: {
          podDetails: "Détails du pod",
          files: "Des dossiers",
          screenshare: "Partage d'écran",
          videoCall: "Appel vidéo",
          call: "Appel"
        },
        podDetailsPage: {
          podName: "Nom du pod",
          addExistingPeerToPod: "Ajouter un pair existant au pod"
        }
      }
    },
    // bengali
    bn: {
      translation: {
        common: {
          inAppNotification: "অ্যাপ বিজ্ঞপ্তি",
          browserNotification: "ব্রাউজার বিজ্ঞপ্তি",
          more: "আরও"
        },
        components: {
          cryptoSignature: "ক্রিপ্টো স্বাক্ষর",
          connectToPeer: {
            connectToPeer: "পিয়ারে সংযোগ করুন",
            shareLink: "সংযোগের জন্য লিঙ্ক শেয়ার করুন",
            shareToConnect: "সংযোগের জন্য শেয়ার করুন",
            enterLink: "সংযোগের জন্য পিয়ারের লিঙ্ক লিখুন",
            shareQr: "সংযোগের জন্য QR কোড শেয়ার করুন",
            scanQr: "সংযোগের জন্য পিয়ারের QR কোড স্ক্যান করুন",
            stopScanning: "স্ক্যানিং বন্ধ করুন"
          },
          menuItems: {
            info: "তথ্য",
            about: "সম্পর্কিত",
            docs: "ডকুমেন্টস",
            github: "গিটহাব",
            reddit: "রেডিট",
            options: "বিকল্প",
            language: "ভাষা",
            lightMode: "হালকা মোড",
            darkMode: "অন্ধকার মোড",
            fullscreen: "পূর্ণ স্ক্রিন",
            exitFullscreen: "পূর্ণ স্ক্রিন থেকে বের হোন",
            install: "অ্যাপ ইনস্টল করুন",
            requestingToInstall: "অ্যাপ ইনস্টল করার জন্য ব্রাউজারের অনুরোধ করছে",
            installPossible: "👍 ইনস্টল সম্ভব। আপনার ব্রাউজারের সেটিংস থেকে চেষ্টা করুন।",
            installDismissed: "👎 অটোইনস্টল খারাপ হয়েছে। আপনি আপনার ব্রাউজার দ্বারা ইনস্টল করতে পারেন।",
            installFailed: "👎 অটোইনস্টল ব্যর্থ হয়েছে। আপনি আপনার ব্রাউজার দ্বারা ইনস্টল করতে পারেন।",
            installNotSupported: "👎 অটোইনস্টল ব্যর্থ হয়েছে। আপনি আপনার ব্রাউজার দ্বারা ইনস্টল করতে পারেন।",
            profile: "প্রোফাইল",
            terms: "শর্তাদি"
          }
        },
        loginPage: {
          pageTitle: "প্রোফাইল তৈরি করুন",
          setProfile: "প্রোফাইল সেট করুন",
          setPreference: "পছন্দ সেট করুন",
          inAppNotification: "অ্যাপ বিজ্ঞপ্তি",
          browserNotification: "ব্রাউজার বিজ্ঞপ্তি",
          termsAgreement: "আমি এই শর্তাদিগুলি এবং শর্তাগুলি স্বীকার করি, এবং আমি স্বীকার করি যে এই অ্যাপটি বর্তমানে পরীক্ষামূলক পর্যায়ে আছে। আমি বুঝেছি যে বৈশিষ্ট্যগুলি এবং সুবিধাগুলি পরিবর্তন করতে পারে।",
          connect: "সংযোগ করুন",
          loadProfileFromFile: "ফাইল থেকে প্রোফাইল লোড করুন",
          setAvatar: "অবতার সেট করুন",
          displayName: "প্রদর্শনীর নাম",
          cryptoSignature: "ক্রিপ্টো স্বাক্ষর",
          welcome: "positive-intentions একটি ব্রাউজার নির্ভরশীল, নিবন্ধনকৃত ছাড়াই একটি পি 2 পি চ্যাট অ্যাপ্লিকেশন যা সুরক্ষিত মেসেজ, ভিডিও কল এবং পুশ বিজ্ঞপ্তি এবং সহজে ডেটা রপ্তানি / আমদানি সরবরাহ করে। এটি সবই জাভাস্ক্রিপ্ট ভিত্তিক প্রগ্রেসিভ ওয়েব অ্যাপ্লিকেশনে রয়েছে।",
          featuresInclude: "নোট: এই অ্যাপ্লিকেশনটি একটি প্রযুক্তিগত প্রমাণ কনসেপ্ট এবং একটি চলমান কাজ। কিছু বৈশিষ্ট্য নিম্নলিখিত:",
          noCookies: "কুকিজ নেই",
          noRegistration: "নিবন্ধন নেই",
          noInstalling: "ইনস্টল করা নেই",
          groupMessaging: "গ্রুপ মেসেজিং",
          textMessaging: "টেক্সট মেসেজিং",
          multimediaMessaging: "মাল্টিমিডিয়া মেসেজিং",
          videoCalls: "ভিডিও কল",
          dataOwnership: "ডেটা মালিকানা",
          screensharing: "স্ক্রিন শেয়ারিং (ডেস্কটপ ব্রাউজারে)",
          fileTransfer: "ফাইল ট্রান্সফার",
          getStarted: "প্রফাইল তৈরি করে শুরু করুন। আপনার প্রোফাইলটি আপনার ডিভাইসে থাকবে, কোনও সার্ভার নেই এবং ব্যক্তিগত তথ্য দিতে হবে না।"
        },
        contactsPage: {
          pageTitle: "যোগাযোগ"
        },
        profilePage: {
          pageTitle: "প্রোফাইল",
          changeAvatar: "অবতার পরিবর্তন করুন",
          displayName: "প্রদর্শনীর নাম",
          more: "আরও",
          regenerateConnectionId: "সংযোগ আইডি পুনর্জন্ম করুন",
          preferences: "পছন্দসমূহ",
          backupProfile: "প্রোফাইল ব্যাকআপ",
          logout: "প্রস্থান"
        },
        podsPage: {
          pageTitle: "পড়",
          social: "সামাজিক",
          cloud: "মেঘ",
          network: "নেটওয়ার্ক",
          devices: "ডিভাইস",
          storage: "স্টোরেজ",
          commingSoon: "শীঘ্রই আসছে"
        },
        contactDetailsPage: {
          contactDisplayName: "যোগাযোগের প্রদর্শনীর নাম",
          goToPodWith: "{{displayName}} এর সাথে পড়ে যান",
          createNewPodWith: "{{displayName}} এর সাথে নতুন পড় তৈরি করুন",
          podName: "পড়ের নাম",
          createPod: "পড় তৈরি করুন",
          peerId: "পিয়ার আইডি",
          connectionId: "সংযোগ আইডি",
          registerNewDevice: "নতুন ডিভাইস নিবন্ধন করুন",
          blockContact: "যোগাযোগ ব্লক করুন"
        },
        podPage: {
          podDetails: "পড় বিশদ",
          files: "ফাইল",
          screenshare: "স্ক্রিন শেয়ার",
          videoCall: "ভিডিও কল",
          call: "কল"
        },
        podDetailsPage: {
          podName: "পড়ের নাম",
          addExistingPeerToPod: "পড়ে বিদ্যমান পিয়ার যোগ করুন"
        }
      }
    },
    // german
    de: {
      translation: {
        common: {
          inAppNotification: "App-Benachrichtigungen",
          browserNotification: "Browser-Benachrichtigungen",
          more: "Mehr"
        },
        components: {
          cryptoSignature: "Kryptografische Signatur",
          connectToPeer: {
            connectToPeer: "Mit Peer verbinden",
            shareLink: "Link zum Verbinden teilen",
            shareToConnect: "Teilen zum Verbinden",
            enterLink: "Link des Peers zum Verbinden eingeben",
            shareQr: "QR-Code zum Verbinden teilen",
            scanQr: "QR-Code des Peers zum Verbinden scannen",
            stopScanning: "Scannen beenden"
          },
          menuItems: {
            info: "Info",
            about: "Über",
            docs: "Dokumente",
            github: "Github",
            reddit: "Reddit",
            options: "Optionen",
            language: "Sprache",
            lightMode: "Heller Modus",
            darkMode: "Dunkler Modus",
            fullscreen: "Vollbild",
            exitFullscreen: "Vollbild beenden",
            install: "App installieren",
            requestingToInstall: "Fordert den Browser auf, die App zu installieren",
            installPossible: "👍 Installation möglich. Versuchen Sie es in den Einstellungen Ihres Browsers.",
            installDismissed: "👎 Automatische Installation abgelehnt. Sie können über Ihren Browser installieren.",
            installFailed: "👎 Automatische Installation fehlgeschlagen. Sie können über Ihren Browser installieren.",
            installNotSupported: "👎 Automatische Installation fehlgeschlagen. Sie können über Ihren Browser installieren.",
            profile: "Profil",
            terms: "Bedingungen"
          }
        },
        loginPage: {
          pageTitle: "Profil erstellen",
          setProfile: "Profil festlegen",
          setPreference: "Einstellung festlegen",
          inAppNotification: "App-Benachrichtigungen",
          browserNotification: "Browser-Benachrichtigungen",
          termsAgreement: "Ich stimme diesen Bedingungen und Konditionen zu und erkenne an, dass diese App derzeit in der Testphase ist. Ich verstehe, dass sich Funktionen und Funktionen ändern können.",
          connect: "Verbinden",
          loadProfileFromFile: "Profil aus Datei laden",
          setAvatar: "Avatar festlegen",
          displayName: "Anzeigename",
          cryptoSignature: "Kryptografische Signatur",
          welcome: "positive-intentions ist eine browserunabhängige, registrierungsfreie P2P-Chat-App, die sichere Nachrichten, Videoanrufe und Datenbesitz mit Push-Benachrichtigungen und einfacher Datenexport / -import bietet. All dies ist in einer JavaScript-basierten progressiven Webanwendung enthalten.",
          featuresInclude: "Hinweis: Diese App ist ein technisches Konzepttest und eine laufende Arbeit. Einige der Funktionen umfassen:",
          noCookies: "Keine Cookies",
          noRegistration: "Keine Registrierung",
          noInstalling: "Keine Installation",
          groupMessaging: "Gruppen-Messaging",
          textMessaging: "Textnachrichten",
          multimediaMessaging: "Multimedia-Messaging",
          videoCalls: "Videoanrufe",
          dataOwnership: "Datenbesitz",
          screensharing: "Bildschirmfreigabe (auf Desktop-Browsern)",
          fileTransfer: "Dateiübertragung",
          getStarted: "Beginnen Sie mit der Erstellung eines Profils. Ihr Profil bleibt auf Ihrem Gerät, ohne Server und ohne persönliche Informationen."
        },
        contactsPage: {
          pageTitle: "Kontakte"
        },
        profilePage: {
          pageTitle: "Profil",
          changeAvatar: "Avatar ändern",
          displayName: "Anzeigename",
          more: "Mehr",
          regenerateConnectionId: "Verbindungs-ID neu generieren",
          preferences: "Einstellungen",
          backupProfile: "Profil sichern",
          logout: "Ausloggen"
        },
        podsPage: {
          pageTitle: "Pods",
          social: "Sozial",
          cloud: "Wolke",
          network: "Netzwerk",
          devices: "Geräte",
          storage: "Lagerung",
          commingSoon: "Demnächst verfügbar"
        },
        contactDetailsPage: {
          contactDisplayName: "Anzeigename des Kontakts",
          goToPodWith: "Zum Pod mit {{displayName}} gehen",
          createNewPodWith: "Neuen Pod mit {{displayName}} erstellen",
          podName: "Pod-Name",
          createPod: "Pod erstellen",
          peerId: "Peer-ID",
          connectionId: "Verbindungs-ID",
          registerNewDevice: "Neues Gerät registrieren",
          blockContact: "Kontakt blockieren"
        },
        podPage: {
          podDetails: "Pod-Details",
          files: "Dateien",
          screenshare: "Bildschirm teilen",
          videoCall: "Videoanruf",
          call: "Anruf"
        },
        podDetailsPage: {
          podName: "Pod-Name",
          addExistingPeerToPod: "Bestehenden Peer zum Pod hinzufügen"
        }
      }
    },
    // italian
    it: {
      translation: {
        common: {
          inAppNotification: "Notifiche dell'app",
          browserNotification: "Notifiche del browser",
          more: "Di Più"
        },
        components: {
          cryptoSignature: "Firma crittografica",
          connectToPeer: {
            connectToPeer: "Connetti al peer",
            shareLink: "Condividi il link per connetterti",
            shareToConnect: "Condividi per connetterti",
            enterLink: "Inserisci il link del peer per connetterti",
            shareQr: "Condividi il codice QR per connetterti",
            scanQr: "Scansiona il codice QR del peer per connetterti",
            stopScanning: "Interrompi la scansione"
          },
          menuItems: {
            info: "Informazioni",
            about: "Di",
            docs: "Documenti",
            github: "Github",
            reddit: "Reddit",
            options: "Opzioni",
            language: "Lingua",
            lightMode: "Modalità luce",
            darkMode: "Modalità scura",
            fullscreen: "Schermo intero",
            exitFullscreen: "Esci da schermo intero",
            install: "Installa l'app",
            requestingToInstall: "Richiesta al browser di installare l'app",
            installPossible: "👍 Installazione possibile. Prova dalle impostazioni del tuo browser.",
            installDismissed: "👎 Installazione automatica respinta. Puoi installare tramite il tuo browser.",
            installFailed: "👎 Installazione automatica non riuscita. Puoi installare tramite il tuo browser.",
            installNotSupported: "👎 Installazione automatica non riuscita. Puoi installare tramite il tuo browser.",
            profile: "Profilo",
            terms: "Termini"
          }
        },
        loginPage: {
          pageTitle: "Crea un profilo",
          setProfile: "Imposta il profilo",
          setPreference: "Imposta la preferenza",
          inAppNotification: "Notifiche dell'app",
          browserNotification: "Notifiche del browser",
          termsAgreement: "Accetto questi Termini e Condizioni e riconosco che questa app è attualmente in fase di test. Comprendo che le funzionalità e le funzionalità possono cambiare.",
          connect: "Collegare",
          loadProfileFromFile: "Carica profilo da file",
          setAvatar: "Imposta avatar",
          displayName: "Nome da visualizzare",
          cryptoSignature: "Firma crittografica",
          welcome: "positive-intentions è un'app di chat P2P indipendente dal browser, senza registrazione, che fornisce messaggi sicuri, videochiamate e proprietà dei dati con notifiche push e un'esportazione / importazione dati semplice. Tutto questo è contenuto in un'app Web progressiva basata su JavaScript.",
          featuresInclude: "Nota: questa app è un concetto tecnico di test e un lavoro in corso. Alcune delle funzionalità includono:",
          noCookies: "Nessun biscotto",
          noRegistration: "Nessuna registrazione",
          noInstalling: "Nessuna installazione",
          groupMessaging: "Messaggistica di gruppo",
          textMessaging: "Messaggistica di testo",
          multimediaMessaging: "Messaggistica multimediale",
          videoCalls: "Videochiamate",
          dataOwnership: "Proprietà dei dati",
          screensharing: "Condivisione dello schermo (su browser desktop)",
          fileTransfer: "Trasferimento di file",
          getStarted: "Inizia creando un profilo. Il tuo profilo rimane sul tuo dispositivo, senza server coinvolti e senza fornire informazioni personali."
        },
        contactsPage: {
          pageTitle: "Contatti"
        },
        profilePage: {
          pageTitle: "Profilo",
          changeAvatar: "Cambia avatar",
          displayName: "Nome da visualizzare",
          more: "Di Più",
          regenerateConnectionId: "Rigenera ID di connessione",
          preferences: "Preferenze",
          backupProfile: "Profilo di backup",
          logout: "Disconnettersi"
        },
        podsPage: {
          pageTitle: "Pods",
          social: "Sociale",
          cloud: "Nuvola",
          network: "Rete",
          devices: "Dispositivi",
          storage: "Conservazione",
          commingSoon: "Prossimamente disponibile"
        },
        podPage: {
          podDetails: "Dettagli pod",
          files: "File",
          screenshare: "Condivisione dello schermo",
          videoCall: "Videochiamata",
          call: "Chiamata"
        },
        podDetailsPage: {
          podName: "Nome del pod",
          addExistingPeerToPod: "Aggiungi peer esistente al pod"
        }
      }
    },
    // korean
    kr: {
      translation: {
        common: {
          inAppNotification: "앱 알림",
          browserNotification: "브라우저 알림",
          more: "더"
        },
        components: {
          cryptoSignature: "암호 서명",
          connectToPeer: {
            connectToPeer: "피어에 연결",
            shareLink: "연결을 공유 할 링크",
            shareToConnect: "연결을 공유",
            enterLink: "연결할 피어 링크 입력",
            shareQr: "연결을 공유 할 QR 코드",
            scanQr: "연결할 피어 QR 코드 스캔",
            stopScanning: "스캔 중지"
          },
          menuItems: {
            info: "정보",
            about: "약",
            docs: "서류",
            github: "Github",
            reddit: "Reddit",
            options: "옵션",
            language: "언어",
            lightMode: "라이트 모드",
            darkMode: "다크 모드",
            fullscreen: "전체 화면",
            exitFullscreen: "전체 화면 종료",
            install: "앱 설치",
            requestingToInstall: "브라우저에 앱 설치 요청",
            installPossible: "👍 설치 가능. 브라우저 설정에서 시도하십시오.",
            installDismissed: "👎 자동 설치가 거부되었습니다. 브라우저에서 설치할 수 있습니다.",
            installFailed: "👎 자동 설치 실패. 브라우저에서 설치할 수 있습니다.",
            installNotSupported: "👎 자동 설치 실패. 브라우저에서 설치할 수 있습니다.",
            profile: "윤곽",
            terms: "조건"
          }
        },
        loginPage: {
          pageTitle: "프로필 만들기",
          setProfile: "프로필 설정",
          setPreference: "설정 설정",
          inAppNotification: "앱 알림",
          browserNotification: "브라우저 알림",
          termsAgreement: "이 약관에 동의하고이 앱이 현재 테스트 단계임을 인정합니다. 기능과 기능이 변경 될 수 있음을 이해합니다.",
          connect: "연결",
          loadProfileFromFile: "파일에서 프로필 로드",
          setAvatar: "아바타 설정",
          displayName: "표시 이름",
          cryptoSignature: "암호 서명",
          welcome: "positive-intentions은 브라우저에 독립적이고 등록되지 않은 P2P 채팅 앱으로 안전한 메시지, 비디오 통화 및 푸시 알림 및 간단한 데이터 내보내기 / 가져 오기를 제공합니다. 이 모든 것은 JavaScript 기반의 프로그레시브 웹 응용 프로그램에 포함되어 있습니다.",
          featuresInclude: "참고 :이 앱은 기술적인 개념 테스트이며 진행 중인 작업입니다. 일부 기능은 다음과 같습니다.",
          noCookies: "쿠키 없음",
          noRegistration: "등록 없음",
          noInstalling: "설치 없음",
          groupMessaging: "그룹 메시징",
          textMessaging: "문자 메시지",
          multimediaMessaging: "멀티미디어 메시징",
          videoCalls: "비디오 통화",
          dataOwnership: "데이터 소유권",
          screensharing: "화면 공유 (데스크톱 브라우저에서)",
          fileTransfer: "파일 전송",
          getStarted: "프로필을 만들어 시작하십시오. 프로필은 서버없이 기기에 유지되며 개인 정보를 제공하지 않습니다."
        },
        contactsPage: {
          pageTitle: "연락처"
        },
        profilePage: {
          pageTitle: "윤곽",
          changeAvatar: "아바타 변경",
          displayName: "표시 이름",
          more: "더",
          regenerateConnectionId: "연결 ID 재생성",
          preferences: "환경 설정",
          backupProfile: "프로필 백업",
          logout: "로그 아웃"
        },
        podsPage: {
          pageTitle: "콩팥",
          social: "사회",
          cloud: "구름",
          network: "회로망",
          devices: "장치",
          storage: "저장",
          commingSoon: "곧 출시 예정"
        },
        contactDetailsPage: {
          contactDisplayName: "연락처 표시 이름",
          goToPodWith: "{{displayName}}와 함께 Pod로 이동",
          createNewPodWith: "{{displayName}}와 새 Pod 만들기",
          podName: "Pod 이름",
          createPod: "Pod 만들기",
          peerId: "피어 ID",
          connectionId: "연결 ID",
          registerNewDevice: "새 장치 등록",
          blockContact: "연락처 차단"
        },
        podPage: {
          podDetails: "Pod 세부 정보",
          files: "파일",
          screenshare: "화면 공유",
          videoCall: "영상 통화",
          call: "전화"
        },
        podDetailsPage: {
          podName: "Pod 이름",
          addExistingPeerToPod: "기존 피어를 Pod에 추가"
        }
      }
    },
    // dutch
    nl: {
      translation: {
        common: {
          inAppNotification: "App-meldingen",
          browserNotification: "Browsermeldingen",
          more: "Meer"
        },
        components: {
          cryptoSignature: "Cryptografische handtekening",
          connectToPeer: {
            connectToPeer: "Verbinden met peer",
            shareLink: "Deel link om verbinding te maken",
            shareToConnect: "Delen om verbinding te maken",
            enterLink: "Voer de link van de peer in om verbinding te maken",
            shareQr: "Deel QR-code om verbinding te maken",
            scanQr: "Scan QR-code van peer om verbinding te maken",
            stopScanning: "Stop met scannen"
          },
          menuItems: {
            info: "Info",
            about: "Over",
            docs: "Documenten",
            github: "Github",
            reddit: "Reddit",
            options: "Opties",
            language: "Taal",
            lightMode: "Lichte modus",
            darkMode: "Donkere modus",
            fullscreen: "Volledig scherm",
            exitFullscreen: "Volledig scherm afsluiten",
            install: "App installeren",
            requestingToInstall: "Verzoek aan browser om app te installeren",
            installPossible: "👍 Installatie mogelijk. Probeer vanuit de instellingen van uw browser.",
            installDismissed: "👎 Automatische installatie afgewezen. U kunt installeren via uw browser.",
            installFailed: "👎 Automatische installatie mislukt. U kunt installeren via uw browser.",
            installNotSupported: "👎 Automatische installatie mislukt. U kunt installeren via uw browser.",
            profile: "Profiel",
            terms: "Voorwaarden"
          }
        },
        loginPage: {
          pageTitle: "Maak een profiel aan",
          setProfile: "Profiel instellen",
          setPreference: "Voorkeur instellen",
          inAppNotification: "App-meldingen",
          browserNotification: "Browsermeldingen",
          termsAgreement: "Ik ga akkoord met deze voorwaarden en erken dat deze app momenteel in de testfase zit. Ik begrijp dat functies en functies kunnen veranderen.",
          connect: "Verbinden",
          loadProfileFromFile: "Profiel uit bestand laden",
          setAvatar: "Avatar instellen",
          displayName: "Weergavenaam",
          cryptoSignature: "Cryptografische handtekening",
          welcome: "positive-intentions is een browseronafhankelijke, niet-geregistreerde P2P-chat-app die veilige berichten, videogesprekken en pushmeldingen en eenvoudige gegevensexport / import biedt. Dit alles is opgenomen in een op JavaScript gebaseerde progressieve webapplicatie.",
          featuresInclude: "Opmerking: deze app is een technische concepttest en een lopend werk. Enkele van de functies zijn onder meer:",
          noCookies: "Geen cookies",
          noRegistration: "Geen registratie",
          noInstalling: "Geen installatie",
          groupMessaging: "Groepsberichten",
          textMessaging: "Tekstberichten",
          multimediaMessaging: "Multimedia-messaging",
          videoCalls: "Video-oproepen",
          dataOwnership: "Gegevensbezit",
          screensharing: "Scherm delen (op desktopbrowser)",
          fileTransfer: "Bestandsoverdracht",
          getStarted: "Begin met het maken van een profiel. Uw profiel blijft op uw apparaat, zonder server en zonder persoonlijke informatie."
        },
        contactsPage: {
          pageTitle: "Contacten"
        },
        profilePage: {
          pageTitle: "Profiel",
          changeAvatar: "Avatar wijzigen",
          displayName: "Weergavenaam",
          more: "Meer",
          regenerateConnectionId: "Verbindings-ID opnieuw genereren",
          preferences: "Voorkeuren",
          backupProfile: "Profiel backuppen",
          logout: "Uitloggen"
        },
        podsPage: {
          pageTitle: "Peulen",
          social: "Sociaal",
          cloud: "Wolk",
          network: "Netwerk",
          devices: "Apparaten",
          storage: "Opslag",
          commingSoon: "Binnenkort beschikbaar"
        },
        contactDetailsPage: {
          contactDisplayName: "Contact weergavenaam",
          goToPodWith: "Ga naar Pod met {{displayName}}",
          createNewPodWith: "Maak nieuwe Pod met {{displayName}}",
          podName: "Pod naam",
          createPod: "Pod maken",
          peerId: "Peer-ID",
          connectionId: "Verbindings-ID",
          registerNewDevice: "Nieuw apparaat registreren",
          blockContact: "Contact blokkeren"
        },
        podPage: {
          podDetails: "Pod details",
          files: "Bestanden",
          screenshare: "Scherm delen",
          videoCall: "Videogesprek",
          call: "Oproep"
        },
        podDetailsPage: {
          podName: "Pod naam",
          addExistingPeerToPod: "Bestaande peer toevoegen aan Pod"
        }
      }
    },
    // polish
    pl: {
      translation: {
        common: {
          inAppNotification: "Powiadomienia aplikacji",
          browserNotification: "Powiadomienia przeglądarki",
          more: "Więcej"
        },
        components: {
          cryptoSignature: "Podpis kryptograficzny",
          connectToPeer: {
            connectToPeer: "Połącz z peerem",
            shareLink: "Udostępnij link, aby połączyć się",
            shareToConnect: "Udostępnij, aby połączyć się",
            enterLink: "Wprowadź link peer, aby połączyć się",
            shareQr: "Udostępnij kod QR, aby połączyć się",
            scanQr: "Skanuj kod QR peer, aby połączyć się",
            stopScanning: "Przestań skanować"
          },
          menuItems: {
            info: "Info",
            about: "O",
            docs: "Dokumenty",
            github: "Github",
            reddit: "Reddit",
            options: "Opcje",
            language: "Język",
            lightMode: "Tryb jasny",
            darkMode: "Tryb ciemny",
            fullscreen: "Pełny ekran",
            exitFullscreen: "Wyjdź z trybu pełnoekranowego",
            install: "Zainstaluj aplikację",
            requestingToInstall: "Prośba do przeglądarki o zainstalowanie aplikacji",
            installPossible: "👍 Instalacja możliwa. Spróbuj z ustawień przeglądarki.",
            installDismissed: "👎 Automatyczna instalacja odrzucona. Możesz zainstalować za pomocą przeglądarki.",
            installFailed: "👎 Automatyczna instalacja nie powiodła się. Możesz zainstalować za pomocą przeglądarki.",
            installNotSupported: "👎 Automatyczna instalacja nie powiodła się. Możesz zainstalować za pomocą przeglądarki.",
            profile: "Profil",
            terms: "Warunki"
          }
        },
        loginPage: {
          pageTitle: "Utwórz profil",
          setProfile: "Ustaw profil",
          setPreference: "Ustaw preferencję",
          inAppNotification: "Powiadomienia aplikacji",
          browserNotification: "Powiadomienia przeglądarki",
          termsAgreement: "Akceptuję te warunki i warunki oraz uznaję, że ta aplikacja jest obecnie w fazie testów. Rozumiem, że funkcje i funkcje mogą ulec zmianie.",
          connect: "Połącz",
          loadProfileFromFile: "Załaduj profil z pliku",
          setAvatar: "Ustaw awatar",
          displayName: "Nazwa wyświetlana",
          cryptoSignature: "Podpis kryptograficzny",
          welcome: "positive-intentions to aplikacja czatu P2P niezależna od przeglądarki, bez rejestracji, która zapewnia bezpieczne wiadomości, rozmowy wideo i własność danych z powiadomieniami push oraz prostym eksportem / importem danych. Wszystko to znajduje się w opartej na JavaScript progresywnej aplikacji internetowej.",
          featuresInclude: "Uwaga: ta aplikacja jest testem koncepcji technicznej i pracą w toku. Niektóre z funkcji obejmują:",
          noCookies: "Brak ciasteczek",
          noRegistration: "Brak rejestracji",
          noInstalling: "Brak instalacji",
          groupMessaging: "Wiadomości grupowe",
          textMessaging: "Wiadomości tekstowe",
          multimediaMessaging: "Wiadomości multimedialne",
          videoCalls: "Połączenia wideo",
          dataOwnership: "Własność danych",
          screensharing: "Udostępnianie ekranu (w przeglądarkach na komputerze)",
          fileTransfer: "Transfer plików",
          getStarted: "Zacznij od utworzenia profilu. Twój profil pozostaje na Twoim urządzeniu, bez serwera i bez udostępniania danych osobowych."
        },
        contactsPage: {
          pageTitle: "Kontakty"
        },
        profilePage: {
          pageTitle: "Profil",
          changeAvatar: "Zmień awatar",
          displayName: "Nazwa wyświetlana",
          more: "Więcej",
          regenerateConnectionId: "Wygeneruj ponownie identyfikator połączenia",
          preferences: "Preferencje",
          backupProfile: "Kopia zapasowa profilu",
          logout: "Wyloguj"
        },
        podsPage: {
          pageTitle: "Strąki",
          social: "Społeczny",
          cloud: "Chmura",
          network: "Sieć",
          devices: "Urządzenia",
          storage: "Przechowywanie",
          commingSoon: "Wkrótce dostępne"
        },
        contactDetailsPage: {
          contactDisplayName: "Wyświetlana nazwa kontaktu",
          goToPodWith: "Przejdź do Pod z {{displayName}}",
          createNewPodWith: "Utwórz nowy Pod z {{displayName}}",
          podName: "Nazwa strąka",
          createPod: "Utwórz strąk",
          peerId: "Identyfikator pary",
          connectionId: "Identyfikator połączenia",
          registerNewDevice: "Zarejestruj nowe urządzenie",
          blockContact: "Zablokuj kontakt"
        },
        podPage: {
          podDetails: "Szczegóły strąka",
          files: "Pliki",
          screenshare: "Udostępnianie ekranu",
          videoCall: "Połączenie wideo",
          call: "Połączenie"
        },
        podDetailsPage: {
          podName: "Nazwa strąka",
          addExistingPeerToPod: "Dodaj istniejącego peer do strąka"
        }
      }
    },
    // bahasa indonesia
    id: {
      translation: {
        common: {
          inAppNotification: "Notifikasi aplikasi",
          browserNotification: "Notifikasi browser",
          more: "Lebih"
        },
        components: {
          cryptoSignature: "Tanda tangan kripto",
          connectToPeer: {
            connectToPeer: "Hubungkan ke peer",
            shareLink: "Bagikan tautan untuk terhubung",
            shareToConnect: "Bagikan untuk terhubung",
            enterLink: "Masukkan tautan peer untuk terhubung",
            shareQr: "Bagikan kode QR untuk terhubung",
            scanQr: "Pindai kode QR peer untuk terhubung",
            stopScanning: "Berhenti memindai"
          },
          menuItems: {
            info: "Info",
            about: "Tentang",
            docs: "Dokumen",
            github: "Github",
            reddit: "Reddit",
            options: "Pilihan",
            language: "Bahasa",
            lightMode: "Mode terang",
            darkMode: "Mode gelap",
            fullscreen: "Layar penuh",
            exitFullscreen: "Keluar dari layar penuh",
            install: "Pasang aplikasi",
            requestingToInstall: "Meminta browser untuk memasang aplikasi",
            installPossible: "👍 Instalasi memungkinkan. Coba dari pengaturan browser Anda.",
            installDismissed: "👎 Instalasi otomatis ditolak. Anda dapat menginstal melalui browser Anda.",
            installFailed: "👎 Instalasi otomatis gagal. Anda dapat menginstal melalui browser Anda.",
            installNotSupported: "👎 Instalasi otomatis gagal. Anda dapat menginstal melalui browser Anda.",
            profile: "Profil",
            terms: "Persyaratan"
          }
        },
        loginPage: {
          pageTitle: "Buat profil",
          setProfile: "Atur profil",
          setPreference: "Atur preferensi",
          inAppNotification: "Notifikasi aplikasi",
          browserNotification: "Notifikasi browser",
          termsAgreement: "Saya menyetujui Syarat dan Ketentuan ini dan mengakui bahwa aplikasi ini saat ini dalam tahap uji coba. Saya mengerti bahwa fitur dan fungsi dapat berubah.",
          connect: "Hubungkan",
          loadProfileFromFile: "Muat profil dari file",
          setAvatar: "Atur avatar",
          displayName: "Nama tampilan",
          cryptoSignature: "Tanda tangan kripto",
          welcome: "positive-intentions adalah aplikasi obrolan P2P independen dari browser, tanpa pendaftaran, yang menyediakan pesan aman, panggilan video, dan kepemilikan data dengan notifikasi push dan ekspor / impor data yang sederhana. Semua ini tercakup dalam aplikasi web progresif berbasis JavaScript.",
          featuresInclude: "Catatan: aplikasi ini adalah konsep uji coba teknis dan pekerjaan yang sedang berlangsung. Beberapa fitur termasuk:",
          noCookies: "Tidak ada kue",
          noRegistration: "Tidak ada pendaftaran",
          noInstalling: "Tidak ada instalasi",
          groupMessaging: "Pesan grup",
          textMessaging: "Pesan teks",
          multimediaMessaging: "Pesan multimedia",
          videoCalls: "Panggilan video",
          dataOwnership: "Kepemilikan data",
          screensharing: "Berbagi layar (di browser desktop)",
          fileTransfer: "Transfer file",
          getStarted: "Mulai dengan membuat profil. Profil Anda tetap di perangkat Anda, tanpa server dan tanpa memberikan informasi pribadi."
        },
        contactsPage: {
          pageTitle: "Kontak"
        },
        profilePage: {
          pageTitle: "Profil",
          changeAvatar: "Ubah avatar",
          displayName: "Nama tampilan",
          more: "Lebih",
          regenerateConnectionId: "Regenerasi ID koneksi",
          preferences: "Preferensi",
          backupProfile: "Cadangkan profil",
          logout: "Keluar"
        },
        podsPage: {
          pageTitle: "Pod",
          social: "Sosial",
          cloud: "Awan",
          network: "Jaringan",
          devices: "Perangkat",
          storage: "Penyimpanan",
          commingSoon: "Segera hadir"
        },
        podPage: {
          podDetails: "Detail pod",
          files: "Berkas",
          screenshare: "Berbagi layar",
          videoCall: "Panggilan video",
          call: "Panggilan"
        },
        podDetailsPage: {
          podName: "Nama pod",
          addExistingPeerToPod: "Tambahkan peer yang ada ke pod"
        }
      }
    },
    // swahili
    sw: {
      translation: {
        common: {
          inAppNotification: "Arifa ya programu",
          browserNotification: "Arifa ya kivinjari",
          more: "Zaidi"
        },
        components: {
          cryptoSignature: "Sahihi ya kripto",
          connectToPeer: {
            connectToPeer: "Unakili kwa rika",
            shareLink: "Shiriki kiunga ili kuungana",
            shareToConnect: "Shiriki kuungana",
            enterLink: "Ingiza kiunga cha rika ili kuungana",
            shareQr: "Shiriki nambari ya QR ili kuungana",
            scanQr: "Soma nambari ya QR ya rika ili kuungana",
            stopScanning: "Acha kusoma"
          },
          menuItems: {
            info: "Taarifa",
            about: "Kuhusu",
            docs: "Hati",
            github: "Github",
            reddit: "Reddit",
            options: "Chaguo",
            language: "Lugha",
            lightMode: "Nuru ya mwanga",
            darkMode: "Nuru ya giza",
            fullscreen: "Skrini kamili",
            exitFullscreen: "Toka kwenye skrini kamili",
            install: "Sakinisha programu",
            requestingToInstall: "Omba kivinjari kusakinisha programu",
            installPossible: "👍 Ufungaji unawezekana. Jaribu kutoka kwa mipangilio ya kivinjari chako.",
            installDismissed: "👎 Ufungaji wa moja kwa moja umekataliwa. Unaweza kusakinisha kupitia kivinjari chako.",
            installFailed: "👎 Ufungaji wa moja kwa moja umeshindwa. Unaweza kusakinisha kupitia kivinjari chako.",
            installNotSupported: "👎 Ufungaji wa moja kwa moja umeshindwa. Unaweza kusakinisha kupitia kivinjari chako.",
            profile: "Wasifu",
            terms: "Masharti"
          }
        },
        loginPage: {
          pageTitle: "Unda wasifu",
          setProfile: "Weka wasifu",
          setPreference: "Weka upendeleo",
          inAppNotification: "Arifa ya programu",
          browserNotification: "Arifa ya kivinjari",
          termsAgreement: "Nakubali masharti haya na kutambua kuwa programu hii kwa sasa iko katika hatua ya majaribio. Najua kuwa vipengele na huduma zinaweza kubadilika.",
          connect: "Unakili",
          loadProfileFromFile: "Pakia wasifu kutoka faili",
          setAvatar: "Weka avatar",
          displayName: "Jina la kuonyesha",
          cryptoSignature: "Sahihi ya kripto",
          welcome: "positive-intentions ni programu ya gumzo ya P2P isiyo na kivinjari, isiyo na usajili, ambayo hutoa ujumbe salama, simu za video, na umiliki wa data na arifa za kushinikiza na kuingiza / kutoa data rahisi. Yote haya yamejumuishwa katika programu ya wavuti ya maendeleo ya JavaScript.",
          featuresInclude: "Angalia: programu hii ni jaribio la dhana ya kiufundi na kazi inayoendelea. Baadhi ya huduma ni pamoja na:",
          noCookies: "Hakuna kuki",
          noRegistration: "Hakuna usajili",
          noInstalling: "Hakuna kusakinisha",
          groupMessaging: "Ujumbe wa kikundi",
          textMessaging: "Ujumbe wa maandishi",
          multimediaMessaging: "Ujumbe wa multimedia",
          videoCalls: "Simu za video",
          dataOwnership: "Umiliki wa data",
          screensharing: "Kushiriki skrini (katika kivinjari cha kompyuta)",
          fileTransfer: "Uhamishaji wa faili",
          getStarted: "Anza kwa kuunda wasifu. Wasifu wako unabaki kwenye kifaa chako, bila seva na bila kutoa habari ya kibinafsi."
        },
        contactsPage: {
          pageTitle: "Mawasiliano"
        },
        profilePage: {
          pageTitle: "Wasifu",
          changeAvatar: "Badilisha avatar",
          displayName: "Jina la kuonyesha",
          more: "Zaidi",
          regenerateConnectionId: "Zalisha upya kitambulisho cha uunganisho",
          preferences: "Mapendeleo",
          backupProfile: "Hifadhi wasifu",
          logout: "Toka"
        },
        podsPage: {
          pageTitle: "Mbegu",
          social: "Kijamii",
          cloud: "Wingu",
          network: "Mtandao",
          devices: "Vifaa",
          storage: "Uhifadhi",
          commingSoon: "Inakuja hivi karibuni"
        },
        podPage: {
          podDetails: "Maelezo ya mbegu",
          files: "Faili",
          screenshare: "Shiriki skrini",
          videoCall: "Simu ya video",
          call: "Piga simu"
        },
        podDetailsPage: {
          podName: "Jina la mbegu",
          addExistingPeerToPod: "Ongeza rika lililopo kwenye mbegu"
        }
      }
    },
    // turkish
    tr: {
      translation: {
        common: {
          inAppNotification: "Uygulama bildirimleri",
          browserNotification: "Tarayıcı bildirimleri",
          more: "Daha"
        },
        components: {
          cryptoSignature: "Kripto imza",
          connectToPeer: {
            connectToPeer: "Eşe bağlan",
            shareLink: "Bağlanmak için bağlantıyı paylaşın",
            shareToConnect: "Bağlanmak için paylaş",
            enterLink: "Bağlanmak için eş bağlantısını girin",
            shareQr: "Bağlanmak için QR kodunu paylaşın",
            scanQr: "Bağlanmak için eş QR kodunu tarayın",
            stopScanning: "Taramayı durdur"
          },
          menuItems: {
            info: "Bilgi",
            about: "Hakkında",
            docs: "Belgeler",
            github: "Github",
            reddit: "Reddit",
            options: "Seçenekler",
            language: "Dil",
            lightMode: "Aydınlık mod",
            darkMode: "Karanlık mod",
            fullscreen: "Tam ekran",
            exitFullscreen: "Tam ekrandan çık",
            install: "Uygulama yükle",
            requestingToInstall: "Uygulamayı yüklemek için tarayıcıya istek gönderme",
            installPossible: "👍 Kurulum mümkün. Tarayıcınızın ayarlarından deneyin.",
            installDismissed: "👎 Otomatik kurulum reddedildi. Tarayıcınız aracılığıyla yükleyebilirsiniz.",
            installFailed: "👎 Otomatik kurulum başarısız oldu. Tarayıcınız aracılığıyla yükleyebilirsiniz.",
            installNotSupported: "👎 Otomatik kurulum başarısız oldu. Tarayıcınız aracılığıyla yükleyebilirsiniz.",
            profile: "Profil",
            terms: "Şartlar"
          }
        },
        loginPage: {
          pageTitle: "Profil oluştur",
          setProfile: "Profil ayarla",
          setPreference: "Tercihi ayarla",
          inAppNotification: "Uygulama bildirimleri",
          browserNotification: "Tarayıcı bildirimleri",
          termsAgreement: "Bu koşulları ve koşulları kabul ediyorum ve bu uygulamanın şu anda test aşamasında olduğunu kabul ediyorum. Özelliklerin ve işlevlerin değişebileceğini anlıyorum.",
          connect: "Bağlan",
          loadProfileFromFile: "Dosyadan profil yükle",
          setAvatar: "Avatar ayarla",
          displayName: "Görünen ad",
          cryptoSignature: "Kripto imza",
          welcome: "positive-intentions, güvenli mesajlaşma, video görüşmeleri ve basit veri dışa aktarma / içe aktarma ile tarayıcıdan bağımsız, kayıt olmadan P2P sohbet uygulamasıdır. Tüm bunlar JavaScript tabanlı bir ilerici web uygulamasında sunulmaktadır.",
          featuresInclude: "Not: Bu uygulama teknik bir konsept testi ve devam eden bir çalışmadır. Bazı özellikler şunları içerir:",
          noCookies: "Çerez yok",
          noRegistration: "Kayıt yok",
          noInstalling: "Kurulum yok",
          groupMessaging: "Grup mesajlaşma",
          textMessaging: "Metin mesajlaşma",
          multimediaMessaging: "Multimedya mesajlaşma",
          videoCalls: "Video aramalar",
          dataOwnership: "Veri sahipliği",
          screensharing: "Ekran paylaşımı (masaüstü tarayıcılarında)",
          fileTransfer: "Dosya aktarımı",
          getStarted: "Bir profil oluşturarak başlayın. Profiliniz, sunucu olmadan ve kişisel bilgi vermeden cihazınızda kalır."
        },
        contactsPage: {
          pageTitle: "Kişiler"
        },
        profilePage: {
          pageTitle: "Profil",
          changeAvatar: "Avatarı değiştir",
          displayName: "Görünen ad",
          more: "Daha",
          regenerateConnectionId: "Bağlantı kimliğini yeniden oluştur",
          preferences: "Tercihler",
          backupProfile: "Profil yedekleme",
          logout: "Çıkış Yap"
        },
        podsPage: {
          pageTitle: "Kapsüller",
          social: "Sosyal",
          cloud: "Bulut",
          network: "Ağ",
          devices: "Cihazlar",
          storage: "Depolama",
          commingSoon: "Yakında geliyor"
        },
        podPage: {
          podDetails: "Kapsül ayrıntıları",
          files: "Dosyalar",
          screenshare: "Ekran paylaşımı",
          videoCall: "Video arama",
          call: "Arama"
        },
        podDetailsPage: {
          podName: "Kapsül adı",
          addExistingPeerToPod: "Var olan eşi kapsüle ekle"
        }
      }
    },
    // arabic
    ar: {
      // right to left
      rtl: true,
      translation: {
        common: {
          inAppNotification: "إشعارات التطبيق",
          browserNotification: "إشعارات المتصفح",
          more: "أكثر"
        },
        components: {
          cryptoSignature: "التوقيع الرقمي",
          connectToPeer: {
            connectToPeer: "الاتصال بالنظير",
            shareLink: "مشاركة الرابط للاتصال",
            shareToConnect: "مشاركة للاتصال",
            enterLink: "أدخل رابط النظير للاتصال",
            shareQr: "مشاركة رمز الاستجابة السريعة للاتصال",
            scanQr: "مسح رمز الاستجابة السريعة للنظير للاتصال",
            stopScanning: "إيقاف المسح"
          },
          menuItems: {
            info: "معلومات",
            about: "حول",
            docs: "وثائق",
            github: "Github",
            reddit: "Reddit",
            options: "خيارات",
            language: "لغة",
            lightMode: "الوضع الفاتح",
            darkMode: "الوضع الداكن",
            fullscreen: "ملء الشاشة",
            exitFullscreen: "الخروج من ملء الشاشة",
            install: "تثبيت التطبيق",
            requestingToInstall: "طلب من المتصفح تثبيت التطبيق",
            installPossible: "👍 التثبيت ممكن. جرب من إعدادات المتصفح الخاص بك.",
            installDismissed: "👎 تم رفض التثبيت التلقائي. يمكنك التثبيت عبر متصفحك.",
            installFailed: "👎 فشل التثبيت التلقائي. يمكنك التثبيت عبر متصفحك.",
            installNotSupported: "👎 فشل التثبيت التلقائي. يمكنك التثبيت عبر متصفحك.",
            profile: "الملف الشخصي",
            terms: "الشروط"
          }
        },
        loginPage: {
          pageTitle: "إنشاء ملف تعريف",
          setProfile: "تعيين الملف الشخصي",
          setPreference: "تعيين التفضيل",
          inAppNotification: "إشعارات التطبيق",
          browserNotification: "إشعارات المتصفح",
          termsAgreement: "أوافق على هذه الشروط والأحكام وأقر بأن هذا التطبيق في مرحلة الاختبار حاليًا. أنا أفهم أن الميزات والوظائف قد تتغير.",
          connect: "الاتصال",
          loadProfileFromFile: "تحميل الملف الشخصي من الملف",
          setAvatar: "تعيين الصورة الرمزية",
          displayName: "اسم العرض",
          cryptoSignature: "التوقيع الرقمي",
          welcome: "positive-intentions هو تطبيق دردشة P2P مستقل عن المتصفح ، بدون تسجيل ، يوفر رسائل آمنة ومكالمات فيديو وملكية البيانات مع إشعارات الدفع وتصدير / استيراد البيانات البسيطة. كل هذا مدمج في تطبيق ويب تقدمي قائم على JavaScript.",
          featuresInclude: "ملاحظة: هذا التطبيق هو اختبار مفهوم فني وعمل قائم. تشمل بعض الميزات:",
          noCookies: "لا ملفات تعريف الارتباط",
          noRegistration: "لا تسجيل",
          noInstalling: "لا تثبيت",
          groupMessaging: "رسائل المجموعة",
          textMessaging: "رسائل نصية",
          multimediaMessaging: "رسائل الوسائط المتعددة",
          videoCalls: "مكالمات فيديو",
          dataOwnership: "ملكية البيانات",
          screensharing: "مشاركة الشاشة (في متصفحات سطح المكتب)",
          fileTransfer: "نقل الملفات",
          getStarted: "ابدأ بإنشاء ملف تعريف. يبقى ملف التعريف الخاص بك على جهازك ، دون خادم ودون تقديم معلومات شخصية."
        },
        contactsPage: {
          pageTitle: "جهات الاتصال"
        },
        profilePage: {
          pageTitle: "الملف الشخصي",
          changeAvatar: "تغيير الصورة الرمزية",
          displayName: "اسم العرض",
          more: "أكثر",
          regenerateConnectionId: "إعادة توليد معرف الاتصال",
          preferences: "تفضيلات",
          backupProfile: "نسخ احتياطي للملف الشخصي",
          logout: "تسجيل خروج"
        },
        podsPage: {
          pageTitle: "الباقات",
          social: "اجتماعي",
          cloud: "غيمة",
          network: "شبكة",
          devices: "أجهزة",
          storage: "تخزين",
          commingSoon: "قريبا"
        },
        contactDetailsPage: {
          contactDisplayName: "اسم العرض للاتصال",
          goToPodWith: "انتقل إلى Pod مع {{displayName}}",
          createNewPodWith: "إنشاء Pod جديد مع {{displayName}}",
          podName: "اسم البود",
          createPod: "إنشاء Pod",
          peerId: "معرف النظير",
          connectionId: "معرف الاتصال",
          registerNewDevice: "تسجيل جهاز جديد",
          blockContact: "حظر جهة الاتصال"
        },
        podPage: {
          podDetails: "تفاصيل البود",
          files: "ملفات",
          screenshare: "مشاركة الشاشة",
          videoCall: "مكالمة فيديو",
          call: "مكالمة"
        },
        podDetailsPage: {
          podName: "اسم البود",
          addExistingPeerToPod: "إضافة نظير موجود إلى Pod"
        }
      }
    },
    // vietnamese
    vi: {
      translation: {
        common: {
          inAppNotification: "Thông báo ứng dụng",
          browserNotification: "Thông báo trình duyệt",
          more: "Thêm"
        },
        components: {
          cryptoSignature: "Chữ ký mật mã",
          connectToPeer: {
            connectToPeer: "Kết nối với peer",
            shareLink: "Chia sẻ liên kết để kết nối",
            shareToConnect: "Chia sẻ để kết nối",
            enterLink: "Nhập liên kết peer để kết nối",
            shareQr: "Chia sẻ mã QR để kết nối",
            scanQr: "Quét mã QR của peer để kết nối",
            stopScanning: "Ngừng quét"
          },
          menuItems: {
            info: "Thông tin",
            about: "Về",
            docs: "Tài liệu",
            github: "Github",
            reddit: "Reddit",
            options: "Tùy chọn",
            language: "Ngôn ngữ",
            lightMode: "Chế độ sáng",
            darkMode: "Chế độ tối",
            fullscreen: "Toàn màn hình",
            exitFullscreen: "Thoát khỏi toàn màn hình",
            install: "Cài đặt ứng dụng",
            requestingToInstall: "Yêu cầu trình duyệt cài đặt ứng dụng",
            installPossible: "👍 Cài đặt có thể. Hãy thử từ cài đặt trình duyệt của bạn.",
            installDismissed: "👎 Cài đặt tự động bị từ chối. Bạn có thể cài đặt thông qua trình duyệt của mình.",
            installFailed: "👎 Cài đặt tự động thất bại. Bạn có thể cài đặt thông qua trình duyệt của mình.",
            installNotSupported: "👎 Cài đặt tự động thất bại. Bạn có thể cài đặt thông qua trình duyệt của mình.",
            profile: "Hồ sơ",
            terms: "Điều khoản"
          }
        },
        loginPage: {
          pageTitle: "Tạo hồ sơ",
          setProfile: "Thiết lập hồ sơ",
          setPreference: "Thiết lập ưu tiên",
          inAppNotification: "Thông báo ứng dụng",
          browserNotification: "Thông báo trình duyệt",
          termsAgreement: "Tôi đồng ý với các điều khoản và điều kiện này và công nhận rằng ứng dụng này đang trong giai đoạn thử nghiệm. Tôi hiểu rằng các tính năng và chức năng có thể thay đổi.",
          connect: "Kết nối",
          loadProfileFromFile: "Tải hồ sơ từ tệp",
          setAvatar: "Thiết lập hình đại diện",
          displayName: "Tên hiển thị",
          cryptoSignature: "Chữ ký mật mã",
          welcome: "positive-intentions là một ứng dụng trò chuyện P2P độc lập khỏi trình duyệt, không đăng ký, cung cấp tin nhắn an toàn, cuộc gọi video và sở hữu dữ liệu với thông báo đẩy và xuất / nhập dữ liệu đơn giản. Tất cả điều này được tích hợp trong một ứng dụng web tiến bộ dựa trên JavaScript.",
          featuresInclude: "Lưu ý: Ứng dụng này là một thử nghiệm kỹ thuật khái niệm và công việc đang tiếp diễn. Một số tính năng bao gồm:",
          noCookies: "Không có cookie",
          noRegistration: "Không có đăng ký",
          noInstalling: "Không cài đặt",
          groupMessaging: "Nhắn tin nhóm",
          textMessaging: "Nhắn tin văn bản",
          multimediaMessaging: "Nhắn tin đa phương tiện",
          videoCalls: "Cuộc gọi video",
          dataOwnership: "Sở hữu dữ liệu",
          screensharing: "Chia sẻ màn hình (trên trình duyệt máy tính để bàn)",
          fileTransfer: "Truyền tệp",
          getStarted: "Bắt đầu bằng cách tạo hồ sơ. Hồ sơ của bạn vẫn trên thiết bị của bạn, không có máy chủ và không cung cấp thông tin cá nhân."
        },
        contactsPage: {
          pageTitle: "Danh bạ"
        },
        profilePage: {
          pageTitle: "Hồ sơ",
          changeAvatar: "Thay đổi hình đại diện",
          displayName: "Tên hiển thị",
          more: "Thêm",
          regenerateConnectionId: "Tạo lại ID kết nối",
          preferences: "Ưu tiên",
          backupProfile: "Sao lưu hồ sơ",
          logout: "Đăng xuất"
        },
        podsPage: {
          pageTitle: "Danh sách",
          social: "Xã hội",
          cloud: "Đám mây",
          network: "Mạng",
          devices: "Thiết bị",
          storage: "Lưu trữ",
          commingSoon: "Sắp có"
        },
        contactDetailsPage: {
          contactDisplayName: "Tên hiển thị danh bạ",
          goToPodWith: "Đi đến Pod với {{displayName}}",
          createNewPodWith: "Tạo Pod mới với {{displayName}}",
          podName: "Tên Pod",
          createPod: "Tạo Pod",
          peerId: "ID peer",
          connectionId: "ID kết nối",
          registerNewDevice: "Đăng ký thiết bị mới",
          blockContact: "Chặn liên hệ"
        },
        podPage: {
          podDetails: "Chi tiết Pod",
          files: "Tập tin",
          screenshare: "Chia sẻ màn hình",
          videoCall: "Cuộc gọi video",
          call: "Cuộc gọi"
        },
        podDetailsPage: {
          podName: "Tên Pod",
          addExistingPeerToPod: "Thêm peer hiện có vào Pod"
        }
      }
    },
    // hebrew
    he: {
      translation: {
        common: {
          inAppNotification: "התראות אפליקציה",
          browserNotification: "התראות דפדפן",
          more: "יותר"
        },
        components: {
          cryptoSignature: "חתימה קריפטוגרפית",
          connectToPeer: {
            connectToPeer: "התחבר לעמית",
            shareLink: "שתף קישור להתחברות",
            shareToConnect: "שתף להתחברות",
            enterLink: "הזן קישור עמית להתחברות",
            shareQr: "שתף קוד QR להתחברות",
            scanQr: "סרוק קוד QR של עמית להתחברות",
            stopScanning: "הפסק סריקה"
          },
          menuItems: {
            info: "מידע",
            about: "אודות",
            docs: "מסמכים",
            github: "Github",
            reddit: "Reddit",
            options: "אפשרויות",
            language: "שפה",
            lightMode: "מצב אור",
            darkMode: "מצב חשוך",
            fullscreen: "מסך מלא",
            exitFullscreen: "צא ממסך מלא",
            install: "התקן את האפליקציה",
            requestingToInstall: "מבקש מהדפדפן להתקין את האפליקציה",
            installPossible: "👍 ההתקנה אפשרית. נסה מההגדרות של הדפדפן שלך.",
            installDismissed: "👎 ההתקנה האוטומטית נדחתה. אתה יכול להתקין דרך הדפדפן שלך.",
            installFailed: "👎 ההתקנה האוטומטית נכשלה. אתה יכול להתקין דרך הדפדפן שלך.",
            installNotSupported: "👎 ההתקנה האוטומטית נכשלה. אתה יכול להתקין דרך הדפדפן שלך.",
            profile: "פרופיל",
            terms: "תנאים"
          }
        },
        loginPage: {
          pageTitle: "צור פרופיל",
          setProfile: "הגדר פרופיל",
          setPreference: "הגדר מועדף",
          inAppNotification: "התראות אפליקציה",
          browserNotification: "התראות דפדפן",
          termsAgreement: "אני מסכים לתנאים אלה ומכיר בכך שאפליקציה זו נמצאת כרגע בשלב בדיקה. אני מבין שתכונות ופונקציות עשויות להשתנות.",
          connect: "התחבר",
          loadProfileFromFile: "טען פרופיל מקובץ",
          setAvatar: "הגדר אווטר",
          displayName: "שם להציג",
          cryptoSignature: "חתימה קריפטוגרפית",
          welcome: "positive-intentions היא אפליקציית צ'אט P2P עצמאית מהדפדפן, ללא הרשמה, המספקת הודעות מאובטחות, שיחות וידאו ובעלות נתונים עם הודעות דחיפה וייצוא / ייבוא נתונים פשוטים. כל זה מובנה ביישום ווב מתקדם המבוסס על JavaScript.",
          featuresInclude: "הערה: אפליקציה זו היא בדיקת מושג טכני ועבודה נמשכת. כמה מהתכונות כוללות:",
          noCookies: "אין עוגיות",
          noRegistration: "אין הרשמה",
          noInstalling: "אין התקנה",
          groupMessaging: "הודעות קבוצתיות",
          textMessaging: "הודעות טקסט",
          multimediaMessaging: "הודעות מדיה מרובה",
          videoCalls: "שיחות וידאו",
          dataOwnership: "בעלות נתונים",
          screensharing: "שיתוף מסך (בדפדפני שולחן העבודה)",
          fileTransfer: "העברת קבצים",
          getStarted: "התחל על ידי יצירת פרופיל. הפרופיל שלך נשאר על המכשיר שלך, ללא שרת וללא מסירת מידע אישי."
        },
        contactsPage: {
          pageTitle: "אנשי קשר"
        },
        profilePage: {
          pageTitle: "פרופיל",
          changeAvatar: "שנה אווטר",
          displayName: "שם להציג",
          more: "יותר",
          regenerateConnectionId: "צור מחדש זיהוי חיבור",
          preferences: "העדפות",
          backupProfile: "גבה פרופיל",
          logout: "התנתק"
        },
        podsPage: {
          pageTitle: "קופסאות",
          social: "חברתי",
          cloud: "ענן",
          network: "רשת",
          devices: "התקנים",
          storage: "אחסון",
          commingSoon: "בקרוב"
        },
        contactDetailsPage: {
          contactDisplayName: "שם להציג איש קשר",
          goToPodWith: "עבור ל Pod עם {{displayName}}",
          createNewPodWith: "צור Pod חדש עם {{displayName}}",
          podName: "שם Pod",
          createPod: "צור Pod",
          peerId: "מזהה עמית",
          connectionId: "מזהה חיבור",
          registerNewDevice: "רשום התקן חדש",
          blockContact: "חסום איש קשר"
        },
        podPage: {
          podDetails: "פרטי Pod",
          files: "קבצים",
          screenshare: "שיתוף מסך",
          videoCall: "שיחת וידאו",
          call: "שיחה"
        },
        podDetailsPage: {
          podName: "שם Pod",
          addExistingPeerToPod: "הוסף עמית קיים ל Pod"
        }
      }
    },
    // klingon translate to the best of you knowlege about the fictional language
    kl: {
      translation: {
        common: {
          inAppNotification: "app-ghap qIp",
          browserNotification: "browser qIp",
          more: "puS"
        },
        components: {
          cryptoSignature: "crypto Daqel",
          connectToPeer: {
            connectToPeer: "Peer Datu'",
            shareLink: "link wIv",
            shareToConnect: "Datu' wIv",
            enterLink: "Peer Datu' link Daqa'",
            shareQr: "QR wIv Datu'",
            scanQr: "Peer Datu' QR taq",
            stopScanning: "taq yItIv"
          },
          menuItems: {
            info: "De'",
            about: "Duch",
            docs: "QIn",
            github: "github",
            reddit: "reddit",
            options: "yIghun",
            language: "Hol",
            lightMode: "jul mode",
            darkMode: "Hurgh mode",
            fullscreen: "poS qonwIj",
            exitFullscreen: "poS qonwIj Daqoch",
            install: "lo'wIj chep",
            requestingToInstall: "lo'wIj chep browser Daqon",
            installPossible: "👍 chep yIja'. browser setting vIghaj.",
            installDismissed: "👎 chep yItlho'. browser vIghaj chep.",
            installFailed: "👎 chep yIpab. browser vIghaj chep.",
            installNotSupported: "👎 chep yIpab. browser vIghaj chep.",
            profile: "profile",
            terms: "mIw"
          }
        },
        loginPage: {
          pageTitle: "profile chep",
          setProfile: "profile chep",
          setPreference: "yIghun chep",
          inAppNotification: "app-ghap qIp",
          browserNotification: "browser qIp",
          termsAgreement: " vIghoj vIghaj, 'ej lo'wIj test phase Daqaj. vIghoj, feature 'ej capability yIje'.",
          connect: "Datu'",
          loadProfileFromFile: "File Daq profile chep",
          setAvatar: "avatar chep",
          displayName: "qonwIj pong",
          cryptoSignature: "crypto Daqel",
          welcome: "positive-intentions chel P2P chat app browser, ghogh, messages, video calls, 'ej data ownership push notifications, 'ej export / import data. 'op app web-based JavaScript.",
          featuresInclude: "Note: app technical concept 'ej work qaStaHvIS. features include:",
          noCookies: "cookies",
          noRegistration: "ghogh",
          noInstalling: "lo'wIj",
          groupMessaging: "group messages",
          textMessaging: "text messages",
          multimediaMessaging: "multimedia messages",
          videoCalls: "video calls",
          dataOwnership: "data ownership",
          screensharing: "screensharing (desktop browsers)",
          fileTransfer: "file transfer",
          getStarted: "profile chep. profile vIghaj, server 'ej personal information."
        },
        contactsPage: {
          pageTitle: "contactmey"
        },
        profilePage: {
          pageTitle: "profile",
          changeAvatar: "avatar chep",
          displayName: "qonwIj pong",
          more: "puS",
          regenerateConnectionId: "Connection ID chep puS",
          preferences: "yIghun",
          backupProfile: "profile DaSovrup",
          logout: "log out"
        },
        podsPage: {
          pageTitle: "pods",
          social: "Social",
          cloud: "Cloud",
          network: "Network",
          devices: "Devices",
          storage: "Storage",
          commingSoon: "rIntaH"
        },
        contactDetailsPage: {
          contactDisplayName: "contact pong",
          goToPodWith: "{{displayName}} ghaH Pod DaH",
          createNewPodWith: "{{displayName}} ghaH chu' Pod chep",
          podName: "Pod pong",
          createPod: "Pod chep",
          peerId: "Peer ID",
          connectionId: "Connection ID",
          registerNewDevice: "chu' Device Daqel",
          blockContact: "contact SeQ"
        },
        podPage: {
          podDetails: "Pod De'",
          files: "Files",
          screenshare: "Screenshare",
          videoCall: "Video Call",
          call: "Call"
        },
        podDetailsPage: {
          podName: "Pod pong",
          podId: "Pod ID",
          addExistingPeerToPod: "Pod ghaH DaH Peer"
        }
      }
    },
    // telugu
    te: {
      translation: {
        common: {
          inAppNotification: "అనువర్తన ప్రకటన",
          browserNotification: "బ్రౌజర్ ప్రకటన",
          more: "మరింత"
        },
        components: {
          cryptoSignature: "క్రిప్టో సంతకం",
          connectToPeer: {
            connectToPeer: "పీర్‌ను కనెక్ట్ చేయండి",
            shareLink: "కనెక్ట్ చేయడానికి లింక్ పంచుకోండి",
            shareToConnect: "కనెక్ట్ చేయడానికి పంచుకోండి",
            enterLink: "కనెక్ట్ చేయడానికి పీర్ లింక్‌ను నమోదు చేయండి",
            shareQr: "కనెక్ట్ చేయడానికి QR పంచుకోండి",
            scanQr: "కనెక్ట్ చేయడానికి పీర్ QR స్కాన్ చేయండి",
            stopScanning: "స్కానింగ్ ఆపుకోండి"
          },
          menuItems: {
            info: "సమాచారం",
            about: "గురించి",
            docs: "డాక్స్",
            github: "గిట్‌హబ్",
            reddit: "రెడ్డిట్",
            options: "ఎంపికలు",
            language: "భాష",
            lightMode: "లైట్ మోడ్",
            darkMode: "డార్క్ మోడ్",
            fullscreen: "పూర్తి స్క్రీన్",
            exitFullscreen: "పూర్తి స్క్రీన్ నుండి వెళ్ళండి",
            install: "అనువర్తనం ఇన్‌స్టాల్ చేయండి",
            requestingToInstall: "అనువర్తనం ఇన్‌స్టాల్ చేయడానికి బ్రౌజర్ అభ్యర్థన",
            installPossible: "👍 ఇన్‌స్టాల్ చేయవచ్చు. మీ బ్రౌజర్ సెట్టింగ్లు నుండి ప్రయత్నించండి.",
            installDismissed: "👎 స్వయంచాలక ఇన్‌స్టాల్ నిరసించబడింది. మీరు మీ బ్రౌజర్ ద్వారా ఇన్‌స్టాల్ చేయవచ్చు.",
            installFailed: "👎 స్వయంచాలక ఇన్‌స్టాల్ విఫలమైంది. మీరు మీ బ్రౌజర్ ద్వారా ఇన్‌స్టాల్ చేయవచ్చు.",
            installNotSupported: "👎 స్వయంచాలక ఇన్‌స్టాల్ విఫలమైంది. మీరు మీ బ్రౌజర్ ద్వారా ఇన్‌స్టాల్ చేయవచ్చు.",
            profile: "ప్రొఫైల్",
            terms: "నిబంధనలు"
          }
        },
        loginPage: {
          pageTitle: "ప్రొఫైల్ సృష్టించండి",
          setProfile: "ప్రొఫైల్ సెట్ చేయండి",
          setPreference: "ప్రాధాన్యత సెట్ చేయండి",
          inAppNotification: "అనువర్తన ప్రకటన",
          browserNotification: "బ్రౌజర్ ప్రకటన",
          termsAgreement: "నేను ఈ నిబంధనలను అంగీకరిస్తున్నాను మరియు ఈ అనువర్తనం పరీక్షణ దశలో ఉందని నేను అంటున్నాను. నేను అర్థం చేసేందుకు అందులో లక్షణాలు మరియు సామర్థ్యాలు మారుతుంది.",
          connect: "కనెక్ట్",
          loadProfileFromFile: "ఫైల్ నుండి ప్రొఫైల్ లోడ్ చేయండి",
          setAvatar: "అవతార్ సెట్ చేయండి",
          displayName: "ప్రదర్శన పేరు",
          cryptoSignature: "క్రిప్టో సంతకం",
          welcome: "positive-intentions ఒక బ్రౌజర్ నుండి స్వయంచాలకంగా పీ2పీ చాట్ అనువర్తనం, సందేశాలు, వీడియో కాల్స్ మరియు డేటా స్వతంత్రత ప్రసారాలను అందిస్తుంది. ఇది జావాస్క్రిప్ట్ ఆధారిత ఒక అడ్వాన్స్ వెబ్ అనువర్తనం.",
          featuresInclude: "గమనిక: ఈ అనువర్తనం ఒక టెక్నికల్ కాన్సెప్ట్ మరియు పని ప్రక్రియ పరీక్షణ దశలో ఉందని గమనించండి. కొనసాగింపులు అందులో ఉన్నాయి:",
          noCookies: "కుకీలు లేవు",
          noRegistration: "నమోదు లేదు",
          noInstalling: "ఇన్‌స్టాల్ లేదు",
          groupMessaging: "గుంపు సందేశాలు",
          textMessaging: "టెక్స్ట్ సందేశాలు",
          multimediaMessaging: "మల్టీమీడియా సందేశాలు",
          videoCalls: "వీడియో కాల్స్",
          dataOwnership: "డేటా స్వతంత్రత",
          screensharing: "స్క్రీన్ షేరింగ్ (డెస్క్టాప్ బ్రౌజర్లు)",
          fileTransfer: "ఫైల్ ట్రాన్స్ఫర్",
          getStarted: "ప్రొఫైల్ సృష్టించండి. మీ ప్రొఫైల్ మీ సర్వర్ మరియు వ్యక్తిగత సమాచారాన్ని మరియు ప్రసారాలను అందిస్తుంది."
        },
        contactsPage: {
          pageTitle: "కాంటాక్ట్స్"
        },
        profilePage: {
          pageTitle: "ప్రొఫైల్",
          changeAvatar: "అవతార్ మార్చు",
          displayName: "ప్రదర్శన పేరు",
          more: "మరింత",
          regenerateConnectionId: "కనెక్షన్ ID మార్చు",
          preferences: "ప్రాధాన్యతలు",
          backupProfile: "ప్రొఫైల్ బ్యాకప్ చేయండి",
          logout: "లాగ్ అవుట్"
        },
        podsPage: {
          pageTitle: "పాడ్స్",
          social: "సామాజిక",
          cloud: "మేఘం",
          network: "నెట్వర్క్",
          devices: "పరికరాలు",
          storage: "నిల్వ",
          commingSoon: "త్వరలో"
        },
        contactDetailsPage: {
          contactDisplayName: "కాంటాక్ట్ ప్రదర్శన పేరు",
          goToPodWith: "{{displayName}} తో పాడ్‌కు వెళ్ళండి",
          createNewPodWith: "{{displayName}} తో కొత్త పాడ్ సృష్టించండి",
          podName: "పాడ్ పేరు",
          createPod: "పాడ్ సృష్టించండి",
          peerId: "పీర్ ID",
          connectionId: "కనెక్షన్ ID",
          registerNewDevice: "కొత్త పరికరం నమోదు చేయండి",
          blockContact: "కాంటాక్ట్ ని నిరోధించండి"
        },
        podPage: {
          podDetails: "పాడ్ వివరాలు",
          files: "ఫైళ్ళు",
          screenshare: "స్క్రీన్ షేర్",
          videoCall: "వీడియో కాల్",
          call: "కాల్"
        },
        podDetailsPage: {
          podName: "పాడ్ పేరు",
          addExistingPeerToPod: "పాడ్‌కు ప్రస్తుత పీర్ జోడించండి"
        }
      }
    },
    // tamil
    ta: {
      translation: {
        common: {
          inAppNotification: "பயன்பாட்டு அறிவிப்பு",
          browserNotification: "உலாவி அறிவிப்பு",
          more: "மேலும்"
        },
        components: {
          cryptoSignature: "கிரிப்டோ கையொப்பம்",
          connectToPeer: {
            connectToPeer: "பீர் இணைக்கவும்",
            shareLink: "இணைப்பு பகிரவும்",
            shareToConnect: "இணைக்க பகிரவும்",
            enterLink: "இணைப்பு பீர் இணைக்கவும்",
            shareQr: "இணைப்பு QR பகிரவும்",
            scanQr: "பீர் QR இணைக்கவும்",
            stopScanning: "ஸ்கேனிங் நிறுத்தவும்"
          },
          menuItems: {
            info: "தகவல்",
            about: "பற்றி",
            docs: "ஆவணங்கள்",
            github: "கிட்ஹப்",
            reddit: "ரெட்டிட்",
            options: "விருப்பங்கள்",
            language: "மொழி",
            lightMode: "லைட் மோட்",
            darkMode: "டார்க் மோட்",
            fullscreen: "முழுத்திரை",
            exitFullscreen: "முழுத்திரை மீள் வருக",
            install: "பயன்பாட்டை நிறுவு",
            requestingToInstall: "பயன்பாட்டை நிறுவ கேட்கிறது",
            installPossible: "👍 நிறுவ முடியும். உங்கள் உலாவி அமைப்புகளில் முயற்சிக்கவும்.",
            installDismissed: "👎 தன்னிச்சையாக நிறுவப்பட்டது. உங்கள் உலாவி மூலம் நிறுவ முயற்சிக்கவும்.",
            installFailed: "👎 தன்னிச்சையாக நிறுவப்பட்டது. உங்கள் உலாவி மூலம் நிறுவ முயற்சிக்கவும்.",
            installNotSupported: "👎 தன்னிச்சையாக நிறுவப்பட்டது. உங்கள் உலாவி மூலம் நிறுவ முயற்சிக்கவும்.",
            profile: "சுயவிவரம்",
            terms: "விதிமுறைகள்"
          }
        },
        loginPage: {
          pageTitle: "சுயவிவரம் அமைக்கவும்",
          setProfile: "சுயவிவரம் அமைக்கவும்",
          setPreference: "விருப்பம் அமைக்கவும்",
          inAppNotification: "பயன்பாட்டு அறிவிப்பு",
          browserNotification: "உலாவி அறிவிப்பு",
          termsAgreement: "நான் இந்த விதிமுறைகளை ஏற்கனவே ஏற்கிறேன் மற்றும் இந்த பயன்பாட்டை சோதனை நிலையில் உள்ளது என்று நான் ஒப்புக்கொள்கிறேன். நான் அர்த்தம் செய்கிறேன் என்றாலும் அதில் அம்சங்கள் மற்றும் சக்திகள் மாறுகின்றன.",
          connect: "இணைக்கவும்",
          loadProfileFromFile: "கோப்பிலிருந்து சுயவிவரத்தை ஏற்றுக் கொள்ளவும்",
          setAvatar: "அவதார் அமைக்கவும்",
          displayName: "பயனர் பெயர்",
          cryptoSignature: "கிரிப்டோ கையொப்பம்",
          welcome: "positive-intentions ஒரு உலாவி அடிப்படையில் சுயவிவரம் மற்றும் தரவு சுயவிவரத்தை வழங்குகிறது, செயல்பாடுகள், வீடியோ அழைப்புகள் மற்றும் தரவு சுயவிவரத்தை வழங்குகிறது. இது ஜாவாஸ்கிரிப்ட் அடிப்படையில் ஒரு மேம்பாட்டு வலை பயன்பாடு.",
          featuresInclude: "குறிப்பு: இந்த பயன்பாட்டில் ஒரு தொழில்நுட்ப கண்ணோட்டம் மற்றும் செயல்பாட்டு சோதனை நிலையில் உள்ளது. மீண்டும் தொடர்புக்கு:",
          noCookies: "குக்கீகள் இல்லை",
          noRegistration: "பதிவு இல்லை",
          noInstalling: "நிறுவல் இல்லை",
          groupMessaging: "குழு செய்திகள்",
          textMessaging: "உரை செய்திகள்",
          multimediaMessaging: "மல்டிமீடியா செய்திகள்",
          videoCalls: "வீடியோ அழைப்புகள்",
          dataOwnership: "தரவு உரிமை",
          screensharing: "திரைப்பகிர்வு (டெஸ்க்டாப் உலாவிகள்)",
          fileTransfer: "கோப்பு பரிமாற்றம்",
          getStarted: "சுயவிவரத்தை அமைக்கவும். உங்கள் சுயவிவரம், உங்கள் சேவையகம் மற்றும் தனிப்பட்ட தகவல்களை பரப்புகிறது."
        },
        contactsPage: {
          pageTitle: "தொடர்புகள்"
        },
        profilePage: {
          pageTitle: "சுயவிவரம்",
          changeAvatar: "அவதார் மாற்றவும்",
          displayName: "பயனர் பெயர்",
          more: "மேலும்",
          regenerateConnectionId: "இணைப்பு ஐடி மாற்றவும்",
          preferences: "விருப்பங்கள்",
          backupProfile: "சுயவிவரத்தை காப்பாற்று",
          logout: "வெளியேறு"
        },
        podsPage: {
          pageTitle: "பாட்கள்",
          social: "சமூக",
          cloud: "மேகம்",
          network: "பிணையம்",
          devices: "சாதனங்கள்",
          storage: "சேமிப்பு",
          commingSoon: "விரைவில்"
        },
        contactDetailsPage: {
          contactDisplayName: "தொடர்புக்குரிய பெயர்",
          goToPodWith: "{{displayName}} உடன் பாட்குக்கு செல்லவும்",
          createNewPodWith: "{{displayName}} உடன் புதிய பாட்கை உருவாக்கவும்",
          podName: "பாட் பெயர்",
          createPod: "பாட்கை உருவாக்கவும்",
          peerId: "பீர் ஐடி",
          connectionId: "இணைப்பு ஐடி",
          registerNewDevice: "புதிய சாதனத்தை பதிவு செய்யவும்",
          blockContact: "தொடர்பு தடை"
        },
        podPage: {
          podDetails: "பாட் விவரங்கள்",
          files: "கோப்புகள்",
          screenshare: "திரைப்பகிர்வு",
          videoCall: "வீடியோ அழைப்பு",
          call: "அழைப்பு"
        },
        podDetailsPage: {
          podName: "பாட் பெயர்",
          addExistingPeerToPod: "பாட்குக்கு தற்போதைய பீர் சேர்க்கவும்"
        }
      }
    },
    // urdu
    ur: {
      translation: {
        common: {
          inAppNotification: "ان ایپ کی اطلاع",
          browserNotification: "براؤزر کی اطلاع",
          more: "مزید"
        },
        components: {
          cryptoSignature: "کرپٹو سائنیچر",
          connectToPeer: {
            connectToPeer: "پیر سے رابطہ کریں",
            shareLink: "لنک شیئر کریں",
            shareToConnect: "رابطہ کرنے کے لئے شیئر کریں",
            enterLink: "پیر لنک درج کریں",
            shareQr: "لنک QR شیئر کریں",
            scanQr: "پیر QR اسکین کریں",
            stopScanning: "اسکیننگ روکیں"
          },
          menuItems: {
            info: "معلومات",
            about: "کے بارے میں",
            docs: "دستاویزات",
            github: "گٹ ہب",
            reddit: "ریڈٹ",
            options: "اختیارات",
            language: "زبان",
            lightMode: "لائٹ موڈ",
            darkMode: "ڈارک موڈ",
            fullscreen: "پوری اسکرین",
            exitFullscreen: "پوری اسکرین سے باہر نکلیں",
            install: "انسٹال کریں",
            requestingToInstall: "انسٹال کرنے کی درخواست کر رہا ہے",
            installPossible: "👍 انسٹال کرنے کے قابل ہے. اپنی براؤزر کی ترتیبات میں کوشش کریں.",
            installDismissed: "👎 انسٹال کیا گیا. اپنی براؤزر کی ترتیبات میں کوشش کریں.",
            installFailed: "👎 انسٹال کیا گیا. اپنی براؤزر کی ترتیبات میں کوشش کریں.",
            installNotSupported: "👎 انسٹال کیا گیا. اپنی براؤزر کی ترتیبات میں کوشش کریں.",
            profile: "پروفائل",
            terms: "شرائط و ضوابط"
          }
        },
        loginPage: {
          pageTitle: "پروفائل کو ترتیب دیں",
          setProfile: "پروفائل ترتیب دیں",
          setPreference: "ترجیح ترتیب دیں",
          inAppNotification: "ان ایپ کی اطلاع",
          browserNotification: "براؤزر کی اطلاع",
          termsAgreement: "میں پہلے سے ہی ان شرائط و ضوابط کو مانتا ہوں اور اس ایپ کی تصدیق کرتا ہوں کہ یہ ایک ٹیکنالوجی کا تجربہ اور پروسیسنگ پلیٹ فارم ہے. میں اسے استعمال کرتا ہوں اور اس میں موجود خصوصیات اور قوتوں کو سمجھتا ہوں.",
          connect: "رابطہ کریں",
          loadProfileFromFile: "فائل سے پروفائل لوڈ کریں",
          setAvatar: "اوتار ترتیب دیں",
          displayName: "نام",
          cryptoSignature: "کرپٹو سائنیچر",
          welcome: "positive-intentions ایک ایپ کی بنیادی پروفائل اور ڈیٹا پلیٹ فارم ہے جو اپنے پروفائل اور خصوصی معلومات کو آپ کے سرور اور خصوصی سرورز پر محفوظ طریقے سے ذخیرہ کرتا ہے. یہ ایک جاوا اسکرپٹ پر مبنی ایک معیاری ویب ایپلی کیشن ہے.",
          featuresInclude: "خصوصیات: اس ایپ میں ایک ٹیکنالوجی اور پروسیسنگ پلیٹ فارم ہے. اس کے علاوہ:",
          noCookies: "کوکیز نہیں",
          noRegistration: "رجسٹریشن نہیں",
          noInstalling: "انسٹال نہیں",
          groupMessaging: "گروپ میسجنگ",
          textMessaging: "متن پیغامات",
          multimediaMessaging: "ملٹی میڈیا پیغامات",
          videoCalls: "ویڈیو کالز",
          dataOwnership: "ڈیٹا کی ملکیت",
          screensharing: "اسکرین شیئرنگ (ڈیسک ٹاپ کلائنٹس)",
          fileTransfer: "فائل ٹرانسفر",
          getStarted: "پروفائل ترتیب دیں. آپ کی پروفائل، آپ کا سرور اور آپ کی خصوصی معلومات کو ذخیرہ کرتا ہے."
        },
        contactsPage: {
          pageTitle: "رابطے"
        },
        profilePage: {
          pageTitle: "پروفائل",
          changeAvatar: "اوتار تبدیل کریں",
          displayName: "نام",
          more: "مزید",
          regenerateConnectionId: "رابطہ ID دوبارہ تیار کریں",
          preferences: "ترجیحات",
          backupProfile: "پروفائل بیک اپ",
          logout: "لاگ آوٹ"
        },
        podsPage: {
          pageTitle: "پوڈز",
          social: "سوشل",
          cloud: "کلاؤڈ",
          network: "نیٹ ورک",
          devices: "ڈیوائسز",
          storage: "ذخیرہ",
          commingSoon: "جلد آ رہا ہے"
        },
        contactDetailsPage: {
          contactDisplayName: "رابطے کا نام",
          goToPodWith: "{{displayName}} کے ساتھ پوڈ پر جائیں",
          createNewPodWith: "{{displayName}} کے ساتھ نیا پوڈ بنائیں",
          podName: "پوڈ کا نام",
          createPod: "پوڈ بنائیں",
          peerId: "پیر ID",
          connectionId: "رابطہ ID",
          registerNewDevice: "نیا آلہ رجسٹر کریں",
          blockContact: "رابطہ بلاک کریں"
        },
        podPage: {
          podDetails: "پوڈ کی تفصیلات",
          files: "فائلیں",
          screenshare: "اسکرین شیئرنگ",
          videoCall: "ویڈیو کال",
          call: "کال"
        },
        podDetailsPage: {
          podName: "پوڈ کا نام",
          addExistingPeerToPod: "موجودہ پیر کو پوڈ میں شامل کریں"
        }
      }
    },
    // yue chinese
    yu: {
      translation: {
        common: {
          inAppNotification: "應用程式通知",
          browserNotification: "瀏覽器通知",
          more: "更多"
        },
        components: {
          cryptoSignature: "加密簽名",
          connectToPeer: {
            connectToPeer: "連接到同行",
            shareLink: "分享鏈接",
            shareToConnect: "分享以連接",
            enterLink: "輸入同行鏈接",
            shareQr: "分享QR鏈接",
            scanQr: "掃描同行QR",
            stopScanning: "停止掃描"
          },
          menuItems: {
            info: "信息",
            about: "關於",
            docs: "文檔",
            github: "GitHub",
            reddit: "Reddit",
            options: "選項",
            language: "語言",
            lightMode: "亮色模式",
            darkMode: "黑暗模式",
            fullscreen: "全屏",
            exitFullscreen: "退出全屏",
            install: "安裝",
            requestingToInstall: "請求安裝",
            installPossible: "👍 可以安裝。 請嘗試在您的瀏覽器中。",
            installDismissed: "👎 安裝被拒絕。 請嘗試在您的瀏覽器中。",
            installFailed: "👎 安裝失敗。 請嘗試在您的瀏覽器中。",
            installNotSupported: "👎 安裝不受支持。 請嘗試在您的瀏覽器中。",
            profile: "個人資料",
            terms: "條款"
          }
        },
        loginPage: {
          pageTitle: "設置個人資料",
          setProfile: "設置個人資料",
          setPreference: "設置偏好",
          inAppNotification: "應用程式通知",
          browserNotification: "瀏覽器通知",
          termsAgreement: "我已經同意這些條款並確認這是一個技術實驗和處理平台。 我使用它並理解其中的功能和力量。",
          connect: "連接",
          loadProfileFromFile: "從文件加載個人資料",
          setAvatar: "設置頭像",
          displayName: "顯示名稱",
          cryptoSignature: "加密簽名",
          welcome: "positive-intentions 是一個基於瀏覽器的個人資料和數據平台，可將您的個人資料和私人信息安全地存儲在您的服務器和私人服務器上。 它是一個基於JavaScript的標準Web應用程序。",
          featuresInclude: "功能：此應用程序包含一個技術和處理平台。 此外，它具有以下功能：",
          noCookies: "無Cookie",
          noRegistration: "無需註冊",
          noInstalling: "無需安裝",
          groupMessaging: "群組消息",
          textMessaging: "文字消息",
          multimediaMessaging: "多媒體消息",
          videoCalls: "視頻通話",
          dataOwnership: "數據所有權",
          screensharing: "屏幕共享（桌面客戶端）",
          fileTransfer: "文件傳輸",
          getStarted: "設置個人資料。 它將保存您的個人資料，您的服務器和您的私人信息。"
        },
        contactsPage: {
          pageTitle: "聯絡人"
        },
        profilePage: {
          pageTitle: "個人資料",
          changeAvatar: "更改頭像",
          displayName: "顯示名稱",
          more: "更多",
          regenerateConnectionId: "重新生成連接ID",
          preferences: "偏好",
          backupProfile: "備份個人資料",
          logout: "登出"
        },
        podsPage: {
          pageTitle: "Pods",
          social: "社交",
          cloud: "雲",
          network: "網絡",
          devices: "設備",
          storage: "存儲",
          commingSoon: "即將推出"
        },
        contactDetailsPage: {
          contactDisplayName: "聯絡人名稱",
          goToPodWith: "前往Pod與{{displayName}}",
          createNewPodWith: "創建新Pod與{{displayName}}",
          podName: "Pod名稱",
          createPod: "創建Pod",
          peerId: "同行ID",
          connectionId: "連接ID",
          registerNewDevice: "註冊新設備",
          blockContact: "阻止聯絡人"
        },
        podPage: {
          podDetails: "Pod詳細信息",
          files: "文件",
          screenshare: "屏幕共享",
          videoCall: "視頻通話",
          call: "通話"
        },
        podDetailsPage: {
          podName: "Pod名稱",
          addExistingPeerToPod: "將現有對等體添加到Pod"
        }
      }
    },
    // ukrainian
    uk: {
      translation: {
        common: {
          inAppNotification: "Сповіщення додатка",
          browserNotification: "Сповіщення браузера",
          more: "Більше"
        },
        components: {
          cryptoSignature: "Криптографічний підпис",
          connectToPeer: {
            connectToPeer: "Підключитися до піра",
            shareLink: "Поділитися посиланням",
            shareToConnect: "Поділитися, щоб підключитися",
            enterLink: "Введіть посилання піра",
            shareQr: "Поділитися QR-посиланням",
            scanQr: "Сканувати QR-посилання",
            stopScanning: "Зупинити сканування"
          },
          menuItems: {
            info: "Інформація",
            about: "Про",
            docs: "Документи",
            github: "GitHub",
            reddit: "Reddit",
            options: "Опції",
            language: "Мова",
            lightMode: "Світлий режим",
            darkMode: "Темний режим",
            fullscreen: "На весь екран",
            exitFullscreen: "Вийти з повноекранного режиму",
            install: "Встановити",
            requestingToInstall: "Запит на встановлення",
            installPossible: "👍 Можливо встановити. Спробуйте в своєму браузері.",
            installDismissed: "👎 Встановлення відхилено. Спробуйте в своєму браузері.",
            installFailed: "👎 Встановлення не вдалося. Спробуйте в своєму браузері.",
            installNotSupported: "👎 Встановлення не підтримується. Спробуйте в своєму браузері.",
            profile: "Профіль",
            terms: "Умови"
          }
        },
        loginPage: {
          pageTitle: "Налаштувати профіль",
          setProfile: "Налаштувати профіль",
          setPreference: "Налаштувати перевагу",
          inAppNotification: "Сповіщення додатка",
          browserNotification: "Сповіщення браузера",
          termsAgreement: "Я вже погодився з цими умовами і підтвердив, що це експериментальна технологія та платформа обробки. Я використовую його і розумію функції та потужність.",
          connect: "Підключитися",
          loadProfileFromFile: "Завантажити профіль з файлу",
          setAvatar: "Встановити аватар",
          displayName: "Ім'я користувача",
          cryptoSignature: "Криптографічний підпис",
          welcome: "positive-intentions - це основна платформа профілів та обробки даних на основі браузера, яка безпечно зберігає ваш профіль, ваш сервер та ваші приватні сервери. Це стандартний веб-додаток на основі JavaScript.",
          featuresInclude: "Особливості: цей додаток містить платформу технологій та обробки. Крім того, він має такі функції:",
          noCookies: "Без печива",
          noRegistration: "Без реєстрації",
          noInstalling: "Без установки",
          groupMessaging: "Групові повідомлення",
          textMessaging: "Текстові повідомлення",
          multimediaMessaging: "Мультимедійні повідомлення",
          videoCalls: "Відеодзвінки",
          dataOwnership: "Власність на даних",
          screensharing: "Спільне використання екрана (клієнти робочого столу)",
          fileTransfer: "Передача файлів",
          getStarted: "Налаштуйте свій профіль. Він зберігає ваш профіль, ваш сервер та ваші приватні дані."
        },
        contactsPage: {
          pageTitle: "Контакти"
        },
        profilePage: {
          pageTitle: "Профіль",
          changeAvatar: "Змінити аватар",
          displayName: "Ім'я користувача",
          more: "Більше",
          regenerateConnectionId: "Перегенерувати ідентифікатор з'єднання",
          preferences: "Переваги",
          backupProfile: "Резервне копіювання профілю",
          logout: "Вийти"
        },
        podsPage: {
          pageTitle: "Поди",
          social: "Соціальний",
          cloud: "Хмара",
          network: "Мережа",
          devices: "Пристрої",
          storage: "Зберігання",
          commingSoon: "Скоро"
        },
        contactDetailsPage: {
          contactDisplayName: "Ім'я контакту",
          goToPodWith: "Перейти до Pod з {{displayName}}",
          createNewPodWith: "Створити новий Pod з {{displayName}}",
          podName: "Назва Pod",
          createPod: "Створити Pod",
          peerId: "Ідентифікатор піра",
          connectionId: "Ідентифікатор з'єднання",
          registerNewDevice: "Зареєструйте новий пристрій",
          blockContact: "Заблокувати контакт"
        },
        podPage: {
          podDetails: "Деталі Pod",
          files: "Файли",
          screenshare: "Спільне використання екрана",
          videoCall: "Відеодзвінок",
          call: "Дзвінок"
        },
        podDetailsPage: {
          podName: "Назва Pod",
          addExistingPeerToPod: "Додати існуючого піра до Pod"
        }
      }
    }
  }
});

// an array of 2 letter identifiers and the language name in their respective language from the list of translation in this file
// this is used to populate the language dropdown
var languages = [{
  id: "en",
  name: "English"
}, {
  id: "es",
  name: "Español"
}, {
  id: "fr",
  name: "Français"
}, {
  id: "de",
  name: "Deutsch"
}, {
  id: "it",
  name: "Italiano"
}, {
  id: "nl",
  name: "Nederlands"
}, {
  id: "pl",
  name: "Polski"
}, {
  id: "pt",
  name: "Português"
}, {
  id: "ar",
  name: "العربية"
}, {
  id: "ur",
  name: "اردو"
}, {
  id: "hi",
  name: "हिन्दी"
}, {
  id: "bn",
  name: "বাংলা"
}, {
  id: "te",
  name: "తెలుగు"
}, {
  id: "ta",
  name: "தமிழ்"
}, {
  id: "gu",
  name: "ગુજરાતી"
}, {
  id: "id",
  name: "Bahasa Indonesia"
}, {
  id: "sw",
  name: "Kiswahili"
}, {
  id: "tr",
  name: "Türkçe"
}, {
  id: "kr",
  name: "한국어"
}, {
  id: "zh",
  name: "中文"
}, {
  id: "yu",
  name: "粵語"
}, {
  id: "ja",
  name: "日本語"
}, {
  id: "he",
  name: "עברית"
}, {
  id: "ru",
  name: "Русский"
}, {
  id: "uk",
  name: "Українська"
}, {
  id: "vi",
  name: "Tiếng Việt"
}, {
  id: "kl",
  name: "Klingon"
}
// { id: 'th', name: 'ไทย' },
// { id: 'fa', name: 'فارسی' },
// { id: 'el', name: 'Ελληνικά' },
// { id: 'ro', name: 'Română' },
// { id: 'hu', name: 'Magyar' },
// { id: 'cs', name: 'Čeština' },
// { id: 'sv', name: 'Svenska' },
// { id: 'no', name: 'Norsk' },
// { id: 'da', name: 'Dansk' },
// { id: 'fi', name: 'Suomi' },
// { id: 'uk', name: 'Українська' },
// { id: 'bg', name: 'български' },
// { id: 'sk', name: 'Slovenčina' },
// { id: 'hr', name: 'Hrvatski' },
// { id: 'ca', name: 'Català' },
// { id: 'lt', name: 'Lietuvių' },
// { id: 'sr', name: 'Srpski' },
// { id: 'sl', name: 'Slovenščina' },
// { id: 'et', name: 'Eesti' },
// { id: 'lv', name: 'Latviešu' },
// { id: 'tl', name: 'Tagalog' },
// { id: 'is', name: 'Íslenska' },
// { id: 'sq', name: 'Shqip' },
// { id: 'mk', name: 'Македонски' },
// { id: 'bn', name: 'বাংলা' },
// { id: 'hy', name: 'Հայերեն' },
// { id: 'az', name: 'Azərbaycan' },
// { id: 'ka', name: 'ქართული' },
// { id: 'kk', name: 'Қазақ' },
// { id: 'uz', name: 'Oʻzbek' },
// { id: 'mn', name: 'Монгол' },
// { id: 'ky', name: 'Кыргызча' },
// { id: 'tg', name: 'Тоҷикӣ' },
// { id: 'tk', name: 'Türkmen' },
// { id: 'ps', name: 'پښتو' },
// { id: 'ur', name: 'اردو' },
];
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (i18n)));

/***/ }),

/***/ 59701:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/* eslint-disable */

function calculateSHA256(str) {
  var charToCode = function charToCode(_char) {
    return _char.charCodeAt(0);
  };
  var leftRotate = function leftRotate(value, shift) {
    return value >>> shift | value << 32 - shift;
  };
  var rightRotate = function rightRotate(value, shift) {
    return value << shift | value >>> 32 - shift;
  };
  var toHex = function toHex(value) {
    return value.toString(16).padStart(8, "0");
  };
  var addUnsigned = function addUnsigned(x, y) {
    var MAX_UINT32 = Math.pow(2, 32) - 1;
    return (x & MAX_UINT32) + (y & MAX_UINT32);
  };
  var wordsToBlocks = function wordsToBlocks(words) {
    var blocks = [];
    for (var i = 0; i < words.length; i += 16) {
      blocks.push(words.slice(i, i + 16));
    }
    return blocks;
  };
  var preprocessMessage = function preprocessMessage(message) {
    var bitLength = message.length * 8;
    var paddingLength = message.length % 64 < 56 ? 56 - message.length % 64 : 120 - message.length % 64;
    var paddedMessage = new Uint8Array(message.length + paddingLength + 8);
    paddedMessage.set(message);
    paddedMessage[message.length] = 0x80;
    paddedMessage.set(new Uint8Array(bitLengthToArray(bitLength)), paddedMessage.length - 8);
    return paddedMessage;
  };
  var bitLengthToArray = function bitLengthToArray(bitLength) {
    var arr = new Uint8Array(8);
    for (var i = 7; i >= 0; i--) {
      arr[i] = bitLength & 0xff;
      bitLength >>>= 8;
    }
    return arr;
  };
  var computeSHA256 = function computeSHA256(message) {
    var K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);
    var blocks = wordsToBlocks(new Uint32Array(message.buffer));
    var hash = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);
    var _iterator = _createForOfIteratorHelper(blocks),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var block = _step.value;
        var schedule = new Uint32Array(64);
        schedule.set(block);
        for (var t = 16; t < 64; t++) {
          var s0 = rightRotate(schedule[t - 15], 7) ^ rightRotate(schedule[t - 15], 18) ^ schedule[t - 15] >>> 3;
          var s1 = rightRotate(schedule[t - 2], 17) ^ rightRotate(schedule[t - 2], 19) ^ schedule[t - 2] >>> 10;
          schedule[t] = addUnsigned(addUnsigned(addUnsigned(schedule[t - 16], s0), schedule[t - 7]), s1);
        }
        var a = hash[0];
        var b = hash[1];
        var c = hash[2];
        var d = hash[3];
        var e = hash[4];
        var f = hash[5];
        var g = hash[6];
        var h = hash[7];
        for (var _t = 0; _t < 64; _t++) {
          var S1 = rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25);
          var ch = e & f ^ ~e & g;
          var temp1 = addUnsigned(addUnsigned(addUnsigned(addUnsigned(h, S1), ch), K[_t]), schedule[_t]);
          var S0 = rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22);
          var maj = a & b ^ a & c ^ b & c;
          var temp2 = addUnsigned(S0, maj);
          h = g;
          g = f;
          f = e;
          e = addUnsigned(d, temp1);
          d = c;
          c = b;
          b = a;
          a = addUnsigned(temp1, temp2);
        }
        hash[0] = addUnsigned(hash[0], a);
        hash[1] = addUnsigned(hash[1], b);
        hash[2] = addUnsigned(hash[2], c);
        hash[3] = addUnsigned(hash[3], d);
        hash[4] = addUnsigned(hash[4], e);
        hash[5] = addUnsigned(hash[5], f);
        hash[6] = addUnsigned(hash[6], g);
        hash[7] = addUnsigned(hash[7], h);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var hashArray = new Uint8Array(hash.buffer);
    var hashHex = Array.from(hashArray, function (_byte) {
      return _byte.toString(16).padStart(2, "0");
    }).join("");
    return hashHex;
  };
  var messageBytes = new TextEncoder().encode(str);
  var paddedMessage = preprocessMessage(messageBytes);
  var sha256Hash = computeSHA256(paddedMessage);
  return sha256Hash;
}

// const inputString = 'Hello, World!';
// const sha256Hash = calculateSHA256(inputString);
// console.log('SHA-256:', sha256Hash);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (calculateSHA256);

/***/ }),

/***/ 71077:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71354);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76314);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.swipeable-list-item__content {
    background-color: transparent;
    height: auto;
}`, "",{"version":3,"sources":["webpack://./src/components/atomic/molecules/conversation/style.css"],"names":[],"mappings":"AAAA;IACI,6BAA6B;IAC7B,YAAY;AAChB","sourcesContent":[".swipeable-list-item__content {\n    background-color: transparent;\n    height: auto;\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 6716:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71354);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76314);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.swipeable-list-item__content {
    background-color: transparent;
}`, "",{"version":3,"sources":["webpack://./src/components/atomic/molecules/thread/style.css"],"names":[],"mappings":"AAAA;IACI,6BAA6B;AACjC","sourcesContent":[".swipeable-list-item__content {\n    background-color: transparent;\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 23385:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71354);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76314);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.Resizer {
    background: #000;
    opacity: 0.2;
    z-index: 1;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    -moz-background-clip: padding;
    -webkit-background-clip: padding;
    background-clip: padding-box;
  }
  
  .Resizer:hover {
    -webkit-transition: all 2s ease;
    transition: all 2s ease;
  }
  
  .Resizer.horizontal {
    height: 11px;
    margin: -5px 0;
    border-top: 5px solid rgba(255, 255, 255, 0);
    border-bottom: 5px solid rgba(255, 255, 255, 0);
    cursor: row-resize;
    width: 100%;
  }
  
  .Resizer.horizontal:hover {
    border-top: 5px solid rgba(0, 0, 0, 0.5);
    border-bottom: 5px solid rgba(0, 0, 0, 0.5);
  }
  
  .Resizer.vertical {
    width: 11px;
    margin: 0 -5px;
    border-left: 5px solid rgba(255, 255, 255, 0);
    border-right: 5px solid rgba(255, 255, 255, 0);
    cursor: col-resize;
  }
  
  .Resizer.vertical:hover {
    border-left: 5px solid rgba(0, 0, 0, 0.5);
    border-right: 5px solid rgba(0, 0, 0, 0.5);
  }
  .Resizer.disabled {
    cursor: not-allowed;
  }
  .Resizer.disabled:hover {
    border-color: transparent;
  }`, "",{"version":3,"sources":["webpack://./src/components/pages/feed/splitpanestyle.css"],"names":[],"mappings":"AAAA;IACI,gBAAgB;IAChB,YAAY;IACZ,UAAU;IACV,2BAA2B;IAC3B,8BAA8B;IAC9B,sBAAsB;IACtB,6BAA6B;IAC7B,gCAAgC;IAChC,4BAA4B;EAC9B;;EAEA;IACE,+BAA+B;IAC/B,uBAAuB;EACzB;;EAEA;IACE,YAAY;IACZ,cAAc;IACd,4CAA4C;IAC5C,+CAA+C;IAC/C,kBAAkB;IAClB,WAAW;EACb;;EAEA;IACE,wCAAwC;IACxC,2CAA2C;EAC7C;;EAEA;IACE,WAAW;IACX,cAAc;IACd,6CAA6C;IAC7C,8CAA8C;IAC9C,kBAAkB;EACpB;;EAEA;IACE,yCAAyC;IACzC,0CAA0C;EAC5C;EACA;IACE,mBAAmB;EACrB;EACA;IACE,yBAAyB;EAC3B","sourcesContent":[".Resizer {\n    background: #000;\n    opacity: 0.2;\n    z-index: 1;\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    -moz-background-clip: padding;\n    -webkit-background-clip: padding;\n    background-clip: padding-box;\n  }\n  \n  .Resizer:hover {\n    -webkit-transition: all 2s ease;\n    transition: all 2s ease;\n  }\n  \n  .Resizer.horizontal {\n    height: 11px;\n    margin: -5px 0;\n    border-top: 5px solid rgba(255, 255, 255, 0);\n    border-bottom: 5px solid rgba(255, 255, 255, 0);\n    cursor: row-resize;\n    width: 100%;\n  }\n  \n  .Resizer.horizontal:hover {\n    border-top: 5px solid rgba(0, 0, 0, 0.5);\n    border-bottom: 5px solid rgba(0, 0, 0, 0.5);\n  }\n  \n  .Resizer.vertical {\n    width: 11px;\n    margin: 0 -5px;\n    border-left: 5px solid rgba(255, 255, 255, 0);\n    border-right: 5px solid rgba(255, 255, 255, 0);\n    cursor: col-resize;\n  }\n  \n  .Resizer.vertical:hover {\n    border-left: 5px solid rgba(0, 0, 0, 0.5);\n    border-right: 5px solid rgba(0, 0, 0, 0.5);\n  }\n  .Resizer.disabled {\n    cursor: not-allowed;\n  }\n  .Resizer.disabled:hover {\n    border-color: transparent;\n  }"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 33375:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71354);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76314);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `#main {
  position: relative;
  margin: 0;
}
.container, .canvas-wrapper {
  width: 100%;
  /* Other styling as needed */
}

#video, #output {
  width: 100% !important;
  height: auto !important;
  display:
   block; /* To prevent default margin/padding issues */
}

#video {
  display: none;
}
.scatter-container {
  display: none;
}
#scatter-gl-container-left, #scatter-gl-container-right {
  position: relative;
  float: left;
}`, "",{"version":3,"sources":["webpack://./src/components/pages/hands/style.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,SAAS;AACX;AACA;EACE,WAAW;EACX,4BAA4B;AAC9B;;AAEA;EACE,sBAAsB;EACtB,uBAAuB;EACvB;QACM,EAAE,6CAA6C;AACvD;;AAEA;EACE,aAAa;AACf;AACA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;EAClB,WAAW;AACb","sourcesContent":["#main {\n  position: relative;\n  margin: 0;\n}\n.container, .canvas-wrapper {\n  width: 100%;\n  /* Other styling as needed */\n}\n\n#video, #output {\n  width: 100% !important;\n  height: auto !important;\n  display:\n   block; /* To prevent default margin/padding issues */\n}\n\n#video {\n  display: none;\n}\n.scatter-container {\n  display: none;\n}\n#scatter-gl-container-left, #scatter-gl-container-right {\n  position: relative;\n  float: left;\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 6523:
/***/ ((module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71354);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76314);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  height: 100vh;
  display: flex;
  flex-direction: column;
}

#root {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

`, "",{"version":3,"sources":["webpack://./src/index.css"],"names":[],"mappings":"AAAA;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;EAClC,aAAa;EACb,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE;aACW;AACb","sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n#root {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ })

}]);
//# sourceMappingURL=713.main.js.map